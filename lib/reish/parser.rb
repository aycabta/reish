#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 903)

  def initialize(lex)
    @yydebug = true

    @lex = lex
  end

  attr_accessor :yydebug

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok
      end
      super
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'123,124,234,141,234,233,137,233,234,338,323,233,139,84,85,404,127,114',
'121,123,124,139,340,123,124,141,45,46,47,48,49,50,55,308,337,141,300',
'121,300,127,114,-109,300,156,141,141,96,97,351,45,46,47,48,49,50,55',
'345,74,75,141,76,77,78,297,79,100,101,102,103,104,105,106,107,108,109',
'110,111,141,112,113,74,75,141,76,77,78,141,79,100,101,102,103,104,105',
'106,107,108,109,110,111,141,112,113,127,114,329,-109,234,330,291,233',
'96,97,45,46,47,48,49,50,55,88,89,90,91,94,95,127,114,92,86,87,325,141',
'326,327,331,45,46,47,48,49,50,55,141,74,75,141,76,77,78,321,79,100,101',
'102,103,104,105,106,107,108,109,110,111,323,112,113,74,75,141,76,77',
'78,141,79,100,101,102,103,104,105,106,107,108,109,110,111,283,112,113',
'127,114,82,83,123,124,283,132,141,141,45,46,47,48,49,50,55,340,341,343',
'131,175,176,127,114,177,178,179,180,181,182,183,184,45,46,47,48,49,50',
'55,346,74,75,141,76,77,78,348,79,100,101,102,103,104,105,106,107,108',
'109,110,111,141,112,113,74,75,141,76,77,78,354,79,100,101,102,103,104',
'105,106,107,108,109,110,111,356,112,113,127,114,141,141,366,141,141',
'141,376,378,45,46,47,48,49,50,55,379,380,141,141,185,186,127,114,187',
'188,189,190,191,192,193,194,45,46,47,48,49,50,55,141,74,75,141,76,77',
'78,141,79,100,101,102,103,104,105,106,107,108,109,110,111,141,112,113',
'74,75,141,76,77,78,323,79,100,101,102,103,104,105,106,107,108,109,110',
'111,141,112,113,127,114,393,141,141,141,141,141,223,141,45,46,47,48',
'49,50,55,88,89,90,91,231,141,127,114,92,86,87,141,141,412,141,141,45',
'46,47,48,49,50,55,141,74,75,141,76,77,78,141,79,100,101,102,103,104',
'105,106,107,108,109,110,111,416,112,113,74,75,141,76,77,78,80,79,100',
'101,102,103,104,105,106,107,108,109,110,111,291,112,113,127,114,141',
'141,428,429,141,432,,,45,46,47,48,49,50,55,88,89,90,91,,,127,114,92',
'86,87,,,,,,45,46,47,48,49,50,55,,74,75,,76,77,78,,79,100,101,102,103',
'104,105,106,107,108,109,110,111,,112,113,74,75,,76,77,78,,79,100,101',
'102,103,104,105,106,107,108,109,110,111,,112,113,127,114,,,,,,,,,45',
'46,47,48,49,50,55,88,89,90,91,,,173,114,92,86,87,,,,,,45,46,47,48,49',
'50,55,,74,75,,76,77,78,,79,100,101,102,103,104,105,106,107,108,109,110',
'111,,112,113,74,75,,76,77,78,-106,79,,-109,,173,114,,96,97,,,,,277,45',
'46,47,48,49,50,55,213,173,114,,215,,,,214,,,45,46,47,48,49,50,55,,,',
',173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,267',
'76,77,78,,79,45,46,47,48,49,50,55,,,,,,202,74,75,,76,77,78,,79,,,,,',
',,,173,114,74,75,265,76,77,78,,79,45,46,47,48,49,50,55,88,89,90,91,',
'279,,,92,86,87,88,89,90,91,234,,7,233,92,86,87,,,74,75,,76,77,78,,79',
',30,31,32,33,45,46,47,48,49,50,55,204,59,,,,300,60,,61,63,,,64,65,,66',
'7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49',
'50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76',
'77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65',
',66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47',
'48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74',
'75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63',
',,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45',
'46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72',
'73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,',
'61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32',
'33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70',
'71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,',
',,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30',
'31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68',
'69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55',
',59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78',
',79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7',
'67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49',
'50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76',
'77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65',
',66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47',
'48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74',
'75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63',
',,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45',
'46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,,67,68,69,70,71,72,73',
'74,75,,76,77,78,7,79,,,3,4,,,,,,,,,,,30,31,32,33,45,46,47,48,49,50,55',
',59,,,,,60,,61,63,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78',
',79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,',
'67,68,69,70,71,72,73,74,75,395,76,77,78,,79,286,114,,,,,,,,,45,46,47',
'48,49,50,55,88,89,90,91,-239,-239,-239,-239,92,86,87,,92,86,87,234,',
',233,,,,286,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,,',
',,,,,300,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',286,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,286,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',286,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
',173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,173,114,74,75,,76',
'77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45,46',
'47,48,49,50,55,,286,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,',
'360,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,286,114,74,75',
',76,77,78,,79,45,46,47,48,49,50,55,,,,,173,114,74,75,,76,77,78,,79,45',
'46,47,48,49,50,55,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55',
',,,,,,74,75,,76,77,78,,79,,,,,,,,,,,74,75,,76,77,78,,79,88,89,90,91',
'88,89,90,91,92,86,87,,92,86,87,329,,,330,329,,,330,,30,31,32,33,45,46',
'47,48,49,50,55,,59,,,,,60,,61,63,331,,64,65,331,66,,,,,,,,,74,75,,,77',
'78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66',
',,,,,,,,74,75,,,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60',
',61,63,,,64,65,,66,,,,,,,,,74,75,,,77,78,,79,30,31,32,33,45,46,47,48',
'49,50,55,,59,,,,,60,,61,63,,,64,65,,66,,,,,,,,,74,75,,76,77,78,,79,30',
'31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,64,65,,66,,,,,,,,',
'74,75,,76,77,78,,79,100,101,102,103,104,105,106,107,108,109,110,111',
',112,113,100,101,102,103,104,105,106,107,108,109,110,111,,112,113,-239',
'-239,-239,-239,-239,-239,-239,-239,92,86,87,,92,86,87,-239,-239,-239',
'-239,88,89,90,91,92,86,87,,92,86,87,88,89,90,91,88,89,90,91,92,86,87',
',92,86,87' ]
        racc_action_table = arr = ::Array.new(2595, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'27,27,299,311,359,299,62,359,372,303,408,372,62,5,5,389,27,27,27,239',
'239,389,408,119,119,367,27,27,27,27,27,27,27,236,303,65,299,239,359',
'119,119,252,372,80,318,64,252,252,318,119,119,119,119,119,119,119,311',
'27,27,63,27,27,27,225,27,27,27,27,27,27,27,27,27,27,27,27,27,224,27',
'27,119,119,86,119,119,119,87,119,119,119,119,119,119,119,119,119,119',
'119,119,119,88,119,119,67,67,392,237,144,392,219,144,237,237,67,67,67',
'67,67,67,67,158,158,158,158,17,17,92,92,158,158,158,293,282,293,293',
'392,92,92,92,92,92,92,92,284,67,67,288,67,67,67,289,67,67,67,67,67,67',
'67,67,67,67,67,67,67,290,67,67,92,92,89,92,92,92,90,92,92,92,92,92,92',
'92,92,92,92,92,92,92,211,92,92,66,66,2,2,29,29,210,58,209,91,66,66,66',
'66,66,66,66,304,307,310,56,102,102,68,68,102,102,102,102,102,102,102',
'102,68,68,68,68,68,68,68,312,66,66,314,66,66,66,315,66,66,66,66,66,66',
'66,66,66,66,66,66,66,316,66,66,68,68,94,68,68,68,320,68,68,68,68,68',
'68,68,68,68,68,68,68,68,322,68,68,71,71,323,95,333,336,96,345,347,350',
'71,71,71,71,71,71,71,352,353,356,97,103,103,370,370,103,103,103,103',
'103,103,103,103,370,370,370,370,370,370,370,361,71,71,362,71,71,71,363',
'71,71,71,71,71,71,71,71,71,71,71,71,71,230,71,71,370,370,368,370,370',
'370,369,370,370,370,370,370,370,370,370,370,370,370,370,370,131,370',
'370,340,340,371,132,133,383,134,135,136,139,340,340,340,340,340,340',
'340,401,401,401,401,143,394,280,280,401,401,401,396,397,398,151,152',
'280,280,280,280,280,280,280,154,340,340,402,340,340,340,403,340,340',
'340,340,340,340,340,340,340,340,340,340,340,406,340,340,280,280,155',
'280,280,280,1,280,280,280,280,280,280,280,280,280,280,280,280,280,411',
'280,280,145,145,415,421,423,424,426,431,,,145,145,145,145,145,145,145',
'227,227,227,227,,,72,72,227,227,227,,,,,,72,72,72,72,72,72,72,,145,145',
',145,145,145,,145,145,145,145,145,145,145,145,145,145,145,145,145,,145',
'145,72,72,,72,72,72,,72,72,72,72,72,72,72,72,72,72,72,72,72,,72,72,73',
'73,,,,,,,,,73,73,73,73,73,73,73,157,157,157,157,,,193,193,157,157,157',
',,,,,193,193,193,193,193,193,193,,73,73,,73,73,73,,73,73,73,73,73,73',
'73,73,73,73,73,73,73,,73,73,193,193,,193,193,193,20,193,,20,,184,184',
',20,20,,,,,193,184,184,184,184,184,184,184,130,110,110,,130,,,,130,',
',110,110,110,110,110,110,110,,,,,183,183,184,184,,184,184,184,,184,183',
'183,183,183,183,183,183,,194,194,110,110,184,110,110,110,,110,194,194',
'194,194,194,194,194,,,,,,110,183,183,,183,183,183,,183,,,,,,,,,111,111',
'194,194,183,194,194,194,,194,111,111,111,111,111,111,111,229,229,229',
'229,,194,,,229,229,229,6,6,6,6,229,,140,229,6,6,6,,,111,111,,111,111',
'111,,111,,140,140,140,140,140,140,140,140,140,140,140,111,140,,,,229',
'140,,140,140,,,140,140,,140,142,140,140,140,140,140,140,140,140,140',
',140,140,140,,140,142,142,142,142,142,142,142,142,142,142,142,,142,',
',,,142,,142,142,,,142,142,,142,164,142,142,142,142,142,142,142,142,142',
',142,142,142,,142,164,164,164,164,164,164,164,164,164,164,164,,164,',
',,,164,,164,164,,,164,164,,164,163,164,164,164,164,164,164,164,164,164',
',164,164,164,,164,163,163,163,163,163,163,163,163,163,163,163,,163,',
',,,163,,163,163,,,163,163,,163,226,163,163,163,163,163,163,163,163,163',
',163,163,163,,163,226,226,226,226,226,226,226,226,226,226,226,,226,',
',,,226,,226,226,,,226,226,,226,84,226,226,226,226,226,226,226,226,226',
',226,226,226,,226,84,84,84,84,84,84,84,84,84,84,84,,84,,,,,84,,84,84',
',,84,84,,84,85,84,84,84,84,84,84,84,84,84,,84,84,84,,84,85,85,85,85',
'85,85,85,85,85,85,85,,85,,,,,85,,85,85,,,85,85,,85,222,85,85,85,85,85',
'85,85,85,85,,85,85,85,,85,222,222,222,222,222,222,222,222,222,222,222',
',222,,,,,222,,222,222,,,222,222,,222,221,222,222,222,222,222,222,222',
'222,222,,222,222,222,,222,221,221,221,221,221,221,221,221,221,221,221',
',221,,,,,221,,221,221,,,221,221,,221,220,221,221,221,221,221,221,221',
'221,221,,221,221,221,,221,220,220,220,220,220,220,220,220,220,220,220',
',220,,,,,220,,220,220,,,220,220,,220,162,220,220,220,220,220,220,220',
'220,220,,220,220,220,,220,162,162,162,162,162,162,162,162,162,162,162',
',162,,,,,162,,162,162,,,162,162,,162,7,162,162,162,162,162,162,162,162',
'162,,162,162,162,,162,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,7,,7,7,,,7,7,,7,384',
'7,7,7,7,7,7,7,7,7,,7,7,7,,7,384,384,384,384,384,384,384,384,384,384',
'384,,384,,,,,384,,384,384,,,384,384,,384,385,384,384,384,384,384,384',
'384,384,384,,384,384,384,,384,385,385,385,385,385,385,385,385,385,385',
'385,,385,,,,,385,,385,385,,,385,385,,385,386,385,385,385,385,385,385',
'385,385,385,,385,385,385,,385,386,386,386,386,386,386,386,386,386,386',
'386,,386,,,,,386,,386,386,,,386,386,,386,161,386,386,386,386,386,386',
'386,386,386,,386,386,386,,386,161,161,161,161,161,161,161,161,161,161',
'161,,161,,,,,161,,161,161,,,161,161,,161,159,161,161,161,161,161,161',
'161,161,161,,161,161,161,,161,159,159,159,159,159,159,159,159,159,159',
'159,,159,,,,,159,,159,159,,,159,159,,159,,159,159,159,159,159,159,159',
'159,159,,159,159,159,0,159,,,0,0,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,0,,0',
',,,,0,,0,0,,,0,0,,0,160,0,0,0,0,0,0,0,0,0,,0,0,0,,0,160,160,160,160',
'160,160,160,160,160,160,160,,160,,,,,160,,160,160,,,160,160,,160,,160',
'160,160,160,160,160,160,160,160,376,160,160,160,,160,376,376,,,,,,,',
',376,376,376,376,376,376,376,298,298,298,298,247,247,247,247,298,298',
'298,,247,247,247,298,,,298,,,,217,217,376,376,,376,376,376,,376,217',
'217,217,217,217,217,217,,105,105,,,,,,,,298,105,105,105,105,105,105',
'105,,,,,106,106,217,217,,217,217,217,,217,106,106,106,106,106,106,106',
',107,107,105,105,,105,105,105,,105,107,107,107,107,107,107,107,,,,,108',
'108,106,106,,106,106,106,,106,108,108,108,108,108,108,108,,109,109,107',
'107,,107,107,107,,107,109,109,109,109,109,109,109,,,,,189,189,108,108',
',108,108,108,,108,189,189,189,189,189,189,189,,190,190,109,109,,109',
'109,109,,109,190,190,190,190,190,190,190,,,,,112,112,189,189,,189,189',
'189,,189,112,112,112,112,112,112,112,,113,113,190,190,,190,190,190,',
'190,113,113,113,113,113,113,113,,,,,192,192,112,112,,112,112,112,,112',
'192,192,192,192,192,192,192,,186,186,113,113,,113,113,113,,113,186,186',
'186,186,186,186,186,,,,,216,216,192,192,,192,192,192,,192,216,216,216',
'216,216,216,216,,104,104,186,186,,186,186,186,,186,104,104,104,104,104',
'104,104,,,,,100,100,216,216,,216,216,216,,216,100,100,100,100,100,100',
'100,,182,182,104,104,,104,104,104,,104,182,182,182,182,182,182,182,',
',,,181,181,100,100,,100,100,100,,100,181,181,181,181,181,181,181,,180',
'180,182,182,,182,182,182,,182,180,180,180,180,180,180,180,,,,,179,179',
'181,181,,181,181,181,,181,179,179,179,179,179,179,179,,241,241,180,180',
',180,180,180,,180,241,241,241,241,241,241,241,,,,,243,243,179,179,,179',
'179,179,,179,243,243,243,243,243,243,243,,178,178,241,241,,241,241,241',
',241,178,178,178,178,178,178,178,,,,,177,177,243,243,,243,243,243,,243',
'177,177,177,177,177,177,177,,187,187,178,178,,178,178,178,,178,187,187',
'187,187,187,187,187,,,,,176,176,177,177,,177,177,177,,177,176,176,176',
'176,176,176,176,,175,175,187,187,,187,187,187,,187,175,175,175,175,175',
'175,175,,,,,188,188,176,176,,176,176,176,,176,188,188,188,188,188,188',
'188,,324,324,175,175,,175,175,175,,175,324,324,324,324,324,324,324,',
',,324,101,101,188,188,,188,188,188,,188,101,101,101,101,101,101,101',
',409,409,324,324,,324,324,324,,324,409,409,409,409,409,409,409,,,,,185',
'185,101,101,,101,101,101,,101,185,185,185,185,185,185,185,,191,191,409',
'409,,409,409,409,,409,191,191,191,191,191,191,191,,,,,,,185,185,,185',
'185,185,,185,,,,,,,,,,,191,191,,191,191,191,,191,295,295,295,295,294',
'294,294,294,295,295,295,,294,294,294,295,,,295,294,,,294,,153,153,153',
'153,153,153,153,153,153,153,153,,153,,,,,153,,153,153,295,,153,153,294',
'153,,,,,,,,,153,153,,,153,153,,153,169,169,169,169,169,169,169,169,169',
'169,169,,169,,,,,169,,169,169,,,169,169,,169,,,,,,,,,169,169,,,169,169',
',169,168,168,168,168,168,168,168,168,168,168,168,,168,,,,,168,,168,168',
',,168,168,,168,,,,,,,,,168,168,,,168,168,,168,166,166,166,166,166,166',
'166,166,166,166,166,,166,,,,,166,,166,166,,,166,166,,166,,,,,,,,,166',
'166,,166,166,166,,166,167,167,167,167,167,167,167,167,167,167,167,,167',
',,,,167,,167,167,,,167,167,,167,,,,,,,,,167,167,,167,167,167,,167,25',
'25,25,25,25,25,25,25,25,25,25,25,,25,25,98,98,98,98,98,98,98,98,98,98',
'98,98,,98,98,248,248,248,248,249,249,249,249,248,248,248,,249,249,249',
'250,250,250,250,292,292,292,292,250,250,250,,292,292,292,400,400,400',
'400,399,399,399,399,400,400,400,,399,399,399' ]
        racc_action_check = arr = ::Array.new(2595, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1474,   434,   174,   nil,   nil,    -7,   734,  1202,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   102,   nil,   nil,
   601,   nil,   nil,   nil,   nil,  2447,   nil,    -8,   nil,   186,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   203,   nil,   187,   nil,
   nil,   nil,   -39,    41,    27,    17,   166,    79,   189,   nil,
   nil,   253,   450,   514,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,   nil,   nil,   944,   987,    64,    68,    82,   151,
   155,   181,   102,   nil,   238,   262,   265,   279,  2462,   nil,
  1878,  2151,   138,   225,  1857,  1623,  1644,  1662,  1683,  1701,
   607,   685,  1761,  1779,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   600,   343,   349,   350,   352,   353,   344,   nil,   nil,   355,
   729,   nil,   772,   355,    89,   427,   nil,   nil,   nil,   nil,
   nil,   377,   378,  2275,   386,   412,   nil,   552,   117,  1417,
  1517,  1374,  1159,   858,   815,   nil,  2404,  2447,  2361,  2318,
   nil,   nil,   nil,   nil,   nil,  2091,  2073,  2034,  2013,  1956,
  1935,  1917,  1896,   628,   589,  2190,  1818,  2052,  2112,  1722,
  1740,  2208,  1800,   537,   646,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   174,   165,   nil,   nil,   nil,   nil,  1839,  1605,   nil,    66,
  1116,  1073,  1030,   nil,    59,    35,   901,   465,   nil,   723,
   320,   nil,   nil,   nil,   nil,   nil,   -34,    96,   nil,    11,
   nil,  1974,   nil,  1995,   nil,   nil,   nil,  1608,  2547,  2551,
  2562,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   363,   nil,   114,   nil,   125,   nil,   nil,   nil,   128,   122,
   119,   nil,  2566,   113,  2282,  2278,   nil,   nil,  1604,   -16,
   nil,   nil,   nil,   -21,   150,   nil,   nil,   181,   nil,   nil,
   168,   -15,   201,   nil,   215,   210,   233,   nil,    26,   nil,
   219,   nil,   228,   261,  2130,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   253,   nil,   nil,   264,   nil,   nil,   nil,
   340,   nil,   nil,   nil,   nil,   266,   nil,   241,   nil,   nil,
   258,   nil,   264,   266,   nil,   nil,   278,   nil,   nil,   -14,
   nil,   299,   302,   306,   nil,   nil,   nil,     7,   325,   302,
   276,   338,   -10,   nil,   nil,   nil,  1566,   nil,   nil,   nil,
   nil,   nil,   nil,   351,  1245,  1288,  1331,   nil,   nil,   -30,
   nil,   nil,    87,   nil,   368,   nil,   374,   375,   364,  2581,
  2577,   378,   389,   393,   nil,   nil,   397,   nil,   -35,  2169,
   nil,   405,   nil,   nil,   nil,   435,   nil,   nil,   nil,   nil,
   nil,   436,   nil,   427,   428,   nil,   439,   nil,   nil,   nil,
   nil,   430,   nil ]

racc_action_default = [
  -239,  -239,  -239,    -2,    -3,    -4,    -7,  -239,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,
   -32,   -33,   -36,   -37,   -38,   -41,   -40,   -59,   -53,   -59,
   -69,   -70,   -71,   -72,   -80,   -81,   -82,   -83,   -84,   -85,
   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,
   -96,   -97,   -98,   -99,  -100,  -235,  -239,  -107,  -239,  -110,
  -233,  -233,  -238,  -231,  -231,  -231,  -239,   -73,   -73,  -151,
  -152,   -73,   -73,   -73,  -156,  -158,  -235,  -162,  -163,  -168,
  -239,    -1,  -225,  -226,    -5,    -6,  -231,  -231,  -231,  -231,
  -231,  -231,   -73,   -17,  -231,  -231,  -231,  -231,   -39,  -183,
  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,   -46,   -47,   -48,   -49,   -50,   -59,
   -52,   -55,   -60,   -61,   -63,   -75,   -77,   -78,   -79,   -54,
  -239,  -231,  -231,  -231,  -231,  -231,  -239,  -235,  -238,  -231,
  -239,  -235,  -239,  -239,  -239,   -74,  -149,  -150,  -153,  -154,
  -155,  -231,  -231,  -239,  -231,  -231,   433,    -8,    -9,  -239,
  -239,  -239,  -239,  -239,  -239,   -16,  -239,  -239,  -239,  -239,
  -184,  -185,  -223,  -224,  -186,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,  -191,  -194,  -197,  -200,  -203,
  -206,  -209,  -218,  -212,  -215,  -221,  -222,   -51,   -76,  -231,
   -65,   -65,  -101,  -102,  -103,  -104,  -239,  -239,  -238,  -113,
  -174,  -239,  -239,  -128,  -231,  -239,  -239,  -131,  -232,  -239,
  -231,  -142,  -144,  -235,  -235,  -238,  -239,  -161,   -41,   -59,
  -236,  -238,  -165,  -238,  -170,   -10,   -11,   -12,   -13,   -14,
   -15,   -28,   -32,   -29,   -34,   -35,  -187,  -188,  -192,  -195,
  -198,  -201,  -204,  -207,  -210,  -219,  -213,  -216,  -189,  -190,
  -193,  -196,  -199,  -202,  -205,  -208,  -211,  -220,  -214,  -217,
  -238,   -57,  -231,   -67,  -231,   -44,   -45,  -105,  -231,  -239,
  -117,   -42,  -179,  -175,  -239,  -239,  -238,  -130,  -239,  -239,
  -136,  -137,  -138,  -239,  -239,  -229,  -230,  -239,  -238,  -160,
  -239,  -231,  -239,  -171,  -231,  -239,  -231,  -238,  -231,  -238,
  -239,  -111,  -119,  -231,  -115,  -235,  -235,  -235,  -121,  -123,
  -124,  -125,  -126,  -239,  -235,  -235,  -231,  -236,  -143,  -238,
   -73,  -236,  -236,  -164,  -166,  -231,  -169,  -239,  -237,   -58,
  -239,   -66,  -239,  -239,  -108,  -112,  -231,  -118,   -43,  -239,
  -235,  -231,  -231,  -231,  -234,  -234,  -129,  -231,  -231,  -117,
  -239,  -239,  -239,  -157,  -159,  -167,  -239,   -56,   -62,   -68,
   -64,  -120,  -235,  -231,  -176,  -177,  -178,  -235,  -235,  -133,
  -132,  -238,  -239,  -145,  -231,  -236,  -231,  -231,  -239,  -180,
  -181,  -182,  -231,  -231,  -235,  -135,  -239,  -140,  -117,  -239,
  -173,  -113,  -116,  -238,  -238,  -231,  -139,  -235,  -146,  -147,
  -148,  -231,  -114,  -239,  -239,  -134,  -231,  -172,  -122,  -127,
  -238,  -239,  -141 ]

racc_goto_table = [
    21,   138,   290,   144,   146,   147,   339,    21,   148,   149,
   150,   129,    44,   322,   309,    99,   328,   332,   239,    44,
   282,   284,   251,   253,   238,   318,   126,   211,     6,   165,
   237,   254,   255,   239,   239,    93,    98,   287,   288,   238,
   238,   212,    43,   252,   252,   134,   135,   387,   388,    43,
   218,   133,   210,   302,   324,   355,   208,   359,   209,   377,
   119,   280,   311,   364,   314,   126,   126,   126,   365,     5,
   126,   126,   126,   299,   232,   336,   230,    81,   417,     2,
   304,   418,   208,   151,    21,    21,   152,   240,   170,   241,
   154,   126,   391,   243,   155,   313,    44,    44,   293,     1,
   nil,   207,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   420,   370,   157,   158,   407,   373,   374,   nil,   126,   nil,
   nil,   nil,   334,   335,   nil,   nil,    43,    43,   nil,    42,
   nil,   419,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,
    21,   nil,    21,   nil,   126,   358,   nil,   nil,   136,   nil,
   nil,   nil,    44,   nil,    44,   nil,   nil,   nil,   nil,    21,
    21,    21,    21,    21,    21,    44,    21,    21,   227,   409,
   229,    44,    44,    44,    44,    44,    44,   nil,    44,    44,
    44,    44,    43,   382,    43,   nil,   nil,   245,   246,   247,
   248,   249,   250,   nil,   422,    43,   394,   396,   nil,   nil,
   nil,    43,    43,    43,    43,    43,    43,   nil,    43,    43,
    43,    43,   nil,    42,    42,   285,   285,   316,   nil,   nil,
    21,    21,    21,   130,   225,   nil,    21,   nil,   219,   nil,
   421,   nil,    44,    44,    44,   nil,   nil,   nil,    44,   nil,
   285,   nil,   285,   nil,   153,   nil,   235,   236,   292,   294,
   295,   nil,   nil,   nil,   298,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    43,    43,   nil,   nil,   nil,    43,    42,
   nil,    42,   nil,   nil,   nil,   nil,   nil,   372,   nil,   126,
   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,    42,    42,
    42,    42,    42,    42,   nil,    42,    42,    42,    42,   nil,
   nil,   nil,   nil,   nil,   289,   224,   nil,   392,   nil,   228,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   296,
   nil,   307,   nil,   285,   nil,   nil,   nil,   310,   405,   312,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    42,    42,   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   315,   nil,   nil,   126,
   nil,   nil,   nil,   nil,   nil,   285,   nil,   317,   nil,   319,
   nil,   nil,   333,   nil,    21,    21,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   342,   nil,    44,    44,    44,   nil,
   nil,   305,   306,   350,   nil,   353,   nil,   nil,   285,   nil,
   nil,   nil,   399,   400,   401,   140,   142,   143,   357,   nil,
   nil,   nil,   nil,   nil,   nil,   371,    43,    43,    43,   nil,
   nil,   369,   nil,   nil,   nil,   nil,   nil,   nil,   159,   160,
   161,   162,   163,   164,   nil,   nil,   166,   167,   168,   169,
   nil,   381,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   389,   390,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   406,   nil,   nil,
   nil,   nil,   nil,   216,   217,   nil,   221,   222,   nil,   408,
   nil,   226,   411,   361,   362,   363,   nil,   413,   414,   423,
   424,   nil,   367,   368,   nil,   nil,   242,   244,   nil,   nil,
   425,   nil,   nil,    42,    42,    42,   431,   nil,   nil,   nil,
   nil,   430,   nil,   nil,   nil,   171,   174,   nil,   383,   195,
   196,   197,   198,   199,   200,   201,   203,   205,   206,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   397,   nil,   nil,   nil,   nil,   402,   403,   nil,   nil,   nil,
   nil,   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   415,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   303,   nil,   nil,   426,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   266,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   320,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   344,   nil,   nil,   347,   nil,   349,   nil,
   352,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   384,   385,   386,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   398,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   410,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   427 ]

racc_goto_check = [
    21,    81,    70,    43,     7,     7,    88,    21,     7,     7,
     7,    36,    33,    71,    86,    50,    76,    76,    34,    33,
    45,    45,    18,    18,    25,    49,    30,    48,     5,     7,
    20,    22,    22,    34,    34,     5,    26,    29,    29,    25,
    25,    64,    32,    20,    20,    75,    75,    77,    77,    32,
    68,    69,    47,    74,    28,    72,    43,    73,    42,    41,
    35,    39,    29,    78,    29,    30,    30,    30,    79,     4,
    30,    30,    30,    82,    83,    84,    85,     3,    87,     2,
    89,    90,    43,    91,    21,    21,    92,    93,    50,    94,
    95,    30,    71,    96,    97,    98,    33,    33,    99,     1,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,    86,     5,     5,    76,    86,    86,   nil,    30,   nil,
   nil,   nil,    74,    74,   nil,   nil,    32,    32,   nil,    31,
   nil,    71,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    21,   nil,    21,   nil,    30,    29,   nil,   nil,    40,   nil,
   nil,   nil,    33,   nil,    33,   nil,   nil,   nil,   nil,    21,
    21,    21,    21,    21,    21,    33,    21,    21,     5,    86,
     5,    33,    33,    33,    33,    33,    33,   nil,    33,    33,
    33,    33,    32,    74,    32,   nil,   nil,     5,     5,     5,
     5,     5,     5,   nil,    70,    32,    74,    29,   nil,   nil,
   nil,    32,    32,    32,    32,    32,    32,   nil,    32,    32,
    32,    32,   nil,    31,    31,    30,    30,    43,   nil,   nil,
    21,    21,    21,    63,    40,   nil,    21,   nil,    46,   nil,
    29,   nil,    33,    33,    33,   nil,   nil,   nil,    33,   nil,
    30,   nil,    30,   nil,    63,   nil,    46,    46,     5,     5,
     5,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    32,    32,   nil,   nil,   nil,    32,    31,
   nil,    31,   nil,   nil,   nil,   nil,   nil,     7,   nil,    30,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,    31,    31,
    31,    31,    31,    31,   nil,    31,    31,    31,    31,   nil,
   nil,   nil,   nil,   nil,    40,    63,   nil,    43,   nil,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,
   nil,    40,   nil,    30,   nil,   nil,   nil,    40,    81,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,
    31,    31,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,    30,   nil,    46,   nil,    46,
   nil,   nil,    40,   nil,    21,    21,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,    33,    33,    33,   nil,
   nil,    63,    63,    40,   nil,    40,   nil,   nil,    30,   nil,
   nil,   nil,     5,     5,     5,     6,     6,     6,    46,   nil,
   nil,   nil,   nil,   nil,   nil,    40,    32,    32,    32,   nil,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,     6,     6,
     6,     6,     6,     6,   nil,   nil,     6,     6,     6,     6,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,     6,     6,   nil,     6,     6,   nil,    46,
   nil,     6,    46,    63,    63,    63,   nil,    46,    46,    40,
    40,   nil,    63,    63,   nil,   nil,     6,     6,   nil,   nil,
    46,   nil,   nil,    31,    31,    31,    40,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,   100,   100,   nil,    63,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    63,   nil,   nil,   nil,   nil,    63,    63,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     6,   nil,   nil,    63,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,   nil,   nil,     6,   nil,     6,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,     6,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,    99,    79,    75,    69,    28,   352,   -63,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -144,   nil,
  -123,     0,  -137,   nil,   nil,  -129,    11,   nil,  -237,  -179,
    -1,   129,    42,    12,  -135,    33,   -18,   nil,   nil,  -148,
    86,  -289,   -63,   -63,   nil,  -190,    95,   -71,   -97,  -258,
   -10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   168,   -89,   nil,   nil,   nil,   -83,    -8,
  -217,  -277,  -267,  -267,  -176,   -15,  -278,  -317,  -265,  -264,
   nil,   -61,  -154,   -70,  -227,   -67,  -226,  -329,  -298,  -152,
  -327,     9,    11,   -66,   -65,    12,   -62,    15,  -148,  -122,
   425,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   220,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   117,    22,    23,    24,    25,   nil,    26,   nil,   nil,
   172,   115,   116,   118,    27,   145,   120,    28,    29,   nil,
   nil,   nil,   nil,   125,   122,   nil,   nil,   nil,   nil,   nil,
   128,    34,    35,    36,    37,    38,    39,    40,    41,    51,
    52,    53,    54,   nil,   nil,    56,    57,    58,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    62,   nil,   nil,   301,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 89, :_reduce_2,
  1, 89, :_reduce_3,
  1, 90, :_reduce_none,
  2, 90, :_reduce_5,
  2, 90, :_reduce_6,
  1, 92, :_reduce_7,
  3, 92, :_reduce_8,
  3, 92, :_reduce_9,
  4, 93, :_reduce_10,
  4, 93, :_reduce_11,
  4, 93, :_reduce_12,
  4, 93, :_reduce_13,
  4, 93, :_reduce_14,
  4, 93, :_reduce_15,
  3, 93, :_reduce_16,
  2, 93, :_reduce_17,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 96, :_reduce_none,
  4, 105, :_reduce_28,
  4, 105, :_reduce_29,
  1, 105, :_reduce_none,
  1, 106, :_reduce_31,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  4, 108, :_reduce_34,
  4, 108, :_reduce_35,
  1, 108, :_reduce_36,
  1, 108, :_reduce_37,
  1, 107, :_reduce_none,
  2, 107, :_reduce_39,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  0, 116, :_reduce_42,
  2, 116, :_reduce_43,
  1, 117, :_reduce_none,
  1, 117, :_reduce_45,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 112, :_reduce_51,
  2, 115, :_reduce_52,
  1, 115, :_reduce_none,
  2, 125, :_reduce_54,
  0, 130, :_reduce_55,
  7, 126, :_reduce_56,
  1, 127, :_reduce_57,
  3, 127, :_reduce_58,
  0, 124, :_reduce_59,
  1, 124, :_reduce_none,
  0, 135, :_reduce_61,
  6, 132, :_reduce_62,
  0, 136, :_reduce_63,
  6, 132, :_reduce_64,
  0, 133, :_reduce_65,
  3, 133, :_reduce_66,
  0, 137, :_reduce_67,
  3, 137, :_reduce_68,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  0, 95, :_reduce_73,
  1, 95, :_reduce_none,
  1, 123, :_reduce_75,
  2, 123, :_reduce_76,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 139, :_reduce_90,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 149, :_reduce_101,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  4, 104, :_reduce_105,
  1, 153, :_reduce_none,
  1, 111, :_reduce_107,
  6, 154, :_reduce_108,
  1, 155, :_reduce_none,
  0, 157, :_reduce_110,
  5, 144, :_reduce_111,
  4, 156, :_reduce_112,
  0, 158, :_reduce_113,
  7, 158, :_reduce_114,
  0, 161, :_reduce_115,
  4, 161, :_reduce_116,
  0, 159, :_reduce_117,
  2, 159, :_reduce_118,
  0, 160, :_reduce_119,
  2, 160, :_reduce_120,
  0, 166, :_reduce_121,
  11, 142, :_reduce_122,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 167, :_reduce_126,
  11, 143, :_reduce_127,
  3, 140, :_reduce_128,
  6, 140, :_reduce_129,
  4, 140, :_reduce_130,
  0, 170, :_reduce_131,
  7, 168, :_reduce_132,
  6, 169, :_reduce_133,
  9, 169, :_reduce_134,
  7, 169, :_reduce_135,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  0, 172, :_reduce_138,
  9, 141, :_reduce_139,
  0, 175, :_reduce_140,
  13, 146, :_reduce_141,
  1, 173, :_reduce_142,
  3, 173, :_reduce_143,
  0, 177, :_reduce_144,
  7, 145, :_reduce_145,
  5, 176, :_reduce_146,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 97, :_reduce_149,
  2, 98, :_reduce_150,
  1, 99, :_reduce_151,
  1, 100, :_reduce_152,
  2, 101, :_reduce_153,
  2, 102, :_reduce_154,
  2, 103, :_reduce_155,
  0, 179, :_reduce_156,
  6, 119, :_reduce_157,
  0, 180, :_reduce_158,
  6, 120, :_reduce_159,
  4, 109, :_reduce_160,
  1, 181, :_reduce_161,
  1, 150, :_reduce_162,
  0, 183, :_reduce_163,
  5, 147, :_reduce_164,
  1, 182, :_reduce_165,
  3, 182, :_reduce_166,
  4, 182, :_reduce_167,
  0, 185, :_reduce_168,
  5, 148, :_reduce_169,
  1, 184, :_reduce_170,
  2, 184, :_reduce_171,
  7, 186, :_reduce_172,
  5, 186, :_reduce_173,
  1, 134, :_reduce_174,
  2, 134, :_reduce_175,
  5, 134, :_reduce_176,
  5, 134, :_reduce_177,
  5, 134, :_reduce_178,
  1, 187, :_reduce_179,
  5, 187, :_reduce_180,
  5, 187, :_reduce_181,
  5, 187, :_reduce_182,
  1, 114, :_reduce_183,
  2, 114, :_reduce_184,
  2, 138, :_reduce_185,
  2, 138, :_reduce_186,
  3, 138, :_reduce_187,
  3, 138, :_reduce_188,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_191,
  3, 138, :_reduce_192,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_221,
  2, 138, :_reduce_222,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 171, :_reduce_none,
  2, 171, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_none,
  0, 163, :_reduce_233,
  0, 165, :_reduce_234,
  0, 151, :_reduce_235,
  0, 174, :_reduce_236,
  0, 129, :_reduce_237,
  0, 128, :_reduce_238 ]

racc_reduce_n = 239

racc_shift_n = 433

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  :LPARLEN_ARG => 26,
  ")" => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :BEGIN => 42,
  :RESCUE => 43,
  :ASSOC => 44,
  :ELSE => 45,
  :ENSURE => 46,
  :WHILE => 47,
  :DO_COND => 48,
  :UNTIL => 49,
  :IF => 50,
  :ELSIF => 51,
  :THEN => 52,
  :UNLESS => 53,
  :FOR => 54,
  :IN => 55,
  :CASE => 56,
  :WHEN => 57,
  :BREAK => 58,
  :NEXT => 59,
  :REDO => 60,
  :Retry => 61,
  :RAISE => 62,
  :RETURN => 63,
  :YIELD => 64,
  "(" => 65,
  :XSTRING_BEG => 66,
  :XSTRING_END => 67,
  "$" => 68,
  :RUBYEXP => 69,
  :LBLACK_A => 70,
  "," => 71,
  :LBRACE_H => 72,
  ">" => 73,
  "<" => 74,
  :FID => 75,
  :REDIR_WORD => 76,
  :GREATER_GREATER => 77,
  :GREATER_BAR => 78,
  :LESS_GREATER => 79,
  :LESS_LESS => 80,
  :LESS_LESS_MINUS => 81,
  :LESS_LESS_LESS => 82,
  :LESS_AND => 83,
  :GREATER_AND => 84,
  "-" => 85,
  :AND_GREATER => 86,
  :AND_GREATER_GREATER => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "LPARLEN_ARG",
  "\")\"",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_command",
  "index_ref_command",
  "simple_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "@1",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@2",
  "@3",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@4",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@5",
  "@6",
  "if_head",
  "elsif_clause",
  "@7",
  "opt_terms",
  "@8",
  "for_arg",
  "lex_arg",
  "@9",
  "case_body",
  "@10",
  "cases",
  "@11",
  "@12",
  "trivial_command0",
  "array_element_list",
  "@13",
  "hash_element_list",
  "@14",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_6(val, _values, result)
    		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_28(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_31(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_34(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_35(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_36(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_37(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_39(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_42(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_43(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_45(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_51(val, _values, result)
    	       result = Node::SimpleCommand(val[0], val[1], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_52(val, _values, result)
      	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	    
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_54(val, _values, result)
    	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_55(val, _values, result)
    @lex.indent_push(:LPAREN_ARG)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_56(val, _values, result)
    	      result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_57(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_58(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_59(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_61(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_62(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 268)
  def _reduce_63(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 270)
  def _reduce_64(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_65(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 283)
  def _reduce_66(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_67(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_68(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_73(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_75(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_76(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_90(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_101(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_105(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_107(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_108(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 409)
  def _reduce_110(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_111(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_112(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_113(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_114(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_115(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 441)
  def _reduce_116(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 445)
  def _reduce_117(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 450)
  def _reduce_118(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 454)
  def _reduce_119(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 458)
  def _reduce_120(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 461)
  def _reduce_121(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 463)
  def _reduce_122(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_127(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_128(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 481)
  def _reduce_129(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 485)
  def _reduce_130(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 488)
  def _reduce_131(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 490)
  def _reduce_132(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 494)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 498)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 502)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.y', 508)
  def _reduce_138(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 513)
  def _reduce_140(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 515)
  def _reduce_141(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[10])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 520)
  def _reduce_142(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_143(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 529)
  def _reduce_144(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 531)
  def _reduce_145(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 536)
  def _reduce_146(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.y', 551)
  def _reduce_149(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 556)
  def _reduce_150(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 561)
  def _reduce_151(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_152(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 571)
  def _reduce_153(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_154(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 581)
  def _reduce_155(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 584)
  def _reduce_156(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_157(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 590)
  def _reduce_158(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_159(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 632)
  def _reduce_160(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 637)
  def _reduce_161(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 690)
  def _reduce_162(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 693)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_164(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 700)
  def _reduce_165(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 705)
  def _reduce_166(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 710)
  def _reduce_167(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 714)
  def _reduce_168(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 716)
  def _reduce_169(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 721)
  def _reduce_170(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 726)
  def _reduce_171(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 731)
  def _reduce_172(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 736)
  def _reduce_173(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 742)
  def _reduce_174(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_175(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 750)
  def _reduce_176(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 754)
  def _reduce_177(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 759)
  def _reduce_178(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 764)
  def _reduce_179(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 768)
  def _reduce_180(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 773)
  def _reduce_181(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 779)
  def _reduce_182(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_183(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 789)
  def _reduce_184(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 795)
  def _reduce_185(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 800)
  def _reduce_186(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 805)
  def _reduce_187(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_188(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.y', 817)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 822)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'parser.y', 861)
  def _reduce_221(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_222(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

module_eval(<<'.,.,', 'parser.y', 885)
  def _reduce_233(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 886)
  def _reduce_234(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 888)
  def _reduce_235(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 889)
  def _reduce_236(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 890)
  def _reduce_237(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 892)
  def _reduce_238(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
