#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 934)

  def initialize(lex)
    @yydebug = nil
    @test_cmpl = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :test_cmpl

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || @test_cmpl
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

	super unless @test_cmpl
	@test_cmpl = value_stack
	Reish::Fail ParserComplSupp
      end
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'124,125,238,133,238,237,141,237,238,341,326,237,143,133,404,332,128',
'115,333,122,143,133,343,124,125,352,46,47,48,49,50,51,56,218,340,301',
'304,220,304,128,115,219,304,133,328,334,329,330,133,46,47,48,49,50,51',
'56,348,75,76,312,77,78,79,133,80,101,102,103,104,105,106,107,108,109',
'110,111,112,133,113,114,75,76,159,77,78,79,136,80,101,102,103,104,105',
'106,107,108,109,110,111,112,133,113,114,128,115,124,125,238,95,96,237',
'85,86,46,47,48,49,50,51,56,89,90,91,92,122,295,128,115,93,87,88,124',
'125,83,84,133,46,47,48,49,50,51,56,133,75,76,133,77,78,79,133,80,101',
'102,103,104,105,106,107,108,109,110,111,112,133,113,114,75,76,133,77',
'78,79,324,80,101,102,103,104,105,106,107,108,109,110,111,112,-109,113',
'114,128,115,97,98,326,287,285,285,133,135,46,47,48,49,50,51,56,133,133',
'343,344,178,179,128,115,180,181,182,183,184,185,186,187,46,47,48,49',
'50,51,56,346,75,76,133,77,78,79,349,80,101,102,103,104,105,106,107,108',
'109,110,111,112,133,113,114,75,76,133,77,78,79,355,80,101,102,103,104',
'105,106,107,108,109,110,111,112,-109,113,114,128,115,97,98,357,133,133',
'367,133,133,46,47,48,49,50,51,56,133,377,378,379,188,189,128,115,190',
'191,192,193,194,195,196,197,46,47,48,49,50,51,56,380,75,76,133,77,78',
'79,133,80,101,102,103,104,105,106,107,108,109,110,111,112,133,113,114',
'75,76,133,77,78,79,133,80,101,102,103,104,105,106,107,108,109,110,111',
'112,133,113,114,128,115,133,326,133,393,133,133,133,133,46,47,48,49',
'50,51,56,89,90,91,92,133,228,128,115,93,87,88,133,235,133,133,133,46',
'47,48,49,50,51,56,412,75,76,133,77,78,79,133,80,101,102,103,104,105',
'106,107,108,109,110,111,112,133,113,114,75,76,133,77,78,79,133,80,101',
'102,103,104,105,106,107,108,109,110,111,112,416,113,114,128,115,133',
'81,295,133,133,428,429,133,46,47,48,49,50,51,56,89,90,91,92,432,,128',
'115,93,87,88,,,,,,46,47,48,49,50,51,56,,75,76,,77,78,79,,80,101,102',
'103,104,105,106,107,108,109,110,111,112,,113,114,75,76,,77,78,79,,80',
'101,102,103,104,105,106,107,108,109,110,111,112,,113,114,128,115,,,',
',,,,,46,47,48,49,50,51,56,-239,-239,-239,-239,,,176,115,93,87,88,,,',
',,46,47,48,49,50,51,56,,75,76,,77,78,79,,80,101,102,103,104,105,106',
'107,108,109,110,111,112,,113,114,75,76,,77,78,79,-106,80,,-109,,176',
'115,,97,98,,,,,283,46,47,48,49,50,51,56,,176,115,,,,,,,,,46,47,48,49',
'50,51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,281,77,78,79,,80,46,47,48,49,50,51,56,,,,,,205,75,76,,77,78,79',
',80,,,,,,,,,176,115,75,76,269,77,78,79,,80,46,47,48,49,50,51,56,89,90',
'91,92,,207,,,93,87,88,,,,,238,,7,237,,,3,4,,75,76,,77,78,79,,80,,31',
'32,33,34,46,47,48,49,50,51,56,271,60,,,,304,61,,62,64,,,65,66,,67,7',
'68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50',
'51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77',
'78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66',
',67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48',
'49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75',
'76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64',
',,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46',
'47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73',
'74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,',
'62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33',
'34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71',
'72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,',
',,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31',
'32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69',
'70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56',
',60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79',
',80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7',
'68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50',
'51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77',
'78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66',
',67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46,47,48',
'49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75',
'76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64',
',,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33,34,46',
'47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,7,68,69,70,71,72,73',
'74,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,',
'62,64,,,65,66,,67,7,68,69,70,71,72,73,74,75,76,,77,78,79,,80,31,32,33',
'34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,,68,69,70,71,72',
'73,74,75,76,395,77,78,79,,80,290,115,,,,,,,,,46,47,48,49,50,51,56,89',
'90,91,92,89,90,91,92,93,87,88,,93,87,88,238,,,237,,,,176,115,75,76,',
'77,78,79,,80,46,47,48,49,50,51,56,,176,115,,,,,,,,304,46,47,48,49,50',
'51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,176,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,290,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,361,176,115,75,76,,77,78',
'79,,80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49',
'50,51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,176,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,176,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,176,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,290,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,176,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,290,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,290,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,290,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,290,115,75,76,,77,78,79',
',80,46,47,48,49,50,51,56,,176,115,75,76,,77,78,79,,80,46,47,48,49,50',
'51,56,,,,,176,115,75,76,,77,78,79,,80,46,47,48,49,50,51,56,,176,115',
'75,76,,77,78,79,,80,46,47,48,49,50,51,56,,,,,,,75,76,,77,78,79,,80,',
',,,,,,,,,75,76,,77,78,79,,80,89,90,91,92,89,90,91,92,93,87,88,,93,87',
'88,332,,,333,332,,,333,,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61',
',62,64,334,,65,66,334,67,,,,,,,,,75,76,,,78,79,,80,31,32,33,34,46,47',
'48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,,,,,,,,,75,76,,77,78,79',
',80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,',
',,,,,,,75,76,,77,78,79,,80,31,32,33,34,46,47,48,49,50,51,56,,60,,,,',
'61,,62,64,,,65,66,,67,,,,,,,,,75,76,,,78,79,,80,31,32,33,34,46,47,48',
'49,50,51,56,,60,,,,,61,,62,64,,,65,66,,67,,,,,,,,,75,76,,,78,79,,80',
'101,102,103,104,105,106,107,108,109,110,111,112,,113,114,101,102,103',
'104,105,106,107,108,109,110,111,112,,113,114,-239,-239,-239,-239,-239',
'-239,-239,-239,93,87,88,,93,87,88,-239,-239,-239,-239,89,90,91,92,93',
'87,88,,93,87,88,89,90,91,92,89,90,91,92,93,87,88,,93,87,88,89,90,91',
'92,,,,,93,87,88' ]
        racc_action_table = arr = ::Array.new(2592, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'27,27,303,315,360,303,63,360,373,307,408,373,63,368,389,392,27,27,392',
'27,389,320,408,120,120,320,27,27,27,27,27,27,27,134,307,230,303,134',
'360,120,120,134,373,64,297,392,297,297,234,120,120,120,120,120,120,120',
'315,27,27,240,27,27,27,229,27,27,27,27,27,27,27,27,27,27,27,27,27,66',
'27,27,120,120,81,120,120,120,59,120,120,120,120,120,120,120,120,120',
'120,120,120,120,87,120,120,67,67,243,243,147,17,17,147,5,5,67,67,67',
'67,67,67,67,161,161,161,161,243,224,68,68,161,161,161,29,29,2,2,88,68',
'68,68,68,68,68,68,89,67,67,215,67,67,67,284,67,67,67,67,67,67,67,67',
'67,67,67,67,67,286,67,67,68,68,292,68,68,68,293,68,68,68,68,68,68,68',
'68,68,68,68,68,68,256,68,68,131,131,256,256,294,214,213,212,90,57,131',
'131,131,131,131,131,131,91,92,308,311,103,103,148,148,103,103,103,103',
'103,103,103,103,148,148,148,148,148,148,148,314,131,131,30,131,131,131',
'316,131,131,131,131,131,131,131,131,131,131,131,131,131,318,131,131',
'148,148,95,148,148,148,323,148,148,148,148,148,148,148,148,148,148,148',
'148,148,241,148,148,69,69,241,241,325,326,96,336,339,97,69,69,69,69',
'69,69,69,348,350,351,353,104,104,371,371,104,104,104,104,104,104,104',
'104,371,371,371,371,371,371,371,354,69,69,357,69,69,69,98,69,69,69,69',
'69,69,69,69,69,69,69,69,69,362,69,69,371,371,363,371,371,371,364,371',
'371,371,371,371,371,371,371,371,371,371,371,371,65,371,371,343,343,369',
'370,135,372,136,137,383,138,343,343,343,343,343,343,343,232,232,232',
'232,139,140,72,72,232,232,232,143,146,394,396,397,72,72,72,72,72,72',
'72,398,343,343,154,343,343,343,155,343,343,343,343,343,343,343,343,343',
'343,343,343,343,157,343,343,72,72,402,72,72,72,403,72,72,72,72,72,72',
'72,72,72,72,72,72,72,406,72,72,73,73,158,1,411,415,421,423,424,426,73',
'73,73,73,73,73,73,160,160,160,160,431,,74,74,160,160,160,,,,,,74,74',
'74,74,74,74,74,,73,73,,73,73,73,,73,73,73,73,73,73,73,73,73,73,73,73',
'73,,73,73,74,74,,74,74,74,,74,74,74,74,74,74,74,74,74,74,74,74,74,,74',
'74,93,93,,,,,,,,,93,93,93,93,93,93,93,251,251,251,251,,,197,197,251',
'251,251,,,,,,197,197,197,197,197,197,197,,93,93,,93,93,93,,93,93,93',
'93,93,93,93,93,93,93,93,93,93,,93,93,197,197,,197,197,197,20,197,,20',
',196,196,,20,20,,,,,197,196,196,196,196,196,196,196,,111,111,,,,,,,',
',111,111,111,111,111,111,111,,,,,186,186,196,196,,196,196,196,,196,186',
'186,186,186,186,186,186,,112,112,111,111,196,111,111,111,,111,112,112',
'112,112,112,112,112,,,,,,111,186,186,,186,186,186,,186,,,,,,,,,187,187',
'112,112,186,112,112,112,,112,187,187,187,187,187,187,187,233,233,233',
'233,,112,,,233,233,233,,,,,233,,0,233,,,0,0,,187,187,,187,187,187,,187',
',0,0,0,0,0,0,0,0,0,0,0,187,0,,,,233,0,,0,0,,,0,0,,0,227,0,0,0,0,0,0',
'0,0,0,,0,0,0,,0,227,227,227,227,227,227,227,227,227,227,227,,227,,,',
',227,,227,227,,,227,227,,227,231,227,227,227,227,227,227,227,227,227',
',227,227,227,,227,231,231,231,231,231,231,231,231,231,231,231,,231,',
',,,231,,231,231,,,231,231,,231,164,231,231,231,231,231,231,231,231,231',
',231,231,231,,231,164,164,164,164,164,164,164,164,164,164,164,,164,',
',,,164,,164,164,,,164,164,,164,165,164,164,164,164,164,164,164,164,164',
',164,164,164,,164,165,165,165,165,165,165,165,165,165,165,165,,165,',
',,,165,,165,165,,,165,165,,165,226,165,165,165,165,165,165,165,165,165',
',165,165,165,,165,226,226,226,226,226,226,226,226,226,226,226,,226,',
',,,226,,226,226,,,226,226,,226,85,226,226,226,226,226,226,226,226,226',
',226,226,226,,226,85,85,85,85,85,85,85,85,85,85,85,,85,,,,,85,,85,85',
',,85,85,,85,86,85,85,85,85,85,85,85,85,85,,85,85,85,,85,86,86,86,86',
'86,86,86,86,86,86,86,,86,,,,,86,,86,86,,,86,86,,86,225,86,86,86,86,86',
'86,86,86,86,,86,86,86,,86,225,225,225,225,225,225,225,225,225,225,225',
',225,,,,,225,,225,225,,,225,225,,225,166,225,225,225,225,225,225,225',
'225,225,,225,225,225,,225,166,166,166,166,166,166,166,166,166,166,166',
',166,,,,,166,,166,166,,,166,166,,166,167,166,166,166,166,166,166,166',
'166,166,,166,166,166,,166,167,167,167,167,167,167,167,167,167,167,167',
',167,,,,,167,,167,167,,,167,167,,167,145,167,167,167,167,167,167,167',
'167,167,,167,167,167,,167,145,145,145,145,145,145,145,145,145,145,145',
',145,,,,,145,,145,145,,,145,145,,145,144,145,145,145,145,145,145,145',
'145,145,,145,145,145,,145,144,144,144,144,144,144,144,144,144,144,144',
',144,,,,,144,,144,144,,,144,144,,144,386,144,144,144,144,144,144,144',
'144,144,,144,144,144,,144,386,386,386,386,386,386,386,386,386,386,386',
',386,,,,,386,,386,386,,,386,386,,386,385,386,386,386,386,386,386,386',
'386,386,,386,386,386,,386,385,385,385,385,385,385,385,385,385,385,385',
',385,,,,,385,,385,385,,,385,385,,385,384,385,385,385,385,385,385,385',
'385,385,,385,385,385,,385,384,384,384,384,384,384,384,384,384,384,384',
',384,,,,,384,,384,384,,,384,384,,384,7,384,384,384,384,384,384,384,384',
'384,,384,384,384,,384,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,7,,7,7,,,7,7,,7,162',
'7,7,7,7,7,7,7,7,7,,7,7,7,,7,162,162,162,162,162,162,162,162,162,162',
'162,,162,,,,,162,,162,162,,,162,162,,162,163,162,162,162,162,162,162',
'162,162,162,,162,162,162,,162,163,163,163,163,163,163,163,163,163,163',
'163,,163,,,,,163,,163,163,,,163,163,,163,,163,163,163,163,163,163,163',
'163,163,377,163,163,163,,163,377,377,,,,,,,,,377,377,377,377,377,377',
'377,302,302,302,302,6,6,6,6,302,302,302,,6,6,6,302,,,302,,,,190,190',
'377,377,,377,377,377,,377,190,190,190,190,190,190,190,,105,105,,,,,',
',,302,105,105,105,105,105,105,105,,,,,106,106,190,190,,190,190,190,',
'190,106,106,106,106,106,106,106,,107,107,105,105,,105,105,105,,105,107',
'107,107,107,107,107,107,,,,,191,191,106,106,,106,106,106,,106,191,191',
'191,191,191,191,191,,109,109,107,107,,107,107,107,,107,109,109,109,109',
'109,109,109,,,,,110,110,191,191,,191,191,191,,191,110,110,110,110,110',
'110,110,,327,327,109,109,,109,109,109,,109,327,327,327,327,327,327,327',
',,,327,189,189,110,110,,110,110,110,,110,189,189,189,189,189,189,189',
',113,113,327,327,,327,327,327,,327,113,113,113,113,113,113,113,,,,,114',
'114,189,189,,189,189,189,,189,114,114,114,114,114,114,114,,193,193,113',
'113,,113,113,113,,113,193,193,193,193,193,193,193,,,,,194,194,114,114',
',114,114,114,,114,194,194,194,194,194,194,194,,188,188,193,193,,193',
'193,193,,193,188,188,188,188,188,188,188,,,,,195,195,194,194,,194,194',
'194,,194,195,195,195,195,195,195,195,,185,185,188,188,,188,188,188,',
'188,185,185,185,185,185,185,185,,,,,184,184,195,195,,195,195,195,,195',
'184,184,184,184,184,184,184,,183,183,185,185,,185,185,185,,185,183,183',
'183,183,183,183,183,,,,,182,182,184,184,,184,184,184,,184,182,182,182',
'182,182,182,182,,181,181,183,183,,183,183,183,,183,181,181,181,181,181',
'181,181,,,,,180,180,182,182,,182,182,182,,182,180,180,180,180,180,180',
'180,,102,102,181,181,,181,181,181,,181,102,102,102,102,102,102,102,',
',,,247,247,180,180,,180,180,180,,180,247,247,247,247,247,247,247,,179',
'179,102,102,,102,102,102,,102,179,179,179,179,179,179,179,,,,,178,178',
'247,247,,247,247,247,,247,178,178,178,178,178,178,178,,409,409,179,179',
',179,179,179,,179,409,409,409,409,409,409,409,,,,,221,221,178,178,,178',
'178,178,,178,221,221,221,221,221,221,221,,222,222,409,409,,409,409,409',
',409,222,222,222,222,222,222,222,,,,,245,245,221,221,,221,221,221,,221',
'245,245,245,245,245,245,245,,101,101,222,222,,222,222,222,,222,101,101',
'101,101,101,101,101,,,,,108,108,245,245,,245,245,245,,245,108,108,108',
'108,108,108,108,,192,192,101,101,,101,101,101,,101,192,192,192,192,192',
'192,192,,,,,,,108,108,,108,108,108,,108,,,,,,,,,,,192,192,,192,192,192',
',192,299,299,299,299,298,298,298,298,299,299,299,,298,298,298,299,,',
'299,298,,,298,,172,172,172,172,172,172,172,172,172,172,172,,172,,,,',
'172,,172,172,299,,172,172,298,172,,,,,,,,,172,172,,,172,172,,172,170',
'170,170,170,170,170,170,170,170,170,170,,170,,,,,170,,170,170,,,170',
'170,,170,,,,,,,,,170,170,,170,170,170,,170,169,169,169,169,169,169,169',
'169,169,169,169,,169,,,,,169,,169,169,,,169,169,,169,,,,,,,,,169,169',
',169,169,169,,169,171,171,171,171,171,171,171,171,171,171,171,,171,',
',,,171,,171,171,,,171,171,,171,,,,,,,,,171,171,,,171,171,,171,156,156',
'156,156,156,156,156,156,156,156,156,,156,,,,,156,,156,156,,,156,156',
',156,,,,,,,,,156,156,,,156,156,,156,25,25,25,25,25,25,25,25,25,25,25',
'25,,25,25,99,99,99,99,99,99,99,99,99,99,99,99,,99,99,252,252,252,252',
'253,253,253,253,252,252,252,,253,253,253,254,254,254,254,296,296,296',
'296,254,254,254,,296,296,296,399,399,399,399,400,400,400,400,399,399',
'399,,400,400,400,401,401,401,401,,,,,401,401,401' ]
        racc_action_check = arr = ::Array.new(2592, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   729,   454,   115,   nil,   nil,    91,  1594,  1417,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,   nil,
   601,   nil,   nil,   nil,   nil,  2433,   nil,    -8,   nil,   123,
   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   192,   nil,    76,
   nil,   nil,   nil,   -39,    25,   343,    59,    79,   102,   253,
   nil,   nil,   363,   427,   450,   nil,   nil,   nil,   nil,   nil,
   nil,    82,   nil,   nil,   nil,   987,  1030,    82,   117,   125,
   180,   189,   190,   514,   nil,   238,   265,   268,   306,  2448,
   nil,  2155,  1999,   138,   225,  1609,  1630,  1648,  2176,  1687,
  1708,   607,   646,  1765,  1786,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   166,   nil,   nil,     3,   350,   352,   353,   355,   367,
   358,   nil,   nil,   374,  1245,  1202,   363,    89,   189,   nil,
   nil,   nil,   nil,   nil,   389,   393,  2433,   407,   435,   nil,
   465,   117,  1460,  1503,   858,   901,  1116,  1159,   nil,  2347,
  2304,  2390,  2261,   nil,   nil,   nil,   nil,   nil,  2059,  2038,
  1981,  1960,  1942,  1921,  1903,  1882,   628,   685,  1843,  1747,
  1591,  1669,  2194,  1804,  1825,  1864,   589,   537,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   175,   174,   169,   128,   nil,   nil,   nil,   nil,
   nil,  2098,  2116,   nil,    82,  1073,   944,   772,   nil,    45,
     7,   815,   378,   723,    30,   nil,   nil,   nil,   nil,   nil,
    -8,   264,   nil,    97,   nil,  2137,   nil,  2020,   nil,   nil,
   nil,   552,  2533,  2537,  2548,   nil,   177,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   132,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   151,   145,   149,   nil,  2552,    26,  2268,  2264,
   nil,   nil,  1590,   -16,   nil,   nil,   nil,   -21,   152,   nil,
   nil,   184,   nil,   nil,   189,   -15,   208,   nil,   233,   nil,
     3,   nil,   nil,   219,   nil,   235,   264,  1726,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   256,   nil,   nil,   267,
   nil,   nil,   nil,   340,   nil,   nil,   nil,   nil,   276,   nil,
   251,   268,   nil,   267,   288,   nil,   nil,   302,   nil,   nil,
   -14,   nil,   320,   325,   329,   nil,   nil,   nil,    -5,   348,
   322,   276,   341,   -10,   nil,   nil,   nil,  1552,   nil,   nil,
   nil,   nil,   nil,   354,  1374,  1331,  1288,   nil,   nil,   -31,
   nil,   nil,    -3,   nil,   376,   nil,   377,   378,   374,  2563,
  2567,  2578,   412,   416,   nil,   nil,   420,   nil,   -35,  2077,
   nil,   412,   nil,   nil,   nil,   438,   nil,   nil,   nil,   nil,
   nil,   439,   nil,   430,   431,   nil,   442,   nil,   nil,   nil,
   nil,   444,   nil ]

racc_action_default = [
  -239,  -239,  -239,    -2,    -3,    -4,    -7,  -239,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,
   -32,   -33,   -36,   -37,   -38,   -41,   -40,   -59,   -53,   -59,
  -231,   -69,   -70,   -71,   -72,   -80,   -81,   -82,   -83,   -84,
   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,
   -95,   -96,   -97,   -98,   -99,  -100,  -235,  -239,  -107,  -239,
  -110,  -233,  -233,  -238,  -231,  -231,  -231,  -239,   -73,   -73,
  -151,  -152,   -73,   -73,   -73,  -156,  -158,  -235,  -162,  -163,
  -168,  -239,    -1,  -225,  -226,    -5,    -6,  -231,  -231,  -231,
  -231,  -231,  -231,   -73,   -17,  -231,  -231,  -231,  -231,   -39,
  -183,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,   -46,   -47,   -48,   -49,   -50,
   -59,   -52,   -56,   -60,   -61,   -63,   -75,   -77,   -78,   -79,
   -54,  -238,   -57,  -235,  -239,  -231,  -231,  -231,  -231,  -231,
  -239,  -235,  -238,  -231,  -239,  -239,  -239,  -239,   -74,  -149,
  -150,  -153,  -154,  -155,  -231,  -231,  -239,  -231,  -231,   433,
    -8,    -9,  -239,  -239,  -239,  -239,  -239,  -239,   -16,  -239,
  -239,  -239,  -239,  -184,  -185,  -223,  -224,  -186,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -191,  -194,
  -197,  -200,  -203,  -206,  -209,  -218,  -212,  -215,  -221,  -222,
   -51,   -76,   -65,   -65,  -239,  -231,  -232,  -101,  -102,  -103,
  -104,  -239,  -239,  -238,  -113,  -174,  -239,  -239,  -128,  -231,
  -239,  -239,  -131,  -239,  -231,  -142,  -144,  -235,  -235,  -238,
  -239,  -161,   -41,   -59,  -236,  -238,  -165,  -238,  -170,   -10,
   -11,   -12,   -13,   -14,   -15,   -28,   -32,   -29,   -34,   -35,
  -187,  -188,  -192,  -195,  -198,  -201,  -204,  -207,  -210,  -219,
  -213,  -216,  -189,  -190,  -193,  -196,  -199,  -202,  -205,  -208,
  -211,  -220,  -214,  -217,  -231,   -67,  -231,  -237,   -58,   -44,
   -45,  -105,  -231,  -239,  -117,   -42,  -179,  -175,  -239,  -239,
  -238,  -130,  -239,  -239,  -136,  -137,  -138,  -239,  -239,  -229,
  -230,  -239,  -238,  -160,  -239,  -231,  -239,  -171,  -231,  -238,
  -231,  -238,   -55,  -239,  -111,  -119,  -231,  -115,  -235,  -235,
  -235,  -121,  -123,  -124,  -125,  -126,  -239,  -235,  -235,  -231,
  -236,  -143,  -238,   -73,  -236,  -236,  -164,  -166,  -231,  -169,
  -239,  -239,   -66,  -239,  -239,  -108,  -112,  -231,  -118,   -43,
  -239,  -235,  -231,  -231,  -231,  -234,  -234,  -129,  -231,  -231,
  -117,  -239,  -239,  -239,  -157,  -159,  -167,  -239,   -62,   -68,
   -64,  -120,  -235,  -231,  -176,  -177,  -178,  -235,  -235,  -133,
  -132,  -238,  -239,  -145,  -231,  -236,  -231,  -231,  -239,  -180,
  -181,  -182,  -231,  -231,  -235,  -135,  -239,  -140,  -117,  -239,
  -173,  -113,  -116,  -238,  -238,  -231,  -139,  -235,  -146,  -147,
  -148,  -231,  -114,  -239,  -239,  -134,  -231,  -172,  -122,  -127,
  -238,  -239,  -141 ]

racc_goto_table = [
   132,    43,   313,   142,   294,   325,   149,   150,    43,   306,
   151,   152,   153,   130,   342,   100,   331,   335,   147,   241,
   387,   388,   339,   243,   213,   242,   258,   259,   291,   292,
    44,   168,   256,   256,   144,   145,   146,    44,   243,   243,
   242,   242,   284,   286,     6,   255,   257,   138,   139,   217,
   223,    94,   315,   137,   318,   212,   322,   162,   163,   164,
   165,   166,   167,   356,   360,   169,   170,   171,   172,   131,
   120,   211,   327,    45,    99,   365,   366,     5,   337,   338,
    45,   391,   215,   303,   236,   320,    43,    43,   234,   173,
    82,   417,     2,   308,   418,   154,   155,   244,   371,   211,
   245,   157,   374,   375,   210,   221,   222,   247,   226,   227,
   407,   158,   317,   231,   420,    44,    44,   297,     1,   419,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,   248,   160,
   161,   nil,   nil,   nil,   359,   nil,   382,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    43,   nil,   nil,   394,
   nil,   nil,   nil,   409,   nil,   nil,   nil,    43,    45,    45,
   nil,   nil,   nil,    43,    43,    43,    43,    43,    43,   nil,
    43,    43,    43,    43,    44,    44,   nil,   nil,   nil,   nil,
    21,   nil,   134,   nil,   396,   288,    44,    21,   232,   233,
   nil,   422,    44,    44,    44,    44,    44,    44,   nil,    44,
    44,    44,    44,   156,   307,   nil,   249,   250,   251,   252,
   253,   254,   nil,   nil,   nil,   nil,   421,    45,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    43,    43,    45,
   nil,   nil,    43,   nil,   nil,    45,    45,    45,    45,    45,
    45,   nil,    45,    45,    45,    45,   nil,   nil,   nil,   140,
   nil,   nil,   nil,   nil,   nil,    44,    44,    44,   nil,   216,
   nil,    44,   323,   nil,   nil,    21,    21,   229,   nil,   296,
   298,   299,   nil,   nil,   127,   302,   nil,   nil,   nil,   nil,
   nil,   373,   nil,   nil,   nil,   347,   nil,   nil,   350,   224,
   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    45,
    45,   nil,   nil,   nil,    45,   nil,   239,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   127,   127,   127,   214,   376,   127,
   127,   127,   392,   nil,    21,    21,   nil,   nil,   230,   405,
   nil,   nil,   384,   385,   386,   nil,   nil,   nil,   nil,   nil,
   127,   nil,    21,    21,    21,    21,    21,    21,   nil,    21,
    21,   nil,   nil,   398,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   309,   310,   nil,   410,   127,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   300,   nil,   nil,   nil,    43,    43,    43,   nil,   nil,
   nil,   427,   nil,   nil,   nil,   127,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    21,    21,   nil,   293,
   nil,    21,   nil,   nil,    44,    44,    44,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   311,   nil,   nil,   399,   400,
   401,   314,   nil,   316,   nil,   nil,   319,   nil,   321,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   362,   363,   364,    45,    45,    45,
   nil,   nil,   nil,   368,   369,   nil,   nil,   nil,   289,   289,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   358,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   336,   383,   nil,   nil,
   nil,   370,   289,   nil,   289,   nil,   nil,   nil,   345,   nil,
   nil,   nil,   nil,   nil,   nil,   351,   nil,   354,   397,   381,
   nil,   nil,   nil,   402,   403,   nil,   nil,   nil,   nil,   nil,
   389,   390,   nil,   nil,   nil,   nil,   nil,   nil,   372,   nil,
   415,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   426,   nil,   nil,   408,   nil,   nil,   411,
   nil,   nil,   nil,   nil,   413,   414,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    21,    21,   425,   nil,   nil,
   nil,   nil,   nil,   nil,   289,   nil,   nil,   406,   430,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   127,   nil,   nil,   nil,   nil,   nil,   nil,   174,   177,   423,
   424,   198,   199,   200,   201,   202,   203,   204,   206,   208,
   209,   nil,   nil,   nil,   nil,   nil,   431,   nil,   127,   nil,
   nil,   nil,   nil,   nil,   289,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   289,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   270,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   282 ]

racc_goto_check = [
     6,    31,    86,    81,    70,    71,     7,     7,    31,    74,
     7,     7,     7,    36,    88,    50,    76,    76,    43,    20,
    77,    77,    84,    34,    48,    25,    22,    22,    29,    29,
    32,     7,    20,    20,     6,     6,     6,    32,    34,    34,
    25,    25,    45,    45,     5,    18,    18,    75,    75,    64,
    68,     5,    29,    69,    29,    47,    42,     6,     6,     6,
     6,     6,     6,    72,    73,     6,     6,     6,     6,    40,
    35,    43,    28,    33,    26,    78,    79,     4,    74,    74,
    33,    71,    43,    82,    83,    49,    31,    31,    85,    50,
     3,    87,     2,    89,    90,    91,    92,    93,    86,    43,
    94,    95,    86,    86,    36,     6,     6,    96,     6,     6,
    76,    97,    98,     6,    88,    32,    32,    99,     1,    71,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,     6,     5,
     5,   nil,   nil,   nil,    29,   nil,    74,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,    31,   nil,   nil,    74,
   nil,   nil,   nil,    86,   nil,   nil,   nil,    31,    33,    33,
   nil,   nil,   nil,    31,    31,    31,    31,    31,    31,   nil,
    31,    31,    31,    31,    32,    32,   nil,   nil,   nil,   nil,
    21,   nil,    63,   nil,    29,     6,    32,    21,     5,     5,
   nil,    70,    32,    32,    32,    32,    32,    32,   nil,    32,
    32,    32,    32,    63,     6,   nil,     5,     5,     5,     5,
     5,     5,   nil,   nil,   nil,   nil,    29,    33,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,    31,    31,    33,
   nil,   nil,    31,   nil,   nil,    33,    33,    33,    33,    33,
    33,   nil,    33,    33,    33,    33,   nil,   nil,   nil,    41,
   nil,   nil,   nil,   nil,   nil,    32,    32,    32,   nil,    63,
   nil,    32,     6,   nil,   nil,    21,    21,    63,   nil,     5,
     5,     5,   nil,   nil,    30,     5,   nil,   nil,   nil,   nil,
   nil,     7,   nil,   nil,   nil,     6,   nil,   nil,     6,    46,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,    33,
    33,   nil,   nil,   nil,    33,   nil,    46,    46,   nil,   nil,
   nil,   nil,   nil,   nil,    30,    30,    30,    41,     6,    30,
    30,    30,    43,   nil,    21,    21,   nil,   nil,    41,    81,
   nil,   nil,     6,     6,     6,   nil,   nil,   nil,   nil,   nil,
    30,   nil,    21,    21,    21,    21,    21,    21,   nil,    21,
    21,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    63,    63,   nil,     6,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,    46,   nil,   nil,   nil,    31,    31,    31,   nil,   nil,
   nil,     6,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    21,    21,   nil,    41,
   nil,    21,   nil,   nil,    32,    32,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,     5,     5,
     5,    41,   nil,    41,   nil,   nil,    46,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    63,    63,    63,    33,    33,    33,
   nil,   nil,   nil,    63,    63,   nil,   nil,   nil,    30,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,    63,   nil,   nil,
   nil,    46,    30,   nil,    30,   nil,   nil,   nil,    41,   nil,
   nil,   nil,   nil,   nil,   nil,    41,   nil,    41,    63,    46,
   nil,   nil,   nil,    63,    63,   nil,   nil,   nil,   nil,   nil,
    46,    46,   nil,   nil,   nil,   nil,   nil,   nil,    41,   nil,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    63,   nil,   nil,    46,   nil,   nil,    46,
   nil,   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    21,    21,    46,   nil,   nil,
   nil,   nil,   nil,   nil,    30,   nil,   nil,    41,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    30,   nil,   nil,   nil,   nil,   nil,   nil,   100,   100,    41,
    41,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   nil,   nil,   nil,   nil,   nil,    41,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100 ]

racc_goto_pointer = [
   nil,   118,    92,    88,    77,    44,   -30,   -62,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -124,   nil,
  -137,   180,  -145,   nil,   nil,  -131,    49,   nil,  -223,  -193,
   247,     1,    30,    73,  -133,    43,   -16,   nil,   nil,   nil,
    39,   186,  -231,   -49,   nil,  -170,   152,   -69,  -101,  -200,
   -10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   126,   -85,   nil,   nil,   nil,   -87,    -7,
  -220,  -289,  -262,  -263,  -224,   -14,  -282,  -345,  -256,  -259,
   nil,   -60,  -149,   -63,  -284,   -58,  -242,  -316,  -294,  -143,
  -314,    20,    20,   -59,   -57,    22,   -51,    31,  -135,  -108,
   496,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   118,    22,    23,    24,    25,   nil,    26,   nil,   nil,
   175,   116,   117,   119,    27,   148,   121,    28,    29,    30,
   nil,   nil,   nil,   126,   123,   nil,   nil,   nil,   nil,   nil,
   129,    35,    36,    37,    38,    39,    40,    41,    42,    52,
    53,    54,    55,   nil,   nil,    57,    58,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    63,   nil,   nil,   305,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 89, :_reduce_2,
  1, 89, :_reduce_3,
  1, 90, :_reduce_none,
  2, 90, :_reduce_5,
  2, 90, :_reduce_6,
  1, 92, :_reduce_7,
  3, 92, :_reduce_8,
  3, 92, :_reduce_9,
  4, 93, :_reduce_10,
  4, 93, :_reduce_11,
  4, 93, :_reduce_12,
  4, 93, :_reduce_13,
  4, 93, :_reduce_14,
  4, 93, :_reduce_15,
  3, 93, :_reduce_16,
  2, 93, :_reduce_17,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 96, :_reduce_none,
  4, 105, :_reduce_28,
  4, 105, :_reduce_29,
  1, 105, :_reduce_none,
  1, 106, :_reduce_31,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  4, 108, :_reduce_34,
  4, 108, :_reduce_35,
  1, 108, :_reduce_36,
  1, 108, :_reduce_37,
  1, 107, :_reduce_none,
  2, 107, :_reduce_39,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  0, 116, :_reduce_42,
  2, 116, :_reduce_43,
  1, 117, :_reduce_none,
  1, 117, :_reduce_45,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 112, :_reduce_51,
  2, 115, :_reduce_52,
  1, 115, :_reduce_none,
  2, 125, :_reduce_54,
  5, 126, :_reduce_55,
  2, 127, :_reduce_56,
  1, 128, :_reduce_57,
  3, 128, :_reduce_58,
  0, 124, :_reduce_59,
  1, 124, :_reduce_none,
  0, 135, :_reduce_61,
  6, 132, :_reduce_62,
  0, 136, :_reduce_63,
  6, 132, :_reduce_64,
  0, 133, :_reduce_65,
  3, 133, :_reduce_66,
  0, 137, :_reduce_67,
  3, 137, :_reduce_68,
  1, 122, :_reduce_69,
  1, 122, :_reduce_70,
  1, 122, :_reduce_71,
  1, 122, :_reduce_72,
  0, 95, :_reduce_73,
  1, 95, :_reduce_none,
  1, 123, :_reduce_75,
  2, 123, :_reduce_76,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 139, :_reduce_90,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 149, :_reduce_101,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  4, 104, :_reduce_105,
  1, 153, :_reduce_none,
  1, 111, :_reduce_107,
  6, 154, :_reduce_108,
  1, 155, :_reduce_none,
  0, 157, :_reduce_110,
  5, 144, :_reduce_111,
  4, 156, :_reduce_112,
  0, 158, :_reduce_113,
  7, 158, :_reduce_114,
  0, 161, :_reduce_115,
  4, 161, :_reduce_116,
  0, 159, :_reduce_117,
  2, 159, :_reduce_118,
  0, 160, :_reduce_119,
  2, 160, :_reduce_120,
  0, 166, :_reduce_121,
  11, 142, :_reduce_122,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 167, :_reduce_126,
  11, 143, :_reduce_127,
  3, 140, :_reduce_128,
  6, 140, :_reduce_129,
  4, 140, :_reduce_130,
  0, 170, :_reduce_131,
  7, 168, :_reduce_132,
  6, 169, :_reduce_133,
  9, 169, :_reduce_134,
  7, 169, :_reduce_135,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  0, 172, :_reduce_138,
  9, 141, :_reduce_139,
  0, 175, :_reduce_140,
  13, 146, :_reduce_141,
  1, 173, :_reduce_142,
  3, 173, :_reduce_143,
  0, 177, :_reduce_144,
  7, 145, :_reduce_145,
  5, 176, :_reduce_146,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 97, :_reduce_149,
  2, 98, :_reduce_150,
  1, 99, :_reduce_151,
  1, 100, :_reduce_152,
  2, 101, :_reduce_153,
  2, 102, :_reduce_154,
  2, 103, :_reduce_155,
  0, 179, :_reduce_156,
  6, 119, :_reduce_157,
  0, 180, :_reduce_158,
  6, 120, :_reduce_159,
  4, 109, :_reduce_160,
  1, 181, :_reduce_161,
  1, 150, :_reduce_162,
  0, 183, :_reduce_163,
  5, 147, :_reduce_164,
  1, 182, :_reduce_165,
  3, 182, :_reduce_166,
  4, 182, :_reduce_167,
  0, 185, :_reduce_168,
  5, 148, :_reduce_169,
  1, 184, :_reduce_170,
  2, 184, :_reduce_171,
  7, 186, :_reduce_172,
  5, 186, :_reduce_173,
  1, 134, :_reduce_174,
  2, 134, :_reduce_175,
  5, 134, :_reduce_176,
  5, 134, :_reduce_177,
  5, 134, :_reduce_178,
  1, 187, :_reduce_179,
  5, 187, :_reduce_180,
  5, 187, :_reduce_181,
  5, 187, :_reduce_182,
  1, 114, :_reduce_183,
  2, 114, :_reduce_184,
  2, 138, :_reduce_185,
  2, 138, :_reduce_186,
  3, 138, :_reduce_187,
  3, 138, :_reduce_188,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_191,
  3, 138, :_reduce_192,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 138, :_reduce_221,
  2, 138, :_reduce_222,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 171, :_reduce_none,
  2, 171, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_none,
  0, 163, :_reduce_233,
  0, 165, :_reduce_234,
  0, 151, :_reduce_235,
  0, 174, :_reduce_236,
  0, 130, :_reduce_237,
  0, 129, :_reduce_238 ]

racc_reduce_n = 239

racc_shift_n = 433

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :BEGIN => 42,
  :RESCUE => 43,
  :ASSOC => 44,
  :ELSE => 45,
  :ENSURE => 46,
  :WHILE => 47,
  :DO_COND => 48,
  :UNTIL => 49,
  :IF => 50,
  :ELSIF => 51,
  :THEN => 52,
  :UNLESS => 53,
  :FOR => 54,
  :IN => 55,
  :CASE => 56,
  :WHEN => 57,
  :BREAK => 58,
  :NEXT => 59,
  :REDO => 60,
  :Retry => 61,
  :RAISE => 62,
  :RETURN => 63,
  :YIELD => 64,
  "(" => 65,
  :XSTRING_BEG => 66,
  :XSTRING_END => 67,
  "$" => 68,
  :RUBYEXP => 69,
  :LBLACK_A => 70,
  "," => 71,
  :LBRACE_H => 72,
  ">" => 73,
  "<" => 74,
  :FID => 75,
  :REDIR_WORD => 76,
  :GREATER_GREATER => 77,
  :GREATER_BAR => 78,
  :LESS_GREATER => 79,
  :LESS_LESS => 80,
  :LESS_LESS_MINUS => 81,
  :LESS_LESS_LESS => 82,
  :LESS_AND => 83,
  :GREATER_AND => 84,
  "-" => 85,
  :AND_GREATER => 86,
  :AND_GREATER_GREATER => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_command",
  "index_ref_command",
  "simple_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@3",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@4",
  "@5",
  "if_head",
  "elsif_clause",
  "@6",
  "opt_terms",
  "@7",
  "for_arg",
  "lex_arg",
  "@8",
  "case_body",
  "@9",
  "cases",
  "@10",
  "@11",
  "trivial_command0",
  "array_element_list",
  "@12",
  "hash_element_list",
  "@13",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_6(val, _values, result)
    		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_28(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_31(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_34(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_35(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_36(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_37(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_39(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_42(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_43(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_45(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_51(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_52(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_54(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 245)
  def _reduce_55(val, _values, result)
    	       result = val[0]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_56(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
      	       result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_57(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_58(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 275)
  def _reduce_59(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_61(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_62(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_63(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_64(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 298)
  def _reduce_65(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_66(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_67(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_68(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_69(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_70(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_71(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_72(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_73(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_75(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_76(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_90(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_101(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_105(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_107(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_108(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 440)
  def _reduce_110(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 442)
  def _reduce_111(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 448)
  def _reduce_112(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 453)
  def _reduce_113(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 457)
  def _reduce_114(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 468)
  def _reduce_115(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_116(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 476)
  def _reduce_117(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 481)
  def _reduce_118(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 485)
  def _reduce_119(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 489)
  def _reduce_120(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 492)
  def _reduce_121(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 494)
  def _reduce_122(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 503)
  def _reduce_127(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 508)
  def _reduce_128(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 512)
  def _reduce_129(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 516)
  def _reduce_130(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 519)
  def _reduce_131(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_132(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 529)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 533)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.y', 539)
  def _reduce_138(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 541)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 544)
  def _reduce_140(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 546)
  def _reduce_141(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[10])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 551)
  def _reduce_142(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 556)
  def _reduce_143(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 560)
  def _reduce_144(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 562)
  def _reduce_145(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 567)
  def _reduce_146(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.y', 582)
  def _reduce_149(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_150(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_151(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 597)
  def _reduce_152(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 602)
  def _reduce_153(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 607)
  def _reduce_154(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 612)
  def _reduce_155(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_156(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 618)
  def _reduce_157(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 621)
  def _reduce_158(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 623)
  def _reduce_159(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 663)
  def _reduce_160(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 668)
  def _reduce_161(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 721)
  def _reduce_162(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 724)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 726)
  def _reduce_164(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 731)
  def _reduce_165(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 736)
  def _reduce_166(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 741)
  def _reduce_167(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 745)
  def _reduce_168(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 747)
  def _reduce_169(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 752)
  def _reduce_170(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 757)
  def _reduce_171(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 762)
  def _reduce_172(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 767)
  def _reduce_173(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 773)
  def _reduce_174(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 777)
  def _reduce_175(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 781)
  def _reduce_176(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_177(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 790)
  def _reduce_178(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 795)
  def _reduce_179(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 799)
  def _reduce_180(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 804)
  def _reduce_181(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_182(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 816)
  def _reduce_183(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 820)
  def _reduce_184(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 826)
  def _reduce_185(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 831)
  def _reduce_186(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 836)
  def _reduce_187(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 841)
  def _reduce_188(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.y', 848)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 853)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'parser.y', 892)
  def _reduce_221(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 897)
  def _reduce_222(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

module_eval(<<'.,.,', 'parser.y', 916)
  def _reduce_233(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 917)
  def _reduce_234(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 919)
  def _reduce_235(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 920)
  def _reduce_236(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 921)
  def _reduce_237(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 923)
  def _reduce_238(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
