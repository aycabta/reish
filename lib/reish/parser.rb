#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 962)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

      end
      super unless @cmpl_mode

      @cmpl_mode = value_stack
      Reish::Fail ParserComplSupp
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'127,128,136,242,98,99,241,242,242,386,241,241,381,337,419,343,131,118',
'344,125,147,88,89,127,128,354,48,49,50,51,52,53,58,222,291,385,315,224',
'311,131,118,223,311,311,136,320,345,291,365,48,49,50,51,52,53,58,361',
'242,78,79,241,80,81,82,138,83,104,105,106,107,108,109,110,111,112,113',
'114,115,139,116,117,78,79,140,80,81,82,136,83,104,105,106,107,108,109',
'110,111,112,113,114,115,136,116,117,131,118,127,128,339,163,340,341',
'86,87,48,49,50,51,52,53,58,92,93,94,95,125,145,131,118,96,90,91,147',
'127,128,136,136,48,49,50,51,52,53,58,136,136,78,79,136,80,81,82,334',
'83,104,105,106,107,108,109,110,111,112,113,114,115,335,116,117,78,79',
'337,80,81,82,136,83,104,105,106,107,108,109,110,111,112,113,114,115',
'-113,116,117,131,118,100,101,136,136,136,136,136,350,48,49,50,51,52',
'53,58,136,354,355,136,192,193,131,118,194,195,196,197,198,199,200,201',
'48,49,50,51,52,53,58,136,359,78,79,136,80,81,82,362,83,104,105,106,107',
'108,109,110,111,112,113,114,115,136,116,117,78,79,308,80,81,82,368,83',
'104,105,106,107,108,109,110,111,112,113,114,115,-113,116,117,131,118',
'321,322,370,136,136,379,293,136,48,49,50,51,52,53,58,136,136,136,136',
'182,183,131,118,184,185,186,187,188,189,190,191,48,49,50,51,52,53,58',
'136,392,78,79,393,80,81,82,394,83,104,105,106,107,108,109,110,111,112',
'113,114,115,395,116,117,78,79,136,80,81,82,136,83,104,105,106,107,108',
'109,110,111,112,113,114,115,136,116,117,131,118,136,136,136,136,337',
'408,233,136,48,49,50,51,52,53,58,-246,-246,-246,-246,136,136,131,118',
'96,90,91,302,136,136,84,136,48,49,50,51,52,53,58,136,136,78,79,427,80',
'81,82,136,83,104,105,106,107,108,109,110,111,112,113,114,115,136,116',
'117,78,79,136,80,81,82,136,83,104,105,106,107,108,109,110,111,112,113',
'114,115,136,116,117,131,118,431,136,136,302,136,136,136,443,48,49,50',
'51,52,53,58,-246,-246,-246,-246,444,136,131,118,96,90,91,450,,,,,48',
'49,50,51,52,53,58,,,78,79,,80,81,82,,83,104,105,106,107,108,109,110',
'111,112,113,114,115,,116,117,78,79,,80,81,82,,83,104,105,106,107,108',
'109,110,111,112,113,114,115,,116,117,131,118,,,,,,,,,48,49,50,51,52',
'53,58,92,93,94,95,,,180,118,96,90,91,,,,,,48,49,50,51,52,53,58,,,78',
'79,,80,81,82,,83,104,105,106,107,108,109,110,111,112,113,114,115,,116',
'117,78,79,,80,81,82,-110,83,,-113,,180,118,,100,101,,,,,287,48,49,50',
'51,52,53,58,,180,118,,,,,,,,,48,49,50,51,52,53,58,,,,,,180,118,78,79',
',80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,277,80,81,82,,83,48',
'49,50,51,52,53,58,,,,,,275,,78,79,,80,81,82,,83,,,,,,,,,180,118,78,79',
'289,80,81,82,,83,48,49,50,51,52,53,58,,92,93,94,95,209,,,,96,90,91,-246',
'-246,-246,-246,242,,7,241,96,90,91,,,78,79,,80,81,82,,83,,33,34,35,36',
'48,49,50,51,52,53,58,211,62,63,,,,311,64,,65,67,,,68,69,,70,7,71,72',
'73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58',
',62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81',
'82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69',
',70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50',
'51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77',
'78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,',
'65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35',
'36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73',
'74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62',
'63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82',
',83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70',
'7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52',
'53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79',
',80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67',
',,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48',
'49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75',
'76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,',
',,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33',
'34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71',
'72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53',
'58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80',
'81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68',
'69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49',
'50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76',
'77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64',
',65,67,,,68,69,,70,,71,72,73,74,75,76,77,78,79,,80,81,82,7,83,,,3,4',
',,,,,,,,,,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68',
'69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49',
'50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,,71,72,73,74,75,76,77',
'78,79,410,80,81,82,,83,296,118,,,,,,,,,48,49,50,51,52,53,58,92,93,94',
'95,92,93,94,95,96,90,91,,96,90,91,242,,,241,,,,,296,118,78,79,,80,81',
'82,,83,48,49,50,51,52,53,58,,180,118,,,,,,,,311,48,49,50,51,52,53,58',
',,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79',
',80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83',
'48,49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53',
'58,,,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78',
'79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,296,118,78,79,,80,81,82,',
'83,48,49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52',
'53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118',
'78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82',
',83,48,49,50,51,52,53,58,,296,118,78,79,,80,81,82,,83,48,49,50,51,52',
'53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118',
'78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82',
',83,48,49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52',
'53,58,,,,,,296,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118',
'78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82',
',83,48,49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52',
'53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,296,118',
'78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82',
',83,48,49,50,51,52,53,58,,296,118,78,79,,80,81,82,,83,48,49,50,51,52',
'53,58,,,,,374,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180',
'118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50',
'51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180',
'118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,,,,,,78,79,,80,81,82',
',83,,,,,,,,,,,78,79,,80,81,82,,83,92,93,94,95,92,93,94,95,96,90,91,',
'96,90,91,343,,,344,343,,,344,,33,34,35,36,48,49,50,51,52,53,58,,,63',
',,,,64,,65,67,345,,68,69,345,70,,,,,,,,,78,79,,80,81,82,,83,33,34,35',
'36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79',
',,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68',
'69,,70,,,,,,,,,78,79,,,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,',
'63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79,,,81,82,,83,33,34,35,36,48',
'49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79,,,81',
'82,,83,33,34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68,69,',
'70,,,,,,,,,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,,63',
',,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79,,,81,82,,83,104,105,106,107',
'108,109,110,111,112,113,114,115,,116,117,104,105,106,107,108,109,110',
'111,112,113,114,115,,116,117,92,93,94,95,92,93,94,95,96,90,91,,96,90',
'91,92,93,94,95,-246,-246,-246,-246,96,90,91,,96,90,91,92,93,94,95,92',
'93,94,95,96,90,91,,96,90,91' ]
        racc_action_table = arr = ::Array.new(2734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'29,29,325,373,18,18,373,388,310,352,388,310,347,423,404,432,29,29,432',
'29,404,5,5,123,123,423,29,29,29,29,29,29,29,137,217,352,239,137,373',
'123,123,137,388,310,330,244,432,216,330,123,123,123,123,123,123,123',
'325,151,29,29,151,29,29,29,59,29,29,29,29,29,29,29,29,29,29,29,29,29',
'61,29,29,123,123,62,123,123,123,67,123,123,123,123,123,123,123,123,123',
'123,123,123,123,68,123,123,70,70,247,247,304,84,304,304,2,2,70,70,70',
'70,70,70,70,164,164,164,164,247,66,134,134,164,164,164,66,31,31,90,91',
'134,134,134,134,134,134,134,290,292,70,70,298,70,70,70,299,70,70,70',
'70,70,70,70,70,70,70,70,70,70,300,70,70,134,134,301,134,134,134,92,134',
'134,134,134,134,134,134,134,134,134,134,134,134,260,134,134,96,96,260',
'260,219,162,161,159,158,312,96,96,96,96,96,96,96,314,316,319,321,107',
'107,152,152,107,107,107,107,107,107,107,107,152,152,152,152,152,152',
'152,322,324,96,96,93,96,96,96,326,96,96,96,96,96,96,96,96,96,96,96,96',
'96,328,96,96,152,152,235,152,152,152,333,152,152,152,152,152,152,152',
'152,152,152,152,152,152,245,152,152,354,354,245,245,336,337,234,344',
'218,351,354,354,354,354,354,354,354,150,227,94,95,106,106,71,71,106',
'106,106,106,106,106,106,106,71,71,71,71,71,71,71,361,363,354,354,364',
'354,354,354,366,354,354,354,354,354,354,354,354,354,354,354,354,354',
'367,354,354,71,71,370,71,71,71,147,71,71,71,71,71,71,71,71,71,71,71',
'71,71,375,71,71,77,77,376,377,382,383,384,387,144,143,77,77,77,77,77',
'77,77,258,258,258,258,398,142,407,407,258,258,258,229,32,141,1,409,407',
'407,407,407,407,407,407,411,412,77,77,413,77,77,77,139,77,77,77,77,77',
'77,77,77,77,77,77,77,77,138,77,77,407,407,98,407,407,407,417,407,407',
'407,407,407,407,407,407,407,407,407,407,407,418,407,407,72,72,421,99',
'100,426,430,101,436,438,72,72,72,72,72,72,72,255,255,255,255,439,447',
'75,75,255,255,255,449,,,,,75,75,75,75,75,75,75,,,72,72,,72,72,72,,72',
'72,72,72,72,72,72,72,72,72,72,72,72,,72,72,75,75,,75,75,75,,75,75,75',
'75,75,75,75,75,75,75,75,75,75,,75,75,76,76,,,,,,,,,76,76,76,76,76,76',
'76,303,303,303,303,,,200,200,303,303,303,,,,,,200,200,200,200,200,200',
'200,,,76,76,,76,76,76,,76,76,76,76,76,76,76,76,76,76,76,76,76,,76,76',
'200,200,,200,200,200,23,200,,23,,191,191,,23,23,,,,,200,191,191,191',
'191,191,191,191,,190,190,,,,,,,,,190,190,190,190,190,190,190,,,,,,201',
'201,191,191,,191,191,191,,191,201,201,201,201,201,201,201,,114,114,190',
'190,191,190,190,190,,190,114,114,114,114,114,114,114,,,,,,190,,201,201',
',201,201,201,,201,,,,,,,,,115,115,114,114,201,114,114,114,,114,115,115',
'115,115,115,115,115,,309,309,309,309,114,,,,309,309,309,257,257,257',
'257,309,,170,309,257,257,257,,,115,115,,115,115,115,,115,,170,170,170',
'170,170,170,170,170,170,170,170,115,170,170,,,,309,170,,170,170,,,170',
'170,,170,171,170,170,170,170,170,170,170,170,170,,170,170,170,,170,171',
'171,171,171,171,171,171,171,171,171,171,,171,171,,,,,171,,171,171,,',
'171,171,,171,230,171,171,171,171,171,171,171,171,171,,171,171,171,,171',
'230,230,230,230,230,230,230,230,230,230,230,,230,230,,,,,230,,230,230',
',,230,230,,230,231,230,230,230,230,230,230,230,230,230,,230,230,230',
',230,231,231,231,231,231,231,231,231,231,231,231,,231,231,,,,,231,,231',
'231,,,231,231,,231,232,231,231,231,231,231,231,231,231,231,,231,231',
'231,,231,232,232,232,232,232,232,232,232,232,232,232,,232,232,,,,,232',
',232,232,,,232,232,,232,169,232,232,232,232,232,232,232,232,232,,232',
'232,232,,232,169,169,169,169,169,169,169,169,169,169,169,,169,169,,',
',,169,,169,169,,,169,169,,169,88,169,169,169,169,169,169,169,169,169',
',169,169,169,,169,88,88,88,88,88,88,88,88,88,88,88,,88,88,,,,,88,,88',
'88,,,88,88,,88,236,88,88,88,88,88,88,88,88,88,,88,88,88,,88,236,236',
'236,236,236,236,236,236,236,236,236,,236,236,,,,,236,,236,236,,,236',
'236,,236,168,236,236,236,236,236,236,236,236,236,,236,236,236,,236,168',
'168,168,168,168,168,168,168,168,168,168,,168,168,,,,,168,,168,168,,',
'168,168,,168,167,168,168,168,168,168,168,168,168,168,,168,168,168,,168',
'167,167,167,167,167,167,167,167,167,167,167,,167,167,,,,,167,,167,167',
',,167,167,,167,166,167,167,167,167,167,167,167,167,167,,167,167,167',
',167,166,166,166,166,166,166,166,166,166,166,166,,166,166,,,,,166,,166',
'166,,,166,166,,166,7,166,166,166,166,166,166,166,166,166,,166,166,166',
',166,7,7,7,7,7,7,7,7,7,7,7,,7,7,,,,,7,,7,7,,,7,7,,7,149,7,7,7,7,7,7',
'7,7,7,,7,7,7,,7,149,149,149,149,149,149,149,149,149,149,149,,149,149',
',,,,149,,149,149,,,149,149,,149,148,149,149,149,149,149,149,149,149',
'149,,149,149,149,,149,148,148,148,148,148,148,148,148,148,148,148,,148',
'148,,,,,148,,148,148,,,148,148,,148,399,148,148,148,148,148,148,148',
'148,148,,148,148,148,,148,399,399,399,399,399,399,399,399,399,399,399',
',399,399,,,,,399,,399,399,,,399,399,,399,400,399,399,399,399,399,399',
'399,399,399,,399,399,399,,399,400,400,400,400,400,400,400,400,400,400',
'400,,400,400,,,,,400,,400,400,,,400,400,,400,401,400,400,400,400,400',
'400,400,400,400,,400,400,400,,400,401,401,401,401,401,401,401,401,401',
'401,401,,401,401,,,,,401,,401,401,,,401,401,,401,,401,401,401,401,401',
'401,401,401,401,,401,401,401,0,401,,,0,0,,,,,,,,,,,0,0,0,0,0,0,0,0,0',
'0,0,,0,0,,,,,0,,0,0,,,0,0,,0,89,0,0,0,0,0,0,0,0,0,,0,0,0,,0,89,89,89',
'89,89,89,89,89,89,89,89,,89,89,,,,,89,,89,89,,,89,89,,89,,89,89,89,89',
'89,89,89,89,89,392,89,89,89,,89,392,392,,,,,,,,,392,392,392,392,392',
'392,392,238,238,238,238,6,6,6,6,238,238,238,,6,6,6,238,,,238,,,,,249',
'249,392,392,,392,392,392,,392,249,249,249,249,249,249,249,,108,108,',
',,,,,,238,108,108,108,108,108,108,108,,,,,,109,109,249,249,,249,249',
'249,,249,109,109,109,109,109,109,109,,110,110,108,108,,108,108,108,',
'108,110,110,110,110,110,110,110,,,,,,111,111,109,109,,109,109,109,,109',
'111,111,111,111,111,111,111,,112,112,110,110,,110,110,110,,110,112,112',
'112,112,112,112,112,,,,,,113,113,111,111,,111,111,111,,111,113,113,113',
'113,113,113,113,,185,185,112,112,,112,112,112,,112,185,185,185,185,185',
'185,185,,,,,,424,424,113,113,,113,113,113,,113,424,424,424,424,424,424',
'424,,116,116,185,185,,185,185,185,,185,116,116,116,116,116,116,116,',
',,,,117,117,424,424,,424,424,424,,424,117,117,117,117,117,117,117,,184',
'184,116,116,,116,116,116,,116,184,184,184,184,184,184,184,,,,,,183,183',
'117,117,,117,117,117,,117,183,183,183,183,183,183,183,,226,226,184,184',
',184,184,184,,184,226,226,226,226,226,226,226,,,,,,199,199,183,183,',
'183,183,183,,183,199,199,199,199,199,199,199,,198,198,226,226,,226,226',
'226,,226,198,198,198,198,198,198,198,,,,,,197,197,199,199,,199,199,199',
',199,197,197,197,197,197,197,197,,196,196,198,198,,198,198,198,,198',
'196,196,196,196,196,196,196,,,,,,225,225,197,197,,197,197,197,,197,225',
'225,225,225,225,225,225,,182,182,196,196,,196,196,196,,196,182,182,182',
'182,182,182,182,,,,,,188,188,225,225,,225,225,225,,225,188,188,188,188',
'188,188,188,,189,189,182,182,,182,182,182,,182,189,189,189,189,189,189',
'189,,,,,,195,195,188,188,,188,188,188,,188,195,195,195,195,195,195,195',
',251,251,189,189,,189,189,189,,189,251,251,251,251,251,251,251,,,,,',
'105,105,195,195,,195,195,195,,195,105,105,105,105,105,105,105,,338,338',
'251,251,,251,251,251,,251,338,338,338,338,338,338,338,,,,,338,192,192',
'105,105,,105,105,105,,105,192,192,192,192,192,192,192,,104,104,338,338',
',338,338,338,,338,104,104,104,104,104,104,104,,,,,,193,193,192,192,',
'192,192,192,,192,193,193,193,193,193,193,193,,194,194,104,104,,104,104',
'104,,104,194,194,194,194,194,194,194,,,,,,187,187,193,193,,193,193,193',
',193,187,187,187,187,187,187,187,,186,186,194,194,,194,194,194,,194',
'186,186,186,186,186,186,186,,,,,,,,187,187,,187,187,187,,187,,,,,,,',
',,,186,186,,186,186,186,,186,305,305,305,305,306,306,306,306,305,305',
'305,,306,306,306,305,,,305,306,,,306,,174,174,174,174,174,174,174,174',
'174,174,174,,,174,,,,,174,,174,174,305,,174,174,306,174,,,,,,,,,174',
'174,,174,174,174,,174,357,357,357,357,357,357,357,357,357,357,357,,',
'357,,,,,357,,357,357,,,357,357,,357,,,,,,,,,357,357,,,357,357,,357,176',
'176,176,176,176,176,176,176,176,176,176,,,176,,,,,176,,176,176,,,176',
'176,,176,,,,,,,,,176,176,,,176,176,,176,358,358,358,358,358,358,358',
'358,358,358,358,,,358,,,,,358,,358,358,,,358,358,,358,,,,,,,,,358,358',
',,358,358,,358,160,160,160,160,160,160,160,160,160,160,160,,,160,,,',
',160,,160,160,,,160,160,,160,,,,,,,,,160,160,,,160,160,,160,173,173',
'173,173,173,173,173,173,173,173,173,,,173,,,,,173,,173,173,,,173,173',
',173,,,,,,,,,173,173,,173,173,173,,173,175,175,175,175,175,175,175,175',
'175,175,175,,,175,,,,,175,,175,175,,,175,175,,175,,,,,,,,,175,175,,',
'175,175,,175,27,27,27,27,27,27,27,27,27,27,27,27,,27,27,102,102,102',
'102,102,102,102,102,102,102,102,102,,102,102,237,237,237,237,165,165',
'165,165,237,237,237,,165,165,165,415,415,415,415,256,256,256,256,415',
'415,415,,256,256,256,416,416,416,416,414,414,414,414,416,416,416,,414',
'414,414' ]
        racc_action_check = arr = ::Array.new(2734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1501,   399,    94,   nil,   nil,     1,  1637,  1223,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -18,   nil,
   nil,   nil,   nil,   608,   nil,   nil,   nil,  2585,   nil,    -8,
   nil,   125,   379,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,
   nil,    68,    53,   nil,   nil,   nil,    80,    69,    83,   nil,
    80,   279,   432,   nil,   nil,   455,   520,   344,   nil,   nil,
   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,  1003,  1545,
   117,   118,   157,   218,   281,   282,   168,   nil,   417,   441,
   442,   445,  2600,   nil,  2173,  2115,   227,   139,  1653,  1675,
  1693,  1715,  1733,  1755,   654,   694,  1813,  1835,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   103,   nil,   nil,     3,   412,   398,
   nil,   380,   372,   359,   348,   nil,   nil,   333,  1311,  1267,
   279,    39,   191,   nil,   nil,   nil,   nil,   nil,   182,   181,
  2497,   180,   179,   nil,   118,  2690,  1179,  1135,  1091,   959,
   739,   783,   nil,  2541,  2321,  2585,  2409,   nil,   nil,   nil,
   nil,   nil,  2013,  1875,  1853,  1773,  2253,  2235,  2035,  2053,
   614,   596,  2155,  2195,  2213,  2075,  1973,  1955,  1933,  1915,
   543,   636,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,    12,   262,   178,
   nil,   nil,   nil,   nil,   nil,  1995,  1893,   280,   nil,   352,
   827,   871,   915,   nil,   268,   231,  1047,  2686,  1633,     6,
   nil,   nil,   nil,   nil,   -23,   267,   nil,    98,   nil,  1635,
   nil,  2093,   nil,   nil,   nil,   470,  2705,   744,   382,   nil,
   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   126,   nil,   127,   nil,   nil,   nil,   nil,   nil,   130,   122,
   138,   125,   nil,   558,    90,  2324,  2328,   nil,   nil,   733,
   -10,   nil,   148,   nil,   191,   nil,   152,   nil,   nil,   185,
   nil,   194,   214,   nil,   192,   -16,   211,   nil,   236,   nil,
    26,   nil,   nil,   222,   nil,   nil,   237,   267,  2133,   nil,
   nil,   nil,   nil,   nil,   238,   nil,   nil,   -16,   nil,   nil,
   nil,   271,   -21,   nil,   256,   nil,   nil,  2365,  2453,   nil,
   nil,   302,   nil,   276,   296,   nil,   298,   313,   nil,   nil,
   329,   nil,   nil,   -15,   nil,   347,   352,   353,   nil,   nil,
   nil,   nil,   354,   355,   328,   nil,   nil,   347,   -11,   nil,
   nil,   nil,  1595,   nil,   nil,   nil,   nil,   nil,   371,  1355,
  1399,  1443,   nil,   nil,   -32,   nil,   nil,   367,   nil,   382,
   nil,   390,   391,   382,  2720,  2701,  2716,   421,   435,   nil,
   nil,   430,   nil,   -33,  1795,   nil,   417,   nil,   nil,   nil,
   444,   nil,    -3,   nil,   nil,   nil,   446,   nil,   437,   449,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   460,   nil,   456,
   nil ]

racc_action_default = [
  -246,  -246,  -246,    -2,    -3,    -4,    -7,  -246,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -31,
   -32,   -33,   -34,   -35,   -40,   -41,   -42,   -45,   -44,   -63,
   -57,   -63,  -238,   -73,   -74,   -75,   -76,   -84,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -242,  -246,
  -111,  -246,  -246,  -115,  -240,  -240,  -245,  -238,  -238,  -240,
  -246,   -77,   -77,  -158,  -159,   -77,   -77,   -77,  -163,  -165,
  -242,  -169,  -170,  -175,  -246,    -1,  -232,  -233,    -5,    -6,
  -238,  -238,  -238,  -238,  -238,  -238,   -77,   -17,  -238,  -238,
  -238,  -238,   -43,  -190,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,   -50,   -51,
   -52,   -53,   -54,   -63,   -56,   -60,   -64,   -65,   -67,   -79,
   -81,   -82,   -83,   -58,  -245,   -61,  -242,  -246,  -238,  -238,
  -242,  -238,  -238,  -238,  -246,  -242,  -245,  -238,  -246,  -246,
  -238,  -246,   -78,  -156,  -157,  -160,  -161,  -162,  -238,  -238,
  -246,  -238,  -238,   451,    -8,    -9,  -246,  -246,  -246,  -246,
  -246,  -246,   -16,  -246,  -246,  -246,  -246,  -191,  -192,  -230,
  -231,  -193,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -198,  -201,  -204,  -207,  -210,  -213,  -216,  -225,
  -219,  -222,  -228,  -229,   -55,   -80,   -69,   -69,  -246,  -238,
  -239,  -105,  -106,  -107,  -108,  -246,  -246,  -238,  -245,  -118,
  -181,  -246,  -246,  -134,  -238,  -246,  -246,  -137,  -246,  -246,
  -151,  -242,  -242,  -245,  -246,  -168,   -45,   -63,  -243,  -245,
  -172,  -245,  -177,   -10,   -11,   -12,   -13,   -14,   -15,   -29,
   -35,   -30,   -36,   -38,   -37,   -39,  -194,  -195,  -199,  -202,
  -205,  -208,  -211,  -214,  -217,  -226,  -220,  -223,  -196,  -197,
  -200,  -203,  -206,  -209,  -212,  -215,  -218,  -227,  -221,  -224,
  -238,   -71,  -238,  -244,   -62,   -48,   -49,  -109,  -238,  -246,
  -246,  -122,   -46,  -186,  -182,  -246,  -246,  -245,  -136,  -246,
  -246,  -142,  -143,  -145,  -238,  -149,  -246,  -236,  -237,  -246,
  -245,  -238,  -238,  -167,  -246,  -238,  -246,  -178,  -238,  -245,
  -238,  -245,   -59,  -246,  -114,  -116,  -124,  -238,  -120,  -242,
  -242,  -242,  -126,  -128,  -129,  -131,  -132,  -246,  -242,  -242,
  -144,  -238,  -246,  -245,   -77,  -243,  -243,  -246,  -246,  -171,
  -173,  -238,  -176,  -246,  -246,   -70,  -246,  -246,  -112,  -117,
  -238,  -123,   -47,  -246,  -242,  -238,  -238,  -238,  -241,  -130,
  -241,  -135,  -238,  -238,  -122,  -243,  -150,  -246,  -246,  -164,
  -166,  -174,  -246,   -66,   -72,   -68,  -125,  -242,  -238,  -183,
  -184,  -185,  -242,  -242,  -139,  -138,  -245,  -246,  -152,  -238,
  -243,  -238,  -238,  -246,  -187,  -188,  -189,  -238,  -238,  -242,
  -141,  -246,  -242,  -122,  -246,  -180,  -118,  -121,  -245,  -245,
  -238,  -146,  -246,  -153,  -154,  -155,  -238,  -119,  -246,  -246,
  -140,  -147,  -179,  -127,  -133,  -241,  -242,  -238,  -245,  -246,
  -148 ]

racc_goto_table = [
   135,    22,   146,   313,   336,   153,   154,   353,    22,   155,
   156,   157,   246,   103,   247,   297,   298,   151,   301,   342,
   346,   133,   290,   292,   323,   262,   264,   246,   246,   245,
   172,    46,   142,   143,   378,   148,   149,   150,    46,   325,
   338,   328,   260,   260,   263,   265,   259,   261,   221,   402,
   228,   403,   141,   102,   217,   369,   373,   216,   166,   167,
   168,   169,   170,   171,   123,   134,   173,   174,   175,   176,
   215,   332,   330,   380,   348,   349,    47,     5,   310,   240,
   351,   219,   314,    47,    85,   445,     2,   406,   177,    22,
    22,   316,   433,   158,   159,   248,   249,   161,   251,   215,
   162,   327,   304,   137,     1,    45,   225,   226,   nil,   nil,
   231,   232,    45,   214,   435,   236,   446,   nil,   239,    46,
    46,   nil,   nil,   nil,   nil,   160,   434,   nil,   372,   250,
   252,   389,   390,   nil,   nil,   nil,   nil,   nil,   397,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   441,   nil,   nil,    22,
    22,     6,   nil,   409,   nil,   nil,   nil,   nil,    97,   nil,
   nil,   407,   nil,   nil,    47,    47,   nil,    22,    22,    22,
    22,    22,    22,   nil,    22,    22,   nil,   nil,   nil,    46,
    46,   220,   411,   nil,   nil,   227,   424,   294,   nil,   nil,
   234,    46,   nil,    45,    45,   299,   nil,    46,    46,    46,
    46,    46,    46,   nil,    46,    46,    46,    46,   nil,   246,
   246,   247,   247,   nil,   436,   437,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    47,   263,   265,   nil,   144,
   nil,    22,    22,    22,   nil,   nil,    47,    22,   nil,   164,
   165,   nil,    47,    47,    47,    47,    47,    47,   nil,    47,
    47,    47,    47,    45,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    46,    46,   nil,    45,   333,    46,   nil,   nil,
   nil,    45,    45,    45,    45,    45,    45,   nil,    45,    45,
    45,    45,   352,   nil,   nil,   nil,   317,   318,   388,   357,
   358,   nil,   nil,   360,   nil,   nil,   363,   218,   366,   237,
   238,   nil,   nil,   nil,   nil,   130,    47,    47,    47,   235,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   253,   254,   255,
   256,   257,   258,   nil,   nil,   nil,   nil,   nil,   nil,   391,
   nil,   nil,   nil,   nil,   nil,    45,    45,    45,   nil,   nil,
   420,    45,   nil,   399,   400,   401,   130,   130,   130,   nil,
   nil,   130,   130,   130,   422,   nil,   nil,   nil,   229,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   413,   nil,   nil,   nil,
   nil,   nil,   130,   nil,   nil,   243,   244,   nil,   nil,   425,
   nil,   303,   305,   306,   375,   376,   377,   309,    46,    46,
   nil,   300,   nil,   382,   383,   nil,   nil,   nil,   nil,   130,
    22,    22,    22,   nil,   442,   nil,   319,   nil,   nil,   nil,
   130,   nil,   324,   nil,   326,   nil,   nil,   nil,   nil,   398,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,   nil,
    46,    46,    46,    47,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   412,   nil,   nil,   nil,   nil,   417,   418,   nil,
   nil,   307,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    45,   430,   nil,   nil,   432,   nil,   nil,
   347,   nil,   nil,   nil,   nil,    47,    47,    47,   nil,   nil,
   nil,   nil,   nil,   356,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   447,   364,   nil,   367,   nil,   nil,   nil,   nil,   nil,
   nil,   295,   295,   nil,    45,    45,    45,   329,   nil,   331,
   nil,   nil,   nil,   nil,   nil,   nil,   387,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   295,   nil,   295,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   414,   415,   416,   nil,   371,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,   421,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   396,   nil,   nil,
   nil,   438,   439,   nil,   nil,   nil,   nil,   nil,   nil,   404,
   405,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   449,   nil,   nil,   295,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   423,   nil,   nil,   426,
   130,   nil,   178,   181,   428,   429,   202,   203,   204,   205,
   206,   207,   208,   210,   212,   213,   nil,   440,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   448,   nil,   nil,   nil,   295,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   276,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   288 ]

racc_goto_check = [
     6,    22,    83,    76,    73,     7,     7,    90,    22,     7,
     7,     7,    27,    52,    36,    31,    31,    45,    72,    78,
    78,    38,    47,    47,    88,    24,    24,    27,    27,    23,
     7,    34,    77,    77,    80,     6,     6,    77,    34,    31,
    30,    31,    23,    23,    25,    25,    19,    19,    66,    79,
    70,    79,    71,    28,    50,    74,    75,    49,     6,     6,
     6,     6,     6,     6,    37,    42,     6,     6,     6,     6,
    45,    44,    51,    81,    76,    76,    35,     4,    84,    85,
    86,    45,    87,    35,     3,    89,     2,    73,    52,    22,
    22,    91,    92,    93,    94,    95,    96,    97,    98,    45,
    99,   100,   101,    65,     1,    33,     6,     6,   nil,   nil,
     6,     6,    33,    38,    90,     6,    79,   nil,     6,    34,
    34,   nil,   nil,   nil,   nil,    65,    73,   nil,    31,     6,
     6,    88,    88,   nil,   nil,   nil,   nil,   nil,    76,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,    22,
    22,     5,   nil,    76,   nil,   nil,   nil,   nil,     5,   nil,
   nil,    88,   nil,   nil,    35,    35,   nil,    22,    22,    22,
    22,    22,    22,   nil,    22,    22,   nil,   nil,   nil,    34,
    34,    65,    31,   nil,   nil,    65,    88,     6,   nil,   nil,
    65,    34,   nil,    33,    33,     6,   nil,    34,    34,    34,
    34,    34,    34,   nil,    34,    34,    34,    34,   nil,    27,
    27,    36,    36,   nil,    31,    72,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35,    25,    25,   nil,    43,
   nil,    22,    22,    22,   nil,   nil,    35,    22,   nil,     5,
     5,   nil,    35,    35,    35,    35,    35,    35,   nil,    35,
    35,    35,    35,    33,    33,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    34,    34,   nil,    33,     6,    34,   nil,   nil,
   nil,    33,    33,    33,    33,    33,    33,   nil,    33,    33,
    33,    33,     6,   nil,   nil,   nil,    65,    65,     7,     6,
     6,   nil,   nil,     6,   nil,   nil,     6,    43,     6,     5,
     5,   nil,   nil,   nil,   nil,    32,    35,    35,    35,    43,
   nil,   nil,    35,   nil,   nil,   nil,   nil,     5,     5,     5,
     5,     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,    33,    33,    33,   nil,   nil,
    83,    33,   nil,     6,     6,     6,    32,    32,    32,   nil,
   nil,    32,    32,    32,    45,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,    48,    48,   nil,   nil,     6,
   nil,     5,     5,     5,    65,    65,    65,     5,    34,    34,
   nil,    43,   nil,    65,    65,   nil,   nil,   nil,   nil,    32,
    22,    22,    22,   nil,     6,   nil,    43,   nil,   nil,   nil,
    32,   nil,    43,   nil,    43,   nil,   nil,   nil,   nil,    65,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
    34,    34,    34,    35,    35,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    65,   nil,   nil,   nil,   nil,    65,    65,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,    33,    65,   nil,   nil,    65,   nil,   nil,
    43,   nil,   nil,   nil,   nil,    35,    35,    35,   nil,   nil,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    65,    43,   nil,    43,   nil,   nil,   nil,   nil,   nil,
   nil,    32,    32,   nil,    33,    33,    33,    48,   nil,    48,
   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,     5,     5,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,    43,    43,   nil,   nil,   nil,   nil,   nil,   nil,    48,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,    48,
    32,   nil,   102,   102,    48,    48,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102 ]

racc_goto_pointer = [
   nil,   104,    86,    82,    77,   151,   -32,   -66,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -127,
   nil,   nil,     1,  -131,  -150,  -131,   nil,  -148,    26,   nil,
  -262,  -210,   276,   105,    31,    76,  -146,    35,   -10,   nil,
   nil,   nil,    33,   163,  -222,   -53,   nil,  -194,   217,   -70,
   -74,  -219,   -14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   -89,   nil,   nil,   nil,
   -91,   -11,  -211,  -297,  -281,  -282,  -235,   -32,  -286,  -329,
  -308,  -273,   nil,   -64,  -159,   -72,  -233,  -157,  -224,  -356,
  -309,  -149,  -331,    15,    15,   -65,   -65,    15,   -64,    17,
  -150,  -128,   528,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,   121,    23,    26,    24,    25,    27,   nil,    28,
   nil,   nil,   179,   119,   120,   122,    29,   152,   124,    30,
    31,    32,   nil,   nil,   nil,   129,   126,   nil,   nil,   nil,
   nil,   nil,   132,    37,    38,    39,    40,    41,    42,    43,
    44,    54,    55,    56,    57,   nil,   nil,    59,    60,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 90, :_reduce_1,
  1, 90, :_reduce_2,
  1, 90, :_reduce_3,
  1, 91, :_reduce_none,
  2, 91, :_reduce_5,
  2, 91, :_reduce_6,
  1, 93, :_reduce_7,
  3, 93, :_reduce_8,
  3, 93, :_reduce_9,
  4, 94, :_reduce_10,
  4, 94, :_reduce_11,
  4, 94, :_reduce_12,
  4, 94, :_reduce_13,
  4, 94, :_reduce_14,
  4, 94, :_reduce_15,
  3, 94, :_reduce_16,
  2, 94, :_reduce_17,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 97, :_reduce_none,
  4, 107, :_reduce_29,
  4, 107, :_reduce_30,
  1, 107, :_reduce_none,
  1, 108, :_reduce_32,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 110, :_reduce_none,
  4, 110, :_reduce_36,
  4, 110, :_reduce_37,
  4, 112, :_reduce_38,
  4, 112, :_reduce_39,
  1, 112, :_reduce_40,
  1, 112, :_reduce_41,
  1, 109, :_reduce_none,
  2, 109, :_reduce_43,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 119, :_reduce_46,
  2, 119, :_reduce_47,
  1, 120, :_reduce_none,
  1, 120, :_reduce_49,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 113, :_reduce_55,
  2, 118, :_reduce_56,
  1, 118, :_reduce_none,
  2, 128, :_reduce_58,
  5, 129, :_reduce_59,
  2, 130, :_reduce_60,
  1, 131, :_reduce_61,
  3, 131, :_reduce_62,
  0, 127, :_reduce_63,
  1, 127, :_reduce_none,
  0, 138, :_reduce_65,
  6, 135, :_reduce_66,
  0, 139, :_reduce_67,
  6, 135, :_reduce_68,
  0, 136, :_reduce_69,
  3, 136, :_reduce_70,
  0, 140, :_reduce_71,
  3, 140, :_reduce_72,
  1, 125, :_reduce_73,
  1, 125, :_reduce_74,
  1, 125, :_reduce_75,
  1, 125, :_reduce_76,
  0, 96, :_reduce_77,
  1, 96, :_reduce_none,
  1, 126, :_reduce_79,
  2, 126, :_reduce_80,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 142, :_reduce_94,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 152, :_reduce_105,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  4, 105, :_reduce_109,
  1, 156, :_reduce_none,
  1, 115, :_reduce_111,
  6, 157, :_reduce_112,
  1, 158, :_reduce_none,
  5, 106, :_reduce_114,
  0, 160, :_reduce_115,
  5, 147, :_reduce_116,
  4, 159, :_reduce_117,
  0, 161, :_reduce_118,
  7, 161, :_reduce_119,
  0, 164, :_reduce_120,
  4, 164, :_reduce_121,
  0, 162, :_reduce_122,
  2, 162, :_reduce_123,
  0, 163, :_reduce_124,
  2, 163, :_reduce_125,
  0, 169, :_reduce_126,
  11, 145, :_reduce_127,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  1, 167, :_reduce_none,
  0, 170, :_reduce_132,
  11, 146, :_reduce_133,
  3, 143, :_reduce_134,
  6, 143, :_reduce_135,
  4, 143, :_reduce_136,
  0, 173, :_reduce_137,
  7, 171, :_reduce_138,
  6, 172, :_reduce_139,
  9, 172, :_reduce_140,
  7, 172, :_reduce_141,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  2, 165, :_reduce_none,
  0, 175, :_reduce_145,
  9, 144, :_reduce_146,
  0, 178, :_reduce_147,
  16, 149, :_reduce_148,
  1, 176, :_reduce_149,
  3, 176, :_reduce_150,
  0, 180, :_reduce_151,
  7, 148, :_reduce_152,
  5, 179, :_reduce_153,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 98, :_reduce_156,
  2, 99, :_reduce_157,
  1, 100, :_reduce_158,
  1, 101, :_reduce_159,
  2, 102, :_reduce_160,
  2, 103, :_reduce_161,
  2, 104, :_reduce_162,
  0, 182, :_reduce_163,
  6, 122, :_reduce_164,
  0, 183, :_reduce_165,
  6, 123, :_reduce_166,
  4, 111, :_reduce_167,
  1, 184, :_reduce_168,
  1, 153, :_reduce_169,
  0, 186, :_reduce_170,
  5, 150, :_reduce_171,
  1, 185, :_reduce_172,
  3, 185, :_reduce_173,
  4, 185, :_reduce_174,
  0, 188, :_reduce_175,
  5, 151, :_reduce_176,
  1, 187, :_reduce_177,
  2, 187, :_reduce_178,
  7, 189, :_reduce_179,
  5, 189, :_reduce_180,
  1, 137, :_reduce_181,
  2, 137, :_reduce_182,
  5, 137, :_reduce_183,
  5, 137, :_reduce_184,
  5, 137, :_reduce_185,
  1, 190, :_reduce_186,
  5, 190, :_reduce_187,
  5, 190, :_reduce_188,
  5, 190, :_reduce_189,
  1, 117, :_reduce_190,
  2, 117, :_reduce_191,
  2, 141, :_reduce_192,
  2, 141, :_reduce_193,
  3, 141, :_reduce_194,
  3, 141, :_reduce_195,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_198,
  3, 141, :_reduce_199,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_228,
  2, 141, :_reduce_229,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  2, 174, :_reduce_none,
  2, 174, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_none,
  0, 166, :_reduce_240,
  0, 168, :_reduce_241,
  0, 154, :_reduce_242,
  0, 177, :_reduce_243,
  0, 133, :_reduce_244,
  0, 132, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 451

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :ALIAS => 42,
  :BEGIN => 43,
  :RESCUE => 44,
  :ASSOC => 45,
  :ELSE => 46,
  :ENSURE => 47,
  :WHILE => 48,
  :DO_COND => 49,
  :UNTIL => 50,
  :IF => 51,
  :ELSIF => 52,
  :THEN => 53,
  :UNLESS => 54,
  :FOR => 55,
  :IN => 56,
  :CASE => 57,
  :WHEN => 58,
  :BREAK => 59,
  :NEXT => 60,
  :REDO => 61,
  :Retry => 62,
  :RAISE => 63,
  :RETURN => 64,
  :YIELD => 65,
  "(" => 66,
  :XSTRING_BEG => 67,
  :XSTRING_END => 68,
  "$" => 69,
  :RUBYEXP => 70,
  :LBLACK_A => 71,
  "," => 72,
  :LBRACE_H => 73,
  ">" => 74,
  "<" => 75,
  :FID => 76,
  :REDIR_WORD => 77,
  :GREATER_GREATER => 78,
  :GREATER_BAR => 79,
  :LESS_GREATER => 80,
  :LESS_LESS => 81,
  :LESS_LESS_MINUS => 82,
  :LESS_LESS_LESS => 83,
  :LESS_AND => 84,
  :GREATER_AND => 85,
  "-" => 86,
  :AND_GREATER => 87,
  :AND_GREATER_GREATER => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@3",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@4",
  "@5",
  "if_head",
  "elsif_clause",
  "@6",
  "opt_terms",
  "@7",
  "for_arg",
  "lex_arg",
  "@8",
  "case_body",
  "@9",
  "cases",
  "@10",
  "@11",
  "trivial_command0",
  "array_element_list",
  "@12",
  "hash_element_list",
  "@13",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_30(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_32(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_36(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_40(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_41(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_43(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_46(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_47(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_49(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_55(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_56(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_58(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_59(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_60(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_61(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_62(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_63(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_65(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_66(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_67(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_68(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_69(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_70(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_71(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_72(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_73(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 349)
  def _reduce_77(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_79(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_80(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_94(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_105(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_109(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_111(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_112(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_114(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_115(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 467)
  def _reduce_116(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_117(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 478)
  def _reduce_118(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 482)
  def _reduce_119(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 493)
  def _reduce_120(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 497)
  def _reduce_121(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_122(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_123(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_124(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_125(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 517)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 519)
  def _reduce_127(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.y', 527)
  def _reduce_132(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 529)
  def _reduce_133(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 534)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 538)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 542)
  def _reduce_136(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 545)
  def _reduce_137(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 547)
  def _reduce_138(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 551)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 555)
  def _reduce_140(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 559)
  def _reduce_141(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_145(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 568)
  def _reduce_146(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 572)
  def _reduce_147(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 574)
  def _reduce_148(val, _values, result)
    		result = Node::ForCommand(val[3], val[7], val[13])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 579)
  def _reduce_149(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 584)
  def _reduce_150(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 588)
  def _reduce_151(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 590)
  def _reduce_152(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 595)
  def _reduce_153(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.y', 610)
  def _reduce_156(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_157(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 620)
  def _reduce_158(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 625)
  def _reduce_159(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 630)
  def _reduce_160(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 635)
  def _reduce_161(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 640)
  def _reduce_162(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 646)
  def _reduce_164(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 649)
  def _reduce_165(val, _values, result)
    @lex.indent_push(:BACK_QUOTE); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 651)
  def _reduce_166(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 691)
  def _reduce_167(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 696)
  def _reduce_168(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 749)
  def _reduce_169(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 752)
  def _reduce_170(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 754)
  def _reduce_171(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 759)
  def _reduce_172(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 764)
  def _reduce_173(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 769)
  def _reduce_174(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 773)
  def _reduce_175(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 775)
  def _reduce_176(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 780)
  def _reduce_177(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_178(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 790)
  def _reduce_179(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 795)
  def _reduce_180(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 801)
  def _reduce_181(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 805)
  def _reduce_182(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 809)
  def _reduce_183(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 813)
  def _reduce_184(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 818)
  def _reduce_185(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 823)
  def _reduce_186(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 827)
  def _reduce_187(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 832)
  def _reduce_188(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 838)
  def _reduce_189(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 844)
  def _reduce_190(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 848)
  def _reduce_191(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 854)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 859)
  def _reduce_193(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 864)
  def _reduce_194(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 869)
  def _reduce_195(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.y', 876)
  def _reduce_198(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 881)
  def _reduce_199(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.y', 920)
  def _reduce_228(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 925)
  def _reduce_229(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'parser.y', 944)
  def _reduce_240(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 945)
  def _reduce_241(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 947)
  def _reduce_242(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 948)
  def _reduce_243(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 949)
  def _reduce_244(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 951)
  def _reduce_245(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
