#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 959)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

      end
      super unless @cmpl_mode

      @cmpl_mode = value_stack
      Reish::Fail ParserComplSupp
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'127,128,136,243,98,99,242,243,243,352,242,242,136,337,145,343,131,118',
'344,125,147,88,89,127,128,354,48,49,50,51,52,53,58,222,136,351,233,224',
'312,131,118,223,312,312,136,136,345,320,365,48,49,50,51,52,53,58,361',
'243,78,79,242,80,81,82,309,83,104,105,106,107,108,109,110,111,112,113',
'114,115,136,116,117,78,79,136,80,81,82,136,83,104,105,106,107,108,109',
'110,111,112,113,114,115,136,116,117,131,118,127,128,339,136,340,341',
'86,87,48,49,50,51,52,53,58,-244,-244,-244,-244,125,417,131,118,96,90',
'91,147,127,128,136,136,48,49,50,51,52,53,58,292,136,78,79,136,80,81',
'82,136,83,104,105,106,107,108,109,110,111,112,113,114,115,334,116,117',
'78,79,335,80,81,82,337,83,104,105,106,107,108,109,110,111,112,113,114',
'115,-113,116,117,131,118,100,101,136,136,136,136,136,136,48,49,50,51',
'52,53,58,136,354,355,136,192,193,131,118,194,195,196,197,198,199,200',
'201,48,49,50,51,52,53,58,136,359,78,79,136,80,81,82,362,83,104,105,106',
'107,108,109,110,111,112,113,114,115,136,116,117,78,79,136,80,81,82,368',
'83,104,105,106,107,108,109,110,111,112,113,114,115,-113,116,117,131',
'118,321,322,370,136,136,380,136,136,48,49,50,51,52,53,58,163,136,136',
'390,182,183,131,118,184,185,186,187,188,189,190,191,48,49,50,51,52,53',
'58,391,392,78,79,393,80,81,82,136,83,104,105,106,107,108,109,110,111',
'112,113,114,115,136,116,117,78,79,136,80,81,82,136,83,104,105,106,107',
'108,109,110,111,112,113,114,115,136,116,117,131,118,136,136,337,136',
'406,303,140,240,48,49,50,51,52,53,58,92,93,94,95,139,138,131,118,96',
'90,91,136,136,136,136,136,48,49,50,51,52,53,58,136,425,78,79,136,80',
'81,82,136,83,104,105,106,107,108,109,110,111,112,113,114,115,294,116',
'117,78,79,136,80,81,82,136,83,104,105,106,107,108,109,110,111,112,113',
'114,115,429,116,117,131,118,292,84,303,136,136,441,442,136,48,49,50',
'51,52,53,58,92,93,94,95,445,,131,118,96,90,91,,,,,,48,49,50,51,52,53',
'58,,,78,79,,80,81,82,,83,104,105,106,107,108,109,110,111,112,113,114',
'115,,116,117,78,79,,80,81,82,,83,104,105,106,107,108,109,110,111,112',
'113,114,115,,116,117,131,118,,,,,,,,,48,49,50,51,52,53,58,92,93,94,95',
',,180,118,96,90,91,,,,,,48,49,50,51,52,53,58,,,78,79,,80,81,82,,83,104',
'105,106,107,108,109,110,111,112,113,114,115,,116,117,78,79,,80,81,82',
'-110,83,,-113,,180,118,,100,101,,,,,209,48,49,50,51,52,53,58,,180,118',
',,,,,,,,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,180,118,78,79,211,80,81,82,,83,48,49,50,51,52,53,58',
',,,,,290,,78,79,,80,81,82,,83,,,,,,,,,180,118,78,79,276,80,81,82,,83',
'48,49,50,51,52,53,58,,92,93,94,95,278,,,,96,90,91,-244,-244,-244,-244',
'243,,7,242,96,90,91,,,78,79,,80,81,82,,83,,33,34,35,36,48,49,50,51,52',
'53,58,288,62,63,,,,312,64,,65,67,,,68,69,,70,,71,72,73,74,75,76,77,78',
'79,,80,81,82,7,83,,,3,4,,,,,,,,,,,33,34,35,36,48,49,50,51,52,53,58,',
'62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81',
'82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69',
',70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50',
'51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77',
'78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,',
'65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35',
'36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73',
'74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62',
'63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82',
',83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70',
'7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52',
'53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79',
',80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67',
',,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48',
'49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75',
'76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,',
',,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33',
'34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71',
'72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53',
'58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80',
'81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68',
'69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49',
'50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72,73,74,75,76',
'77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,62,63,,,,,64',
',65,67,,,68,69,,70,7,71,72,73,74,75,76,77,78,79,,80,81,82,,83,33,34',
'35,36,48,49,50,51,52,53,58,,62,63,,,,,64,,65,67,,,68,69,,70,7,71,72',
'73,74,75,76,77,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52,53,58',
',62,63,,,,,64,,65,67,,,68,69,,70,,71,72,73,74,75,76,77,78,79,408,80',
'81,82,,83,297,118,,,,,,,,,48,49,50,51,52,53,58,92,93,94,95,-244,-244',
'-244,-244,96,90,91,,96,90,91,243,,,242,,,,,180,118,78,79,,80,81,82,',
'83,48,49,50,51,52,53,58,,180,118,,,,,,,,312,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,297,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,297,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,297,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,297,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,,180,118,78,79,,80,81,82,,83,48,49',
'50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,,',
',,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,297,118,78,79,,80',
'81,82,,83,48,49,50,51,52,53,58,,,,,374,180,118,78,79,,80,81,82,,83,48',
'49,50,51,52,53,58,,180,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58',
',,,,,297,118,78,79,,80,81,82,,83,48,49,50,51,52,53,58,,180,118,78,79',
',80,81,82,,83,48,49,50,51,52,53,58,,,,,,,,78,79,,80,81,82,,83,,,,,,',
',,,,78,79,,80,81,82,,83,92,93,94,95,92,93,94,95,96,90,91,,96,90,91,343',
',,344,343,,,344,,33,34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67',
'345,,68,69,345,70,,,,,,,,,78,79,,,81,82,,83,33,34,35,36,48,49,50,51',
'52,53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79,,,81,82,,83,33',
'34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,',
',78,79,,,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65',
'67,,,68,69,,70,,,,,,,,,78,79,,80,81,82,,83,33,34,35,36,48,49,50,51,52',
'53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78,79,,,81,82,,83,33,34',
'35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,,,68,69,,70,,,,,,,,,78',
'79,,,81,82,,83,33,34,35,36,48,49,50,51,52,53,58,,,63,,,,,64,,65,67,',
',68,69,,70,,,,,,,,,78,79,,80,81,82,,83,104,105,106,107,108,109,110,111',
'112,113,114,115,,116,117,104,105,106,107,108,109,110,111,112,113,114',
'115,,116,117,-244,-244,-244,-244,92,93,94,95,96,90,91,,96,90,91,92,93',
'94,95,92,93,94,95,96,90,91,,96,90,91,92,93,94,95,92,93,94,95,96,90,91',
',96,90,91' ]
        racc_action_table = arr = ::Array.new(2734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'29,29,325,373,18,18,373,311,386,315,311,386,396,421,66,405,29,29,405',
'29,66,5,5,123,123,421,29,29,29,29,29,29,29,137,147,315,144,137,373,123',
'123,137,311,386,330,239,405,245,330,123,123,123,123,123,123,123,325',
'151,29,29,151,29,29,29,235,29,29,29,29,29,29,29,29,29,29,29,29,29,143',
'29,29,123,123,142,123,123,123,141,123,123,123,123,123,123,123,123,123',
'123,123,123,123,139,123,123,384,384,248,248,305,138,305,305,2,2,384',
'384,384,384,384,384,384,258,258,258,258,248,402,72,72,258,258,258,402',
'31,31,234,101,72,72,72,72,72,72,72,216,291,384,384,293,384,384,384,299',
'384,384,384,384,384,384,384,384,384,384,384,384,384,300,384,384,72,72',
'301,72,72,72,302,72,72,72,72,72,72,72,72,72,72,72,72,72,261,72,72,152',
'152,261,261,100,158,99,98,95,94,152,152,152,152,152,152,152,93,316,319',
'321,107,107,134,134,107,107,107,107,107,107,107,107,134,134,134,134',
'134,134,134,322,324,152,152,92,152,152,152,326,152,152,152,152,152,152',
'152,152,152,152,152,152,152,328,152,152,134,134,159,134,134,134,333',
'134,134,134,134,134,134,134,134,134,134,134,134,134,246,134,134,71,71',
'246,246,336,337,91,347,350,90,71,71,71,71,71,71,71,84,69,361,363,106',
'106,75,75,106,106,106,106,106,106,106,106,75,75,75,75,75,75,75,364,366',
'71,71,367,71,71,71,370,71,71,71,71,71,71,71,71,71,71,71,71,71,68,71',
'71,75,75,375,75,75,75,376,75,75,75,75,75,75,75,75,75,75,75,75,75,377',
'75,75,76,76,381,382,383,67,385,229,62,150,76,76,76,76,76,76,76,304,304',
'304,304,61,59,77,77,304,304,304,32,227,161,407,409,77,77,77,77,77,77',
'77,410,411,76,76,162,76,76,76,219,76,76,76,76,76,76,76,76,76,76,76,76',
'76,218,76,76,77,77,415,77,77,77,416,77,77,77,77,77,77,77,77,77,77,77',
'77,77,419,77,77,96,96,217,1,424,428,434,436,437,439,96,96,96,96,96,96',
'96,412,412,412,412,444,,354,354,412,412,412,,,,,,354,354,354,354,354',
'354,354,,,96,96,,96,96,96,,96,96,96,96,96,96,96,96,96,96,96,96,96,,96',
'96,354,354,,354,354,354,,354,354,354,354,354,354,354,354,354,354,354',
'354,354,,354,354,70,70,,,,,,,,,70,70,70,70,70,70,70,413,413,413,413',
',,114,114,413,413,413,,,,,,114,114,114,114,114,114,114,,,70,70,,70,70',
'70,,70,70,70,70,70,70,70,70,70,70,70,70,70,,70,70,114,114,,114,114,114',
'23,114,,23,,115,115,,23,23,,,,,114,115,115,115,115,115,115,115,,201',
'201,,,,,,,,,201,201,201,201,201,201,201,,,,,,190,190,115,115,,115,115',
'115,,115,190,190,190,190,190,190,190,,191,191,201,201,115,201,201,201',
',201,191,191,191,191,191,191,191,,,,,,201,,190,190,,190,190,190,,190',
',,,,,,,,200,200,191,191,190,191,191,191,,191,200,200,200,200,200,200',
'200,,310,310,310,310,191,,,,310,310,310,259,259,259,259,310,,88,310',
'259,259,259,,,200,200,,200,200,200,,200,,88,88,88,88,88,88,88,88,88',
'88,88,200,88,88,,,,310,88,,88,88,,,88,88,,88,,88,88,88,88,88,88,88,88',
'88,,88,88,88,0,88,,,0,0,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,0,,0,0,,,,,0,',
'0,0,,,0,0,,0,166,0,0,0,0,0,0,0,0,0,,0,0,0,,0,166,166,166,166,166,166',
'166,166,166,166,166,,166,166,,,,,166,,166,166,,,166,166,,166,7,166,166',
'166,166,166,166,166,166,166,,166,166,166,,166,7,7,7,7,7,7,7,7,7,7,7',
',7,7,,,,,7,,7,7,,,7,7,,7,397,7,7,7,7,7,7,7,7,7,,7,7,7,,7,397,397,397',
'397,397,397,397,397,397,397,397,,397,397,,,,,397,,397,397,,,397,397',
',397,398,397,397,397,397,397,397,397,397,397,,397,397,397,,397,398,398',
'398,398,398,398,398,398,398,398,398,,398,398,,,,,398,,398,398,,,398',
'398,,398,230,398,398,398,398,398,398,398,398,398,,398,398,398,,398,230',
'230,230,230,230,230,230,230,230,230,230,,230,230,,,,,230,,230,230,,',
'230,230,,230,231,230,230,230,230,230,230,230,230,230,,230,230,230,,230',
'231,231,231,231,231,231,231,231,231,231,231,,231,231,,,,,231,,231,231',
',,231,231,,231,89,231,231,231,231,231,231,231,231,231,,231,231,231,',
'231,89,89,89,89,89,89,89,89,89,89,89,,89,89,,,,,89,,89,89,,,89,89,,89',
'399,89,89,89,89,89,89,89,89,89,,89,89,89,,89,399,399,399,399,399,399',
'399,399,399,399,399,,399,399,,,,,399,,399,399,,,399,399,,399,167,399',
'399,399,399,399,399,399,399,399,,399,399,399,,399,167,167,167,167,167',
'167,167,167,167,167,167,,167,167,,,,,167,,167,167,,,167,167,,167,171',
'167,167,167,167,167,167,167,167,167,,167,167,167,,167,171,171,171,171',
'171,171,171,171,171,171,171,,171,171,,,,,171,,171,171,,,171,171,,171',
'169,171,171,171,171,171,171,171,171,171,,171,171,171,,171,169,169,169',
'169,169,169,169,169,169,169,169,,169,169,,,,,169,,169,169,,,169,169',
',169,236,169,169,169,169,169,169,169,169,169,,169,169,169,,169,236,236',
'236,236,236,236,236,236,236,236,236,,236,236,,,,,236,,236,236,,,236',
'236,,236,170,236,236,236,236,236,236,236,236,236,,236,236,236,,236,170',
'170,170,170,170,170,170,170,170,170,170,,170,170,,,,,170,,170,170,,',
'170,170,,170,149,170,170,170,170,170,170,170,170,170,,170,170,170,,170',
'149,149,149,149,149,149,149,149,149,149,149,,149,149,,,,,149,,149,149',
',,149,149,,149,148,149,149,149,149,149,149,149,149,149,,149,149,149',
',149,148,148,148,148,148,148,148,148,148,148,148,,148,148,,,,,148,,148',
'148,,,148,148,,148,168,148,148,148,148,148,148,148,148,148,,148,148',
'148,,148,168,168,168,168,168,168,168,168,168,168,168,,168,168,,,,,168',
',168,168,,,168,168,,168,232,168,168,168,168,168,168,168,168,168,,168',
'168,168,,168,232,232,232,232,232,232,232,232,232,232,232,,232,232,,',
',,232,,232,232,,,232,232,,232,,232,232,232,232,232,232,232,232,232,390',
'232,232,232,,232,390,390,,,,,,,,,390,390,390,390,390,390,390,238,238',
'238,238,257,257,257,257,238,238,238,,257,257,257,238,,,238,,,,,110,110',
'390,390,,390,390,390,,390,110,110,110,110,110,110,110,,186,186,,,,,',
',,238,186,186,186,186,186,186,186,,,,,,108,108,110,110,,110,110,110',
',110,108,108,108,108,108,108,108,,109,109,186,186,,186,186,186,,186',
'109,109,109,109,109,109,109,,,,,,187,187,108,108,,108,108,108,,108,187',
'187,187,187,187,187,187,,111,111,109,109,,109,109,109,,109,111,111,111',
'111,111,111,111,,,,,,112,112,187,187,,187,187,187,,187,112,112,112,112',
'112,112,112,,113,113,111,111,,111,111,111,,111,113,113,113,113,113,113',
'113,,,,,,185,185,112,112,,112,112,112,,112,185,185,185,185,185,185,185',
',184,184,113,113,,113,113,113,,113,184,184,184,184,184,184,184,,,,,',
'116,116,185,185,,185,185,185,,185,116,116,116,116,116,116,116,,117,117',
'184,184,,184,184,184,,184,117,117,117,117,117,117,117,,,,,,183,183,116',
'116,,116,116,116,,116,183,183,183,183,183,183,183,,225,225,117,117,',
'117,117,117,,117,225,225,225,225,225,225,225,,,,,,182,182,183,183,,183',
'183,183,,183,182,182,182,182,182,182,182,,104,104,225,225,,225,225,225',
',225,104,104,104,104,104,104,104,,,,,,188,188,182,182,,182,182,182,',
'182,188,188,188,188,188,188,188,,252,252,104,104,,104,104,104,,104,252',
'252,252,252,252,252,252,,,,,,250,250,188,188,,188,188,188,,188,250,250',
'250,250,250,250,250,,189,189,252,252,,252,252,252,,252,189,189,189,189',
'189,189,189,,,,,,422,422,250,250,,250,250,250,,250,422,422,422,422,422',
'422,422,,192,192,189,189,,189,189,189,,189,192,192,192,192,192,192,192',
',,,,,193,193,422,422,,422,422,422,,422,193,193,193,193,193,193,193,',
'194,194,192,192,,192,192,192,,192,194,194,194,194,194,194,194,,,,,,195',
'195,193,193,,193,193,193,,193,195,195,195,195,195,195,195,,196,196,194',
'194,,194,194,194,,194,196,196,196,196,196,196,196,,,,,,197,197,195,195',
',195,195,195,,195,197,197,197,197,197,197,197,,338,338,196,196,,196',
'196,196,,196,338,338,338,338,338,338,338,,,,,338,198,198,197,197,,197',
'197,197,,197,198,198,198,198,198,198,198,,199,199,338,338,,338,338,338',
',338,199,199,199,199,199,199,199,,,,,,226,226,198,198,,198,198,198,',
'198,226,226,226,226,226,226,226,,105,105,199,199,,199,199,199,,199,105',
'105,105,105,105,105,105,,,,,,,,226,226,,226,226,226,,226,,,,,,,,,,,105',
'105,,105,105,105,,105,306,306,306,306,307,307,307,307,306,306,306,,307',
'307,307,306,,,306,307,,,307,,358,358,358,358,358,358,358,358,358,358',
'358,,,358,,,,,358,,358,358,306,,358,358,307,358,,,,,,,,,358,358,,,358',
'358,,358,357,357,357,357,357,357,357,357,357,357,357,,,357,,,,,357,',
'357,357,,,357,357,,357,,,,,,,,,357,357,,,357,357,,357,160,160,160,160',
'160,160,160,160,160,160,160,,,160,,,,,160,,160,160,,,160,160,,160,,',
',,,,,,160,160,,,160,160,,160,173,173,173,173,173,173,173,173,173,173',
'173,,,173,,,,,173,,173,173,,,173,173,,173,,,,,,,,,173,173,,173,173,173',
',173,176,176,176,176,176,176,176,176,176,176,176,,,176,,,,,176,,176',
'176,,,176,176,,176,,,,,,,,,176,176,,,176,176,,176,175,175,175,175,175',
'175,175,175,175,175,175,,,175,,,,,175,,175,175,,,175,175,,175,,,,,,',
',,175,175,,,175,175,,175,174,174,174,174,174,174,174,174,174,174,174',
',,174,,,,,174,,174,174,,,174,174,,174,,,,,,,,,174,174,,174,174,174,',
'174,102,102,102,102,102,102,102,102,102,102,102,102,,102,102,27,27,27',
'27,27,27,27,27,27,27,27,27,,27,27,256,256,256,256,237,237,237,237,256',
'256,256,,237,237,237,6,6,6,6,414,414,414,414,6,6,6,,414,414,414,164',
'164,164,164,165,165,165,165,164,164,164,,165,165,165' ]
        racc_action_check = arr = ::Array.new(2734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   797,   459,    94,   nil,   nil,     1,  2701,   885,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -18,   nil,
   nil,   nil,   nil,   608,   nil,   nil,   nil,  2600,   nil,    -8,
   nil,   125,   378,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   383,
   nil,   379,   346,   nil,   nil,   nil,   -32,   355,   324,   280,
   520,   256,   103,   nil,   nil,   279,   344,   367,   nil,   nil,
   nil,   nil,   nil,   nil,   297,   nil,   nil,   nil,   739,  1105,
   271,   268,   218,   191,   183,   182,   432,   nil,   181,   180,
   178,   118,  2585,   nil,  1933,  2253,   227,   139,  1675,  1693,
  1635,  1733,  1755,  1773,   543,   596,  1835,  1853,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   191,   nil,   nil,     3,    91,    83,
   nil,    69,    65,    60,     8,   nil,   nil,    16,  1457,  1413,
   347,    39,   168,   nil,   nil,   nil,   nil,   nil,   179,   241,
  2409,   380,   394,   nil,  2716,  2720,   841,  1193,  1501,  1281,
  1369,  1237,   nil,  2453,  2585,  2541,  2497,   nil,   nil,   nil,
   nil,   nil,  1915,  1875,  1813,  1795,  1653,  1715,  1955,  2013,
   636,   654,  2053,  2075,  2093,  2115,  2133,  2155,  2195,  2213,
   694,   614,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   122,   436,   404,   398,
   nil,   nil,   nil,   nil,   nil,  1893,  2235,   379,   nil,   331,
  1017,  1061,  1545,   nil,   117,    36,  1325,  2690,  1633,    27,
   nil,   nil,   nil,   nil,   nil,   -21,   267,   nil,    98,   nil,
  1995,   nil,  1973,   nil,   nil,   nil,  2686,  1637,   118,   744,
   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   127,   nil,   130,   nil,   nil,   nil,   nil,   nil,   134,
   136,   143,   129,   nil,   382,    90,  2324,  2328,   nil,   nil,
   733,   -11,   nil,   nil,   nil,   -21,   152,   nil,   nil,   185,
   nil,   194,   214,   nil,   192,   -16,   211,   nil,   236,   nil,
    26,   nil,   nil,   222,   nil,   nil,   237,   267,  2173,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   259,   nil,   nil,
   270,   nil,   nil,   nil,   455,   nil,   nil,  2365,  2321,   nil,
   nil,   281,   nil,   255,   292,   nil,   291,   295,   nil,   nil,
   310,   nil,   nil,   -15,   nil,   329,   333,   347,   nil,   nil,
   nil,   352,   353,   326,    80,   346,   -10,   nil,   nil,   nil,
  1595,   nil,   nil,   nil,   nil,   nil,    -6,   929,   973,  1149,
   nil,   nil,    80,   nil,   nil,    -3,   nil,   381,   nil,   382,
   390,   379,   470,   558,  2705,   417,   421,   nil,   nil,   425,
   nil,   -33,  2035,   nil,   416,   nil,   nil,   nil,   443,   nil,
   nil,   nil,   nil,   nil,   444,   nil,   435,   436,   nil,   447,
   nil,   nil,   nil,   nil,   449,   nil ]

racc_action_default = [
  -244,  -244,  -244,    -2,    -3,    -4,    -7,  -244,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -31,
   -32,   -33,   -34,   -35,   -40,   -41,   -42,   -45,   -44,   -63,
   -57,   -63,  -236,   -73,   -74,   -75,   -76,   -84,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -240,  -244,
  -111,  -244,  -244,  -115,  -238,  -238,  -243,  -236,  -236,  -236,
  -244,   -77,   -77,  -156,  -157,   -77,   -77,   -77,  -161,  -163,
  -240,  -167,  -168,  -173,  -244,    -1,  -230,  -231,    -5,    -6,
  -236,  -236,  -236,  -236,  -236,  -236,   -77,   -17,  -236,  -236,
  -236,  -236,   -43,  -188,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,   -50,   -51,
   -52,   -53,   -54,   -63,   -56,   -60,   -64,   -65,   -67,   -79,
   -81,   -82,   -83,   -58,  -243,   -61,  -240,  -244,  -236,  -236,
  -240,  -236,  -236,  -236,  -244,  -240,  -243,  -236,  -244,  -244,
  -244,  -244,   -78,  -154,  -155,  -158,  -159,  -160,  -236,  -236,
  -244,  -236,  -236,   446,    -8,    -9,  -244,  -244,  -244,  -244,
  -244,  -244,   -16,  -244,  -244,  -244,  -244,  -189,  -190,  -228,
  -229,  -191,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -196,  -199,  -202,  -205,  -208,  -211,  -214,  -223,
  -217,  -220,  -226,  -227,   -55,   -80,   -69,   -69,  -244,  -236,
  -237,  -105,  -106,  -107,  -108,  -244,  -244,  -236,  -243,  -118,
  -179,  -244,  -244,  -133,  -236,  -244,  -244,  -136,  -244,  -236,
  -147,  -149,  -240,  -240,  -243,  -244,  -166,   -45,   -63,  -241,
  -243,  -170,  -243,  -175,   -10,   -11,   -12,   -13,   -14,   -15,
   -29,   -35,   -30,   -36,   -38,   -37,   -39,  -192,  -193,  -197,
  -200,  -203,  -206,  -209,  -212,  -215,  -224,  -218,  -221,  -194,
  -195,  -198,  -201,  -204,  -207,  -210,  -213,  -216,  -225,  -219,
  -222,  -236,   -71,  -236,  -242,   -62,   -48,   -49,  -109,  -236,
  -244,  -244,  -122,   -46,  -184,  -180,  -244,  -244,  -243,  -135,
  -244,  -244,  -141,  -142,  -143,  -244,  -244,  -234,  -235,  -244,
  -243,  -236,  -236,  -165,  -244,  -236,  -244,  -176,  -236,  -243,
  -236,  -243,   -59,  -244,  -114,  -116,  -124,  -236,  -120,  -240,
  -240,  -240,  -126,  -128,  -129,  -130,  -131,  -244,  -240,  -240,
  -236,  -241,  -148,  -243,   -77,  -241,  -241,  -244,  -244,  -169,
  -171,  -236,  -174,  -244,  -244,   -70,  -244,  -244,  -112,  -117,
  -236,  -123,   -47,  -244,  -240,  -236,  -236,  -236,  -239,  -239,
  -134,  -236,  -236,  -122,  -244,  -244,  -244,  -162,  -164,  -172,
  -244,   -66,   -72,   -68,  -125,  -240,  -236,  -181,  -182,  -183,
  -240,  -240,  -138,  -137,  -243,  -244,  -150,  -236,  -241,  -236,
  -236,  -244,  -185,  -186,  -187,  -236,  -236,  -240,  -140,  -244,
  -145,  -122,  -244,  -178,  -118,  -121,  -243,  -243,  -236,  -144,
  -240,  -151,  -152,  -153,  -236,  -119,  -244,  -244,  -139,  -236,
  -177,  -127,  -132,  -243,  -244,  -146 ]

racc_goto_table = [
   135,    22,   248,   146,   353,   336,   302,   247,    22,   314,
     6,   264,   266,   133,   153,   154,   103,    97,   155,   156,
   157,   151,   247,   247,   260,   262,   323,   246,   378,   130,
   400,   401,   342,   346,   338,   148,   149,   150,   221,   172,
   261,   261,   291,   293,   263,   265,   142,   143,    46,   228,
   141,   102,   217,   369,   373,    46,   216,   123,   166,   167,
   168,   169,   170,   171,   134,   332,   173,   174,   175,   176,
   130,   130,   130,   330,   215,   130,   130,   130,   379,     5,
   311,   348,   349,   241,   350,   219,   404,   239,    85,    22,
    22,   177,   430,     2,   316,    47,   130,   431,   164,   165,
   158,   159,    47,   215,   249,   214,   225,   226,   250,   433,
   231,   232,   161,   252,   162,   236,   327,   305,     1,   nil,
   nil,   nil,   nil,   130,   432,   nil,   298,   299,   384,   251,
   253,   420,   387,   388,   130,   nil,    46,    46,   nil,    45,
   nil,   nil,   nil,   nil,   395,   nil,    45,   nil,   nil,    22,
    22,   325,   130,   328,   nil,   nil,   nil,   407,   237,   238,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,    22,
    22,    22,    22,   nil,    22,    22,   254,   255,   256,   257,
   258,   259,   nil,    47,    47,   422,   nil,   295,   nil,   nil,
   nil,   nil,   nil,   264,   266,   300,    46,    46,   nil,   248,
   248,   435,   nil,   nil,   247,   247,   nil,   315,    46,   nil,
   nil,   nil,   nil,   nil,    46,    46,    46,    46,    46,    46,
   nil,    46,    46,    46,    46,   296,   296,    45,    45,   nil,
   nil,    22,    22,    22,   nil,   nil,   nil,    22,   nil,   372,
   304,   306,   307,    47,    47,   nil,   310,   nil,   144,   nil,
   296,   nil,   296,   nil,   nil,    47,   nil,   nil,   nil,   137,
   nil,    47,    47,    47,    47,    47,    47,   333,    47,    47,
    47,    47,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,
    46,   160,   nil,   nil,    46,   nil,   229,    45,    45,   357,
   358,   409,   nil,   360,   nil,   nil,   363,   386,   366,    45,
   nil,   nil,   nil,   244,   245,    45,    45,    45,    45,    45,
    45,   nil,    45,    45,    45,    45,   218,   nil,   nil,   nil,
   nil,   nil,   nil,   434,   nil,    47,    47,    47,   235,   389,
   nil,    47,   nil,   nil,   nil,   405,   nil,   220,   296,   418,
   nil,   227,   nil,   397,   398,   399,   234,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   411,   nil,   nil,   nil,   nil,    45,
    45,    45,   nil,   nil,   nil,    45,   nil,   423,   nil,   308,
   nil,   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,
   296,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,
    22,   nil,   440,   nil,   nil,    46,    46,   412,   413,   414,
   301,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   296,   nil,   nil,   nil,   319,   nil,   nil,   nil,
   nil,   nil,   324,   nil,   326,   nil,   329,   nil,   331,   nil,
   nil,   nil,   nil,   317,   318,    46,    46,    46,   nil,   nil,
   nil,   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   371,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   347,   nil,    47,    47,    47,   383,    45,    45,   nil,   nil,
   nil,   nil,   356,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   364,   nil,   367,   nil,   394,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   402,   403,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   385,    45,    45,    45,   nil,
   375,   376,   377,   nil,   nil,   nil,   nil,   nil,   nil,   381,
   382,   nil,   421,   nil,   nil,   424,   nil,   nil,   178,   181,
   426,   427,   202,   203,   204,   205,   206,   207,   208,   210,
   212,   213,   nil,   438,   nil,   396,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   443,   nil,   419,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   410,   nil,   nil,   nil,
   nil,   415,   416,   nil,   nil,   nil,   nil,   nil,   436,   437,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   428,   nil,
   nil,   nil,   nil,   nil,   nil,   444,   nil,   nil,   nil,   nil,
   nil,   439,   nil,   nil,   nil,   nil,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   277,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   289 ]

racc_goto_check = [
     6,    22,    36,    83,    90,    73,    72,    27,    22,    76,
     5,    25,    25,    38,     7,     7,    52,     5,     7,     7,
     7,    45,    27,    27,    19,    19,    88,    23,    80,    32,
    79,    79,    78,    78,    30,     6,     6,     6,    66,     7,
    23,    23,    47,    47,    24,    24,    77,    77,    34,    70,
    71,    28,    50,    74,    75,    34,    49,    37,     6,     6,
     6,     6,     6,     6,    42,    44,     6,     6,     6,     6,
    32,    32,    32,    51,    45,    32,    32,    32,    81,     4,
    84,    76,    76,    85,    86,    45,    73,    87,     3,    22,
    22,    52,    89,     2,    91,    35,    32,    92,     5,     5,
    93,    94,    35,    45,    95,    38,     6,     6,    96,    90,
     6,     6,    97,    98,    99,     6,   100,   101,     1,   nil,
   nil,   nil,   nil,    32,    73,   nil,    31,    31,    88,     6,
     6,    78,    88,    88,    32,   nil,    34,    34,   nil,    33,
   nil,   nil,   nil,   nil,    76,   nil,    33,   nil,   nil,    22,
    22,    31,    32,    31,   nil,   nil,   nil,    76,     5,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,    22,
    22,    22,    22,   nil,    22,    22,     5,     5,     5,     5,
     5,     5,   nil,    35,    35,    88,   nil,     6,   nil,   nil,
   nil,   nil,   nil,    25,    25,     6,    34,    34,   nil,    36,
    36,    72,   nil,   nil,    27,    27,   nil,     6,    34,   nil,
   nil,   nil,   nil,   nil,    34,    34,    34,    34,    34,    34,
   nil,    34,    34,    34,    34,    32,    32,    33,    33,   nil,
   nil,    22,    22,    22,   nil,   nil,   nil,    22,   nil,    31,
     5,     5,     5,    35,    35,   nil,     5,   nil,    43,   nil,
    32,   nil,    32,   nil,   nil,    35,   nil,   nil,   nil,    65,
   nil,    35,    35,    35,    35,    35,    35,     6,    35,    35,
    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,    34,    34,
    34,    65,   nil,   nil,    34,   nil,    48,    33,    33,     6,
     6,    31,   nil,     6,   nil,   nil,     6,     7,     6,    33,
   nil,   nil,   nil,    48,    48,    33,    33,    33,    33,    33,
    33,   nil,    33,    33,    33,    33,    43,   nil,   nil,   nil,
   nil,   nil,   nil,    31,   nil,    35,    35,    35,    43,     6,
   nil,    35,   nil,   nil,   nil,    45,   nil,    65,    32,    83,
   nil,    65,   nil,     6,     6,     6,    65,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,    33,
    33,    33,   nil,   nil,   nil,    33,   nil,     6,   nil,    48,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,
    22,   nil,     6,   nil,   nil,    34,    34,     5,     5,     5,
    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    43,   nil,   nil,   nil,
   nil,   nil,    43,   nil,    43,   nil,    48,   nil,    48,   nil,
   nil,   nil,   nil,    65,    65,    34,    34,    34,   nil,   nil,
   nil,   nil,    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,    35,    35,    35,    48,    33,    33,   nil,   nil,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,   nil,    43,   nil,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    33,    33,    33,   nil,
    65,    65,    65,   nil,   nil,   nil,   nil,   nil,   nil,    65,
    65,   nil,    48,   nil,   nil,    48,   nil,   nil,   102,   102,
    48,    48,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   nil,    48,   nil,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,    43,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,   nil,
   nil,    65,    65,   nil,   nil,   nil,   nil,   nil,    43,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,
   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,    65,   nil,   nil,   nil,   nil,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102 ]

racc_goto_pointer = [
   nil,   118,    93,    86,    79,    10,   -32,   -57,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -149,
   nil,   nil,     1,  -133,  -131,  -164,   nil,  -153,    24,   nil,
  -269,   -99,     0,   139,    48,    95,  -158,    28,   -18,   nil,
   nil,   nil,    32,   182,  -229,   -49,   nil,  -174,   145,   -71,
   -76,  -219,   -11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   201,   -99,   nil,   nil,   nil,
   -92,   -13,  -223,  -297,  -283,  -284,  -229,   -18,  -274,  -348,
  -314,  -268,   nil,   -63,  -157,   -68,  -230,   -63,  -223,  -328,
  -312,  -147,  -324,    22,    22,   -56,   -53,    30,   -49,    31,
  -136,  -113,   454,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,   121,    23,    26,    24,    25,    27,   nil,    28,
   nil,   nil,   179,   119,   120,   122,    29,   152,   124,    30,
    31,    32,   nil,   nil,   nil,   129,   126,   nil,   nil,   nil,
   nil,   nil,   132,    37,    38,    39,    40,    41,    42,    43,
    44,    54,    55,    56,    57,   nil,   nil,    59,    60,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   313,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 90, :_reduce_1,
  1, 90, :_reduce_2,
  1, 90, :_reduce_3,
  1, 91, :_reduce_none,
  2, 91, :_reduce_5,
  2, 91, :_reduce_6,
  1, 93, :_reduce_7,
  3, 93, :_reduce_8,
  3, 93, :_reduce_9,
  4, 94, :_reduce_10,
  4, 94, :_reduce_11,
  4, 94, :_reduce_12,
  4, 94, :_reduce_13,
  4, 94, :_reduce_14,
  4, 94, :_reduce_15,
  3, 94, :_reduce_16,
  2, 94, :_reduce_17,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 97, :_reduce_none,
  4, 107, :_reduce_29,
  4, 107, :_reduce_30,
  1, 107, :_reduce_none,
  1, 108, :_reduce_32,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 110, :_reduce_none,
  4, 110, :_reduce_36,
  4, 110, :_reduce_37,
  4, 112, :_reduce_38,
  4, 112, :_reduce_39,
  1, 112, :_reduce_40,
  1, 112, :_reduce_41,
  1, 109, :_reduce_none,
  2, 109, :_reduce_43,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 119, :_reduce_46,
  2, 119, :_reduce_47,
  1, 120, :_reduce_none,
  1, 120, :_reduce_49,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 113, :_reduce_55,
  2, 118, :_reduce_56,
  1, 118, :_reduce_none,
  2, 128, :_reduce_58,
  5, 129, :_reduce_59,
  2, 130, :_reduce_60,
  1, 131, :_reduce_61,
  3, 131, :_reduce_62,
  0, 127, :_reduce_63,
  1, 127, :_reduce_none,
  0, 138, :_reduce_65,
  6, 135, :_reduce_66,
  0, 139, :_reduce_67,
  6, 135, :_reduce_68,
  0, 136, :_reduce_69,
  3, 136, :_reduce_70,
  0, 140, :_reduce_71,
  3, 140, :_reduce_72,
  1, 125, :_reduce_73,
  1, 125, :_reduce_74,
  1, 125, :_reduce_75,
  1, 125, :_reduce_76,
  0, 96, :_reduce_77,
  1, 96, :_reduce_none,
  1, 126, :_reduce_79,
  2, 126, :_reduce_80,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 142, :_reduce_94,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 152, :_reduce_105,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  4, 105, :_reduce_109,
  1, 156, :_reduce_none,
  1, 115, :_reduce_111,
  6, 157, :_reduce_112,
  1, 158, :_reduce_none,
  5, 106, :_reduce_114,
  0, 160, :_reduce_115,
  5, 147, :_reduce_116,
  4, 159, :_reduce_117,
  0, 161, :_reduce_118,
  7, 161, :_reduce_119,
  0, 164, :_reduce_120,
  4, 164, :_reduce_121,
  0, 162, :_reduce_122,
  2, 162, :_reduce_123,
  0, 163, :_reduce_124,
  2, 163, :_reduce_125,
  0, 169, :_reduce_126,
  11, 145, :_reduce_127,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  0, 170, :_reduce_131,
  11, 146, :_reduce_132,
  3, 143, :_reduce_133,
  6, 143, :_reduce_134,
  4, 143, :_reduce_135,
  0, 173, :_reduce_136,
  7, 171, :_reduce_137,
  6, 172, :_reduce_138,
  9, 172, :_reduce_139,
  7, 172, :_reduce_140,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 175, :_reduce_143,
  9, 144, :_reduce_144,
  0, 178, :_reduce_145,
  13, 149, :_reduce_146,
  1, 176, :_reduce_147,
  3, 176, :_reduce_148,
  0, 180, :_reduce_149,
  7, 148, :_reduce_150,
  5, 179, :_reduce_151,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 98, :_reduce_154,
  2, 99, :_reduce_155,
  1, 100, :_reduce_156,
  1, 101, :_reduce_157,
  2, 102, :_reduce_158,
  2, 103, :_reduce_159,
  2, 104, :_reduce_160,
  0, 182, :_reduce_161,
  6, 122, :_reduce_162,
  0, 183, :_reduce_163,
  6, 123, :_reduce_164,
  4, 111, :_reduce_165,
  1, 184, :_reduce_166,
  1, 153, :_reduce_167,
  0, 186, :_reduce_168,
  5, 150, :_reduce_169,
  1, 185, :_reduce_170,
  3, 185, :_reduce_171,
  4, 185, :_reduce_172,
  0, 188, :_reduce_173,
  5, 151, :_reduce_174,
  1, 187, :_reduce_175,
  2, 187, :_reduce_176,
  7, 189, :_reduce_177,
  5, 189, :_reduce_178,
  1, 137, :_reduce_179,
  2, 137, :_reduce_180,
  5, 137, :_reduce_181,
  5, 137, :_reduce_182,
  5, 137, :_reduce_183,
  1, 190, :_reduce_184,
  5, 190, :_reduce_185,
  5, 190, :_reduce_186,
  5, 190, :_reduce_187,
  1, 117, :_reduce_188,
  2, 117, :_reduce_189,
  2, 141, :_reduce_190,
  2, 141, :_reduce_191,
  3, 141, :_reduce_192,
  3, 141, :_reduce_193,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_196,
  3, 141, :_reduce_197,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_none,
  3, 141, :_reduce_none,
  3, 141, :_reduce_none,
  2, 141, :_reduce_226,
  2, 141, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  2, 174, :_reduce_none,
  2, 174, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_none,
  0, 166, :_reduce_238,
  0, 168, :_reduce_239,
  0, 154, :_reduce_240,
  0, 177, :_reduce_241,
  0, 133, :_reduce_242,
  0, 132, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 446

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :ALIAS => 42,
  :BEGIN => 43,
  :RESCUE => 44,
  :ASSOC => 45,
  :ELSE => 46,
  :ENSURE => 47,
  :WHILE => 48,
  :DO_COND => 49,
  :UNTIL => 50,
  :IF => 51,
  :ELSIF => 52,
  :THEN => 53,
  :UNLESS => 54,
  :FOR => 55,
  :IN => 56,
  :CASE => 57,
  :WHEN => 58,
  :BREAK => 59,
  :NEXT => 60,
  :REDO => 61,
  :Retry => 62,
  :RAISE => 63,
  :RETURN => 64,
  :YIELD => 65,
  "(" => 66,
  :XSTRING_BEG => 67,
  :XSTRING_END => 68,
  "$" => 69,
  :RUBYEXP => 70,
  :LBLACK_A => 71,
  "," => 72,
  :LBRACE_H => 73,
  ">" => 74,
  "<" => 75,
  :FID => 76,
  :REDIR_WORD => 77,
  :GREATER_GREATER => 78,
  :GREATER_BAR => 79,
  :LESS_GREATER => 80,
  :LESS_LESS => 81,
  :LESS_LESS_MINUS => 82,
  :LESS_LESS_LESS => 83,
  :LESS_AND => 84,
  :GREATER_AND => 85,
  "-" => 86,
  :AND_GREATER => 87,
  :AND_GREATER_GREATER => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@3",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@4",
  "@5",
  "if_head",
  "elsif_clause",
  "@6",
  "opt_terms",
  "@7",
  "for_arg",
  "lex_arg",
  "@8",
  "case_body",
  "@9",
  "cases",
  "@10",
  "@11",
  "trivial_command0",
  "array_element_list",
  "@12",
  "hash_element_list",
  "@13",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_30(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_32(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_36(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_40(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_41(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_43(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_46(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_47(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_49(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_55(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_56(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_58(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_59(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_60(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_61(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_62(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_63(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_65(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_66(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_67(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_68(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_69(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_70(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_71(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_72(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_73(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 349)
  def _reduce_77(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_79(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_80(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_94(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_105(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_109(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_111(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_112(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_114(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_115(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 467)
  def _reduce_116(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_117(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 478)
  def _reduce_118(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 482)
  def _reduce_119(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 493)
  def _reduce_120(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 497)
  def _reduce_121(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_122(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_123(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_124(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_125(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 517)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 519)
  def _reduce_127(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.y', 526)
  def _reduce_131(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 528)
  def _reduce_132(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 533)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 537)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 541)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 544)
  def _reduce_136(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 546)
  def _reduce_137(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 550)
  def _reduce_138(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 558)
  def _reduce_140(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.y', 564)
  def _reduce_143(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_144(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 569)
  def _reduce_145(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 571)
  def _reduce_146(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[10])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_147(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 581)
  def _reduce_148(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 585)
  def _reduce_149(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_150(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_151(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.y', 607)
  def _reduce_154(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 612)
  def _reduce_155(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 617)
  def _reduce_156(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_157(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 627)
  def _reduce_158(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 632)
  def _reduce_159(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 637)
  def _reduce_160(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 640)
  def _reduce_161(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_162(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 646)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 648)
  def _reduce_164(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 688)
  def _reduce_165(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 693)
  def _reduce_166(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_167(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 749)
  def _reduce_168(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 751)
  def _reduce_169(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 756)
  def _reduce_170(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 761)
  def _reduce_171(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 766)
  def _reduce_172(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 770)
  def _reduce_173(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 772)
  def _reduce_174(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 777)
  def _reduce_175(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 782)
  def _reduce_176(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 787)
  def _reduce_177(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 792)
  def _reduce_178(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 798)
  def _reduce_179(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 802)
  def _reduce_180(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 806)
  def _reduce_181(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_182(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 815)
  def _reduce_183(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 820)
  def _reduce_184(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 824)
  def _reduce_185(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_186(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 835)
  def _reduce_187(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 841)
  def _reduce_188(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 845)
  def _reduce_189(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 851)
  def _reduce_190(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 856)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 861)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_193(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'parser.y', 873)
  def _reduce_196(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 878)
  def _reduce_197(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

module_eval(<<'.,.,', 'parser.y', 917)
  def _reduce_226(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 922)
  def _reduce_227(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.y', 941)
  def _reduce_238(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 942)
  def _reduce_239(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 944)
  def _reduce_240(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 945)
  def _reduce_241(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_242(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 948)
  def _reduce_243(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
