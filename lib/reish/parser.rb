#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 947)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

      end
      super unless @cmpl_mode

      @cmpl_mode = value_stack
      Reish::Fail ParserComplSupp
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'125,126,239,134,239,238,331,238,346,239,331,337,238,304,338,411,129',
'116,125,126,134,144,348,125,126,134,47,48,49,50,51,52,57,345,96,97,307',
'123,307,129,116,339,123,307,134,125,126,315,359,47,48,49,50,51,52,57',
'355,76,77,134,78,79,80,134,81,102,103,104,105,106,107,108,109,110,111',
'112,113,134,114,115,76,77,134,78,79,80,134,81,102,103,104,105,106,107',
'108,109,110,111,112,113,142,114,115,129,116,-112,144,86,87,239,98,99',
'238,47,48,49,50,51,52,57,333,134,334,335,179,180,129,116,181,182,183',
'184,185,186,187,188,47,48,49,50,51,52,57,298,76,77,134,78,79,80,134',
'81,102,103,104,105,106,107,108,109,110,111,112,113,134,114,115,76,77',
'134,78,79,80,329,81,102,103,104,105,106,107,108,109,110,111,112,113',
'-112,114,115,129,116,316,317,84,85,331,134,134,160,47,48,49,50,51,52',
'57,134,134,134,290,189,190,129,116,191,192,193,194,195,196,197,198,47',
'48,49,50,51,52,57,348,76,77,349,78,79,80,134,81,102,103,104,105,106',
'107,108,109,110,111,112,113,134,114,115,76,77,353,78,79,80,288,81,102',
'103,104,105,106,107,108,109,110,111,112,113,356,114,115,129,116,134',
'288,362,364,134,137,374,134,47,48,49,50,51,52,57,90,91,92,93,136,134',
'129,116,94,88,89,134,134,384,385,386,47,48,49,50,51,52,57,387,76,77',
'134,78,79,80,134,81,102,103,104,105,106,107,108,109,110,111,112,113',
'134,114,115,76,77,134,78,79,80,134,81,102,103,104,105,106,107,108,109',
'110,111,112,113,134,114,115,129,116,134,134,134,400,-109,134,134,134',
'47,48,49,50,51,52,57,90,91,92,93,134,229,129,116,94,88,89,134,236,134',
'134,134,47,48,49,50,51,52,57,419,76,77,134,78,79,80,134,81,102,103,104',
'105,106,107,108,109,110,111,112,113,134,114,115,76,77,134,78,79,80,134',
'81,102,103,104,105,106,107,108,109,110,111,112,113,423,114,115,129,116',
'134,82,298,134,134,435,436,134,47,48,49,50,51,52,57,90,91,92,93,439',
',129,116,94,88,89,,,,,,47,48,49,50,51,52,57,,76,77,,78,79,80,,81,102',
'103,104,105,106,107,108,109,110,111,112,113,,114,115,76,77,,78,79,80',
',81,102,103,104,105,106,107,108,109,110,111,112,113,,114,115,129,116',
',,,,,,,,47,48,49,50,51,52,57,90,91,92,93,,,177,116,94,88,89,,,,,,47',
'48,49,50,51,52,57,,76,77,,78,79,80,,81,102,103,104,105,106,107,108,109',
'110,111,112,113,,114,115,76,77,219,78,79,80,221,81,,,220,177,116,,,',
',,,,286,47,48,49,50,51,52,57,,177,116,,,,,,,,,47,48,49,50,51,52,57,',
',,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,284',
'78,79,80,,81,47,48,49,50,51,52,57,,,,,,206,76,77,,78,79,80,,81,,,,,',
',,,177,116,76,77,208,78,79,80,,81,47,48,49,50,51,52,57,90,91,92,93,',
'274,,,94,88,89,,,,,239,,7,238,,,3,4,,76,77,,78,79,80,,81,,32,33,34,35',
'47,48,49,50,51,52,57,272,61,,,,307,62,,63,65,,,66,67,,68,7,69,70,71',
'72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61',
',,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81',
'32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69',
'70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52',
'57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79',
'80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68',
'7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51',
'52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78',
'79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67',
',68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49',
'50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76',
'77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65',
',,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47',
'48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74',
'75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,',
'63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34',
'35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72',
'73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,',
',,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32',
'33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70',
'71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51,52,57',
',61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78,79,80',
',81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,7',
'69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49,50,51',
'52,57,,61,,,,,62,,63,65,,,66,67,,68,7,69,70,71,72,73,74,75,76,77,,78',
'79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67',
',68,7,69,70,71,72,73,74,75,76,77,,78,79,80,,81,32,33,34,35,47,48,49',
'50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,,69,70,71,72,73,74,75,76,77',
'402,78,79,80,,81,293,116,,,,,,,,,47,48,49,50,51,52,57,90,91,92,93,90',
'91,92,93,94,88,89,,94,88,89,239,,,238,,,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,177,116,,,,,,,,307,47,48,49,50,51,52,57,,,,,177',
'116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80',
',81,47,48,49,50,51,52,57,,,,,177,116,76,77,,78,79,80,,81,47,48,49,50',
'51,52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,177,116,76,77,,78,79,80,,81,47,48,49,50,51',
'52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,293,116,76,77,,78,79,80,,81,47,48,49,50,51',
'52,57,,293,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,177,116,76,77,,78,79,80,,81,47,48,49,50,51',
'52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,293,116,76,77,,78,79,80,,81,47,48,49,50,51',
'52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,293,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,293,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,368,177,116,76,77,,78,79,80,,81,47,48,49,50',
'51,52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,177,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,177,116,76,77,,78,79,80,,81,47,48,49,50,51',
'52,57,,177,116,76,77,,78,79,80,,81,47,48,49,50,51,52,57,,,,,177,116',
'76,77,,78,79,80,,81,47,48,49,50,51,52,57,,293,116,76,77,,78,79,80,,81',
'47,48,49,50,51,52,57,,,,,,,76,77,,78,79,80,,81,,,,,,,,,,,76,77,,78,79',
'80,,81,90,91,92,93,90,91,92,93,94,88,89,,94,88,89,337,,,338,337,,,338',
',32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,339,,66,67,339,68',
',,,,,,,,76,77,,,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62',
',63,65,,,66,67,,68,,,,,,,,,76,77,,,79,80,,81,32,33,34,35,47,48,49,50',
'51,52,57,,61,,,,,62,,63,65,,,66,67,,68,,,,,,,,,76,77,,,79,80,,81,32',
'33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,,,,,,,,',
'76,77,,,79,80,,81,32,33,34,35,47,48,49,50,51,52,57,,61,,,,,62,,63,65',
',,66,67,,68,,,,,,,,,76,77,,,79,80,,81,32,33,34,35,47,48,49,50,51,52',
'57,,61,,,,,62,,63,65,,,66,67,,68,,,,,,,,,76,77,,78,79,80,,81,32,33,34',
'35,47,48,49,50,51,52,57,,61,,,,,62,,63,65,,,66,67,,68,,,,,,,,,76,77',
',78,79,80,,81,102,103,104,105,106,107,108,109,110,111,112,113,,114,115',
'102,103,104,105,106,107,108,109,110,111,112,113,,114,115,-242,-242,-242',
'-242,-242,-242,-242,-242,94,88,89,,94,88,89,90,91,92,93,-242,-242,-242',
'-242,94,88,89,,94,88,89,-242,-242,-242,-242,90,91,92,93,94,88,89,,94',
'88,89,90,91,92,93,,,,,94,88,89' ]
        racc_action_table = arr = ::Array.new(2678, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'121,121,306,320,367,306,377,367,310,380,415,399,380,231,399,396,121',
'121,244,244,90,396,415,28,28,235,121,121,121,121,121,121,121,310,17',
'17,306,244,367,28,28,399,28,380,325,30,30,241,325,28,28,28,28,28,28',
'28,320,121,121,230,121,121,121,92,121,121,121,121,121,121,121,121,121',
'121,121,121,121,89,121,121,28,28,88,28,28,28,93,28,28,28,28,28,28,28',
'28,28,28,28,28,28,64,28,28,73,73,22,64,5,5,148,22,22,148,73,73,73,73',
'73,73,73,300,96,300,300,104,104,132,132,104,104,104,104,104,104,104',
'104,132,132,132,132,132,132,132,225,73,73,97,73,73,73,287,73,73,73,73',
'73,73,73,73,73,73,73,73,73,289,73,73,132,132,295,132,132,132,296,132',
'132,132,132,132,132,132,132,132,132,132,132,132,242,132,132,68,68,242',
'242,2,2,297,98,216,82,68,68,68,68,68,68,68,67,66,65,215,105,105,70,70',
'105,105,105,105,105,105,105,105,70,70,70,70,70,70,70,311,68,68,314,68',
'68,68,316,68,68,68,68,68,68,68,68,68,68,68,68,68,317,68,68,70,70,319',
'70,70,70,214,70,70,70,70,70,70,70,70,70,70,70,70,70,321,70,70,69,69',
'323,213,328,330,331,60,341,344,69,69,69,69,69,69,69,162,162,162,162',
'58,31,74,74,162,162,162,99,355,357,358,360,74,74,74,74,74,74,74,361',
'69,69,364,69,69,69,136,69,69,69,69,69,69,69,69,69,69,69,69,69,369,69',
'69,74,74,370,74,74,74,371,74,74,74,74,74,74,74,74,74,74,74,74,74,375',
'74,74,378,378,376,91,137,379,20,138,390,139,378,378,378,378,378,378',
'378,233,233,233,233,140,141,348,348,233,233,233,144,147,401,403,404',
'348,348,348,348,348,348,348,405,378,378,155,378,378,378,156,378,378',
'378,378,378,378,378,378,378,378,378,378,378,158,378,378,348,348,409',
'348,348,348,410,348,348,348,348,348,348,348,348,348,348,348,348,348',
'413,348,348,149,149,159,1,418,422,428,430,431,433,149,149,149,149,149',
'149,149,299,299,299,299,438,,94,94,299,299,299,,,,,,94,94,94,94,94,94',
'94,,149,149,,149,149,149,,149,149,149,149,149,149,149,149,149,149,149',
'149,149,,149,149,94,94,,94,94,94,,94,94,94,94,94,94,94,94,94,94,94,94',
'94,,94,94,75,75,,,,,,,,,75,75,75,75,75,75,75,6,6,6,6,,,198,198,6,6,6',
',,,,,198,198,198,198,198,198,198,,75,75,,75,75,75,,75,75,75,75,75,75',
'75,75,75,75,75,75,75,,75,75,198,198,135,198,198,198,135,198,,,135,197',
'197,,,,,,,,198,197,197,197,197,197,197,197,,112,112,,,,,,,,,112,112',
'112,112,112,112,112,,,,,113,113,197,197,,197,197,197,,197,113,113,113',
'113,113,113,113,,188,188,112,112,197,112,112,112,,112,188,188,188,188',
'188,188,188,,,,,,112,113,113,,113,113,113,,113,,,,,,,,,187,187,188,188',
'113,188,188,188,,188,187,187,187,187,187,187,187,234,234,234,234,,188',
',,234,234,234,,,,,234,,0,234,,,0,0,,187,187,,187,187,187,,187,,0,0,0',
'0,0,0,0,0,0,0,0,187,0,,,,234,0,,0,0,,,0,0,,0,232,0,0,0,0,0,0,0,0,0,',
'0,0,0,,0,232,232,232,232,232,232,232,232,232,232,232,,232,,,,,232,,232',
'232,,,232,232,,232,168,232,232,232,232,232,232,232,232,232,,232,232',
'232,,232,168,168,168,168,168,168,168,168,168,168,168,,168,,,,,168,,168',
'168,,,168,168,,168,7,168,168,168,168,168,168,168,168,168,,168,168,168',
',168,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,7,,7,7,,,7,7,,7,146,7,7,7,7,7,7,7',
'7,7,,7,7,7,,7,146,146,146,146,146,146,146,146,146,146,146,,146,,,,,146',
',146,146,,,146,146,,146,167,146,146,146,146,146,146,146,146,146,,146',
'146,146,,146,167,167,167,167,167,167,167,167,167,167,167,,167,,,,,167',
',167,167,,,167,167,,167,166,167,167,167,167,167,167,167,167,167,,167',
'167,167,,167,166,166,166,166,166,166,166,166,166,166,166,,166,,,,,166',
',166,166,,,166,166,,166,86,166,166,166,166,166,166,166,166,166,,166',
'166,166,,166,86,86,86,86,86,86,86,86,86,86,86,,86,,,,,86,,86,86,,,86',
'86,,86,87,86,86,86,86,86,86,86,86,86,,86,86,86,,86,87,87,87,87,87,87',
'87,87,87,87,87,,87,,,,,87,,87,87,,,87,87,,87,145,87,87,87,87,87,87,87',
'87,87,,87,87,87,,87,145,145,145,145,145,145,145,145,145,145,145,,145',
',,,,145,,145,145,,,145,145,,145,393,145,145,145,145,145,145,145,145',
'145,,145,145,145,,145,393,393,393,393,393,393,393,393,393,393,393,,393',
',,,,393,,393,393,,,393,393,,393,163,393,393,393,393,393,393,393,393',
'393,,393,393,393,,393,163,163,163,163,163,163,163,163,163,163,163,,163',
',,,,163,,163,163,,,163,163,,163,164,163,163,163,163,163,163,163,163',
'163,,163,163,163,,163,164,164,164,164,164,164,164,164,164,164,164,,164',
',,,,164,,164,164,,,164,164,,164,228,164,164,164,164,164,164,164,164',
'164,,164,164,164,,164,228,228,228,228,228,228,228,228,228,228,228,,228',
',,,,228,,228,228,,,228,228,,228,227,228,228,228,228,228,228,228,228',
'228,,228,228,228,,228,227,227,227,227,227,227,227,227,227,227,227,,227',
',,,,227,,227,227,,,227,227,,227,165,227,227,227,227,227,227,227,227',
'227,,227,227,227,,227,165,165,165,165,165,165,165,165,165,165,165,,165',
',,,,165,,165,165,,,165,165,,165,226,165,165,165,165,165,165,165,165',
'165,,165,165,165,,165,226,226,226,226,226,226,226,226,226,226,226,,226',
',,,,226,,226,226,,,226,226,,226,392,226,226,226,226,226,226,226,226',
'226,,226,226,226,,226,392,392,392,392,392,392,392,392,392,392,392,,392',
',,,,392,,392,392,,,392,392,,392,391,392,392,392,392,392,392,392,392',
'392,,392,392,392,,392,391,391,391,391,391,391,391,391,391,391,391,,391',
',,,,391,,391,391,,,391,391,,391,,391,391,391,391,391,391,391,391,391',
'384,391,391,391,,391,384,384,,,,,,,,,384,384,384,384,384,384,384,305',
'305,305,305,161,161,161,161,305,305,305,,161,161,161,305,,,305,,,,108',
'108,384,384,,384,384,384,,384,108,108,108,108,108,108,108,,195,195,',
',,,,,,305,195,195,195,195,195,195,195,,,,,106,106,108,108,,108,108,108',
',108,106,106,106,106,106,106,106,,107,107,195,195,,195,195,195,,195',
'107,107,107,107,107,107,107,,,,,196,196,106,106,,106,106,106,,106,196',
'196,196,196,196,196,196,,109,109,107,107,,107,107,107,,107,109,109,109',
'109,109,109,109,,,,,110,110,196,196,,196,196,196,,196,110,110,110,110',
'110,110,110,,111,111,109,109,,109,109,109,,109,111,111,111,111,111,111',
'111,,,,,103,103,110,110,,110,110,110,,110,103,103,103,103,103,103,103',
',102,102,111,111,,111,111,111,,111,102,102,102,102,102,102,102,,,,,114',
'114,103,103,,103,103,103,,103,114,114,114,114,114,114,114,,115,115,102',
'102,,102,102,102,,102,115,115,115,115,115,115,115,,,,,222,222,114,114',
',114,114,114,,114,222,222,222,222,222,222,222,,223,223,115,115,,115',
'115,115,,115,223,223,223,223,223,223,223,,,,,194,194,222,222,,222,222',
'222,,222,194,194,194,194,194,194,194,,193,193,223,223,,223,223,223,',
'223,193,193,193,193,193,193,193,,,,,192,192,194,194,,194,194,194,,194',
'192,192,192,192,192,192,192,,191,191,193,193,,193,193,193,,193,191,191',
'191,191,191,191,191,,,,,190,190,192,192,,192,192,192,,192,190,190,190',
'190,190,190,190,,189,189,191,191,,191,191,191,,191,189,189,189,189,189',
'189,189,,,,,246,246,190,190,,190,190,190,,190,246,246,246,246,246,246',
'246,,179,179,189,189,,189,189,189,,189,179,179,179,179,179,179,179,',
',,,248,248,246,246,,246,246,246,,246,248,248,248,248,248,248,248,,332',
'332,179,179,,179,179,179,,179,332,332,332,332,332,332,332,,,,332,186',
'186,248,248,,248,248,248,,248,186,186,186,186,186,186,186,,185,185,332',
'332,,332,332,332,,332,185,185,185,185,185,185,185,,,,,181,181,186,186',
',186,186,186,,186,181,181,181,181,181,181,181,,184,184,185,185,,185',
'185,185,,185,184,184,184,184,184,184,184,,,,,183,183,181,181,,181,181',
'181,,181,183,183,183,183,183,183,183,,180,180,184,184,,184,184,184,',
'184,180,180,180,180,180,180,180,,,,,182,182,183,183,,183,183,183,,183',
'182,182,182,182,182,182,182,,416,416,180,180,,180,180,180,,180,416,416',
'416,416,416,416,416,,,,,,,182,182,,182,182,182,,182,,,,,,,,,,,416,416',
',416,416,416,,416,301,301,301,301,302,302,302,302,301,301,301,,302,302',
'302,301,,,301,302,,,302,,157,157,157,157,157,157,157,157,157,157,157',
',157,,,,,157,,157,157,301,,157,157,302,157,,,,,,,,,157,157,,,157,157',
',157,172,172,172,172,172,172,172,172,172,172,172,,172,,,,,172,,172,172',
',,172,172,,172,,,,,,,,,172,172,,,172,172,,172,352,352,352,352,352,352',
'352,352,352,352,352,,352,,,,,352,,352,352,,,352,352,,352,,,,,,,,,352',
'352,,,352,352,,352,173,173,173,173,173,173,173,173,173,173,173,,173',
',,,,173,,173,173,,,173,173,,173,,,,,,,,,173,173,,,173,173,,173,351,351',
'351,351,351,351,351,351,351,351,351,,351,,,,,351,,351,351,,,351,351',
',351,,,,,,,,,351,351,,,351,351,,351,171,171,171,171,171,171,171,171',
'171,171,171,,171,,,,,171,,171,171,,,171,171,,171,,,,,,,,,171,171,,171',
'171,171,,171,170,170,170,170,170,170,170,170,170,170,170,,170,,,,,170',
',170,170,,,170,170,,170,,,,,,,,,170,170,,170,170,170,,170,26,26,26,26',
'26,26,26,26,26,26,26,26,,26,26,100,100,100,100,100,100,100,100,100,100',
'100,100,,100,100,254,254,254,254,252,252,252,252,254,254,254,,252,252',
'252,408,408,408,408,255,255,255,255,408,408,408,,255,255,255,253,253',
'253,253,407,407,407,407,253,253,253,,407,407,407,406,406,406,406,,,',
',406,406,406' ]
        racc_action_check = arr = ::Array.new(2678, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   729,   454,   176,   nil,   nil,    87,   552,   858,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   363,   nil,    95,   nil,   nil,   nil,  2519,   nil,    15,   nil,
    37,   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   291,   nil,
   274,   nil,   nil,   nil,    55,   191,   190,   189,   166,   253,
   189,   nil,   nil,    79,   276,   514,   nil,   nil,   nil,   nil,
   nil,   nil,   199,   nil,   nil,   nil,  1030,  1073,    64,    59,
     2,   349,    45,    68,   450,   nil,   103,   128,   179,   287,
  2534,   nil,  1765,  1747,    51,   138,  1630,  1648,  1591,  1687,
  1708,  1726,   607,   628,  1786,  1804,   nil,   nil,   nil,   nil,
   nil,    -8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   102,   nil,   nil,   574,   306,   350,   353,   355,
   367,   358,   nil,   nil,   374,  1116,   901,   363,    91,   427,
   nil,   nil,   nil,   nil,   nil,   389,   393,  2261,   407,   435,
   nil,  1594,   291,  1202,  1245,  1374,   987,   944,   815,   nil,
  2519,  2476,  2304,  2390,   nil,   nil,   nil,   nil,   nil,  1999,
  2155,  2098,  2176,  2137,  2116,  2077,  2059,   685,   646,  1960,
  1942,  1921,  1903,  1882,  1864,  1609,  1669,   589,   537,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   258,   238,   184,   180,   nil,   nil,   nil,
   nil,   nil,  1825,  1843,   nil,   100,  1417,  1331,  1288,   nil,
    41,   -15,   772,   378,   723,     7,   nil,   nil,   nil,   nil,
   nil,   -20,   177,   nil,    10,   nil,  1981,   nil,  2020,   nil,
   nil,   nil,  2623,  2649,  2619,  2638,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   151,   145,   151,   nil,   465,
   102,  2264,  2268,   nil,   nil,  1590,   -16,   nil,   nil,   nil,
   -22,   173,   nil,   nil,   207,   nil,   219,   233,   nil,   215,
   -15,   245,   nil,   261,   nil,    26,   nil,   nil,   240,   nil,
   236,   265,  2038,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   257,   nil,   nil,   268,   nil,   nil,   nil,   363,   nil,
   nil,  2433,  2347,   nil,   nil,   288,   nil,   263,   280,   nil,
   279,   288,   nil,   nil,   302,   nil,   nil,   -14,   nil,   320,
   325,   329,   nil,   nil,   nil,   343,   348,   -39,   340,   341,
    -9,   nil,   nil,   nil,  1552,   nil,   nil,   nil,   nil,   nil,
   354,  1503,  1460,  1159,   nil,   nil,   -30,   nil,   nil,    -7,
   nil,   376,   nil,   377,   378,   374,  2664,  2653,  2634,   412,
   416,   nil,   nil,   420,   nil,   -35,  2194,   nil,   412,   nil,
   nil,   nil,   438,   nil,   nil,   nil,   nil,   nil,   439,   nil,
   430,   431,   nil,   442,   nil,   nil,   nil,   nil,   444,   nil ]

racc_action_default = [
  -242,  -242,  -242,    -2,    -3,    -4,    -7,  -242,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,
   -32,   -33,   -34,   -39,   -40,   -41,   -44,   -43,   -62,   -56,
   -62,  -234,   -72,   -73,   -74,   -75,   -83,   -84,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -238,  -242,  -110,
  -242,  -113,  -236,  -236,  -241,  -234,  -234,  -234,  -242,   -76,
   -76,  -154,  -155,   -76,   -76,   -76,  -159,  -161,  -238,  -165,
  -166,  -171,  -242,    -1,  -228,  -229,    -5,    -6,  -234,  -234,
  -234,  -234,  -234,  -234,   -76,   -17,  -234,  -234,  -234,  -234,
   -42,  -186,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,   -49,   -50,   -51,   -52,
   -53,   -62,   -55,   -59,   -63,   -64,   -66,   -78,   -80,   -81,
   -82,   -57,  -241,   -60,  -238,  -242,  -234,  -234,  -234,  -234,
  -234,  -242,  -238,  -241,  -234,  -242,  -242,  -242,  -242,   -77,
  -152,  -153,  -156,  -157,  -158,  -234,  -234,  -242,  -234,  -234,
   440,    -8,    -9,  -242,  -242,  -242,  -242,  -242,  -242,   -16,
  -242,  -242,  -242,  -242,  -187,  -188,  -226,  -227,  -189,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -194,
  -197,  -200,  -203,  -206,  -209,  -212,  -221,  -215,  -218,  -224,
  -225,   -54,   -79,   -68,   -68,  -242,  -234,  -235,  -104,  -105,
  -106,  -107,  -242,  -242,  -241,  -116,  -177,  -242,  -242,  -131,
  -234,  -242,  -242,  -134,  -242,  -234,  -145,  -147,  -238,  -238,
  -241,  -242,  -164,   -44,   -62,  -239,  -241,  -168,  -241,  -173,
   -10,   -11,   -12,   -13,   -14,   -15,   -28,   -32,   -29,   -35,
   -37,   -36,   -38,  -190,  -191,  -195,  -198,  -201,  -204,  -207,
  -210,  -213,  -222,  -216,  -219,  -192,  -193,  -196,  -199,  -202,
  -205,  -208,  -211,  -214,  -223,  -217,  -220,  -234,   -70,  -234,
  -240,   -61,   -47,   -48,  -108,  -234,  -242,  -120,   -45,  -182,
  -178,  -242,  -242,  -241,  -133,  -242,  -242,  -139,  -140,  -141,
  -242,  -242,  -232,  -233,  -242,  -241,  -234,  -234,  -163,  -242,
  -234,  -242,  -174,  -234,  -241,  -234,  -241,   -58,  -242,  -114,
  -122,  -234,  -118,  -238,  -238,  -238,  -124,  -126,  -127,  -128,
  -129,  -242,  -238,  -238,  -234,  -239,  -146,  -241,   -76,  -239,
  -239,  -242,  -242,  -167,  -169,  -234,  -172,  -242,  -242,   -69,
  -242,  -242,  -111,  -115,  -234,  -121,   -46,  -242,  -238,  -234,
  -234,  -234,  -237,  -237,  -132,  -234,  -234,  -120,  -242,  -242,
  -242,  -160,  -162,  -170,  -242,   -65,   -71,   -67,  -123,  -238,
  -234,  -179,  -180,  -181,  -238,  -238,  -136,  -135,  -241,  -242,
  -148,  -234,  -239,  -234,  -234,  -242,  -183,  -184,  -185,  -234,
  -234,  -238,  -138,  -242,  -143,  -120,  -242,  -176,  -116,  -119,
  -241,  -241,  -234,  -142,  -238,  -149,  -150,  -151,  -234,  -117,
  -242,  -242,  -137,  -234,  -175,  -125,  -130,  -241,  -242,  -144 ]

racc_goto_table = [
   133,    46,   101,   143,   260,   262,   297,   347,    46,   131,
   148,   309,   372,   330,   150,   151,   336,   340,   152,   153,
   154,   244,   256,   258,   139,   140,   243,   214,   294,   295,
    45,   394,   395,   100,   145,   146,   147,    45,   218,   169,
   224,   243,   243,     6,   257,   257,   259,   261,   318,   138,
    95,   213,   320,   242,   323,   287,   289,   163,   164,   165,
   166,   167,   168,   212,   363,   170,   171,   172,   173,   367,
   332,   121,   327,    44,   216,   132,   174,   325,   373,     5,
    44,   306,   342,   343,   237,   344,   235,    46,    46,    83,
   424,   212,     2,   398,   311,   425,   155,   156,   245,   246,
   211,   135,   158,   248,   159,   222,   223,   322,   227,   228,
   300,   427,     1,   232,   414,   nil,    45,    45,   nil,   nil,
   nil,   nil,   157,   nil,   nil,   nil,   nil,   247,   249,   161,
   162,   426,   nil,   nil,   nil,   nil,   nil,   nil,   366,   nil,
   nil,   nil,   nil,   nil,   389,   nil,    46,    46,   378,   nil,
   nil,   nil,   381,   382,   nil,   nil,   nil,   401,    46,    44,
    44,   nil,   nil,    21,    46,    46,    46,    46,    46,    46,
    21,    46,    46,    46,    46,    45,    45,   nil,   217,   nil,
   nil,   nil,   nil,   260,   262,   291,   230,    45,   233,   234,
   403,   nil,   nil,    45,    45,    45,    45,    45,    45,   429,
    45,    45,    45,    45,   310,   416,   250,   251,   252,   253,
   254,   255,   nil,   nil,   nil,   244,   244,   nil,    44,    44,
   243,   243,   428,   141,   nil,   nil,   nil,    46,    46,    46,
    44,   nil,   nil,    46,   nil,   nil,    44,    44,    44,    44,
    44,    44,   nil,    44,    44,    44,    44,   nil,   nil,    21,
    21,   nil,   nil,   nil,   nil,   225,    45,    45,    45,   nil,
   nil,   nil,    45,   nil,   328,   nil,   nil,   nil,   nil,   299,
   301,   302,   240,   241,   nil,   305,   nil,   nil,   nil,   nil,
   nil,   nil,   312,   313,   nil,   351,   352,   nil,   nil,   354,
   nil,   215,   357,   380,   360,   nil,   nil,   nil,   nil,    44,
    44,    44,   231,   nil,   nil,    44,   nil,   nil,    21,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   399,   nil,   128,   nil,   383,   nil,    21,    21,    21,    21,
    21,    21,   nil,    21,    21,   412,   nil,   nil,   391,   392,
   393,   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   nil,
   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,   nil,   405,
   nil,   nil,   128,   128,   128,   nil,   nil,   128,   128,   128,
   nil,   nil,   417,   nil,   nil,   nil,   nil,   369,   370,   371,
   nil,    45,    45,   296,   nil,   nil,   375,   376,   128,    21,
    21,    21,    46,    46,    46,    21,   nil,   434,   nil,   314,
   nil,   nil,   nil,   nil,   324,   319,   326,   321,   nil,   nil,
   nil,   nil,   390,   nil,   nil,   128,   nil,   nil,   nil,   nil,
   nil,    45,    45,    45,    44,    44,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   404,   406,   407,   408,   nil,   409,   410,
   nil,   nil,   nil,   128,   nil,   nil,   nil,   nil,   365,   nil,
   nil,   nil,   nil,   nil,   nil,   422,   nil,   nil,   nil,   nil,
   nil,   377,   341,   nil,    44,    44,    44,   nil,   433,   nil,
   nil,   nil,   nil,   nil,   350,   nil,   nil,   nil,   nil,   nil,
   nil,   388,   nil,   358,   nil,   361,   nil,   nil,   nil,   nil,
   nil,   nil,   396,   397,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   379,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   292,   292,   415,   nil,
   nil,   418,   nil,   nil,   175,   178,   420,   421,   199,   200,
   201,   202,   203,   204,   205,   207,   209,   210,   nil,   432,
   292,   nil,   292,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   437,   nil,   nil,   nil,    21,    21,    21,   413,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   430,
   431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   438,   nil,   nil,   nil,
   nil,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   273,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   285,   nil,   nil,   nil,   nil,   nil,   292,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   128,   nil,   nil,   nil,   nil,   nil,   292,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   292 ]

racc_goto_check = [
     6,    34,    51,    82,    24,    24,    71,    89,    34,    37,
    44,    75,    79,    72,     7,     7,    77,    77,     7,     7,
     7,    35,    18,    18,    76,    76,    26,    49,    30,    30,
    33,    78,    78,    27,     6,     6,     6,    33,    65,     7,
    69,    26,    26,     5,    20,    20,    23,    23,    87,    70,
     5,    48,    30,    22,    30,    46,    46,     6,     6,     6,
     6,     6,     6,    44,    73,     6,     6,     6,     6,    74,
    29,    36,    43,    32,    44,    41,    51,    50,    80,     4,
    32,    83,    75,    75,    84,    85,    86,    34,    34,     3,
    88,    44,     2,    72,    90,    91,    92,    93,    94,    95,
    37,    64,    96,    97,    98,     6,     6,    99,     6,     6,
   100,    89,     1,     6,    77,   nil,    33,    33,   nil,   nil,
   nil,   nil,    64,   nil,   nil,   nil,   nil,     6,     6,     5,
     5,    72,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    75,   nil,    34,    34,    87,   nil,
   nil,   nil,    87,    87,   nil,   nil,   nil,    75,    34,    32,
    32,   nil,   nil,    21,    34,    34,    34,    34,    34,    34,
    21,    34,    34,    34,    34,    33,    33,   nil,    64,   nil,
   nil,   nil,   nil,    24,    24,     6,    64,    33,     5,     5,
    30,   nil,   nil,    33,    33,    33,    33,    33,    33,    71,
    33,    33,    33,    33,     6,    87,     5,     5,     5,     5,
     5,     5,   nil,   nil,   nil,    35,    35,   nil,    32,    32,
    26,    26,    30,    42,   nil,   nil,   nil,    34,    34,    34,
    32,   nil,   nil,    34,   nil,   nil,    32,    32,    32,    32,
    32,    32,   nil,    32,    32,    32,    32,   nil,   nil,    21,
    21,   nil,   nil,   nil,   nil,    47,    33,    33,    33,   nil,
   nil,   nil,    33,   nil,     6,   nil,   nil,   nil,   nil,     5,
     5,     5,    47,    47,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,    64,    64,   nil,     6,     6,   nil,   nil,     6,
   nil,    42,     6,     7,     6,   nil,   nil,   nil,   nil,    32,
    32,    32,    42,   nil,   nil,    32,   nil,   nil,    21,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,    31,   nil,     6,   nil,    21,    21,    21,    21,
    21,    21,   nil,    21,    21,    82,   nil,   nil,     6,     6,
     6,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,    34,    34,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,    31,    31,    31,   nil,   nil,    31,    31,    31,
   nil,   nil,     6,   nil,   nil,   nil,   nil,    64,    64,    64,
   nil,    33,    33,    42,   nil,   nil,    64,    64,    31,    21,
    21,    21,    34,    34,    34,    21,   nil,     6,   nil,    42,
   nil,   nil,   nil,   nil,    47,    42,    47,    42,   nil,   nil,
   nil,   nil,    64,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,    33,    33,    33,    32,    32,    31,   nil,   nil,   nil,
   nil,   nil,   nil,    64,     5,     5,     5,   nil,    64,    64,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,    64,   nil,   nil,   nil,   nil,
   nil,    47,    42,   nil,    32,    32,    32,   nil,    64,   nil,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,    42,   nil,    42,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,    31,    47,   nil,
   nil,    47,   nil,   nil,   101,   101,    47,    47,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   nil,    47,
    31,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,    21,    21,    21,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,
   nil,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    31 ]

racc_goto_pointer = [
   nil,   112,    92,    87,    79,    43,   -31,   -55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -148,   nil,
  -126,   163,  -104,  -126,  -168,   nil,  -131,     7,   nil,  -228,
  -194,   294,    73,    30,     1,  -136,    43,   -21,   nil,   nil,
   nil,    44,   159,  -218,   -58,   nil,  -158,   117,   -74,   -99,
  -211,   -24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   -97,   nil,   nil,   nil,   -98,
   -12,  -219,  -284,  -266,  -263,  -223,   -38,  -285,  -341,  -324,
  -262,   nil,   -61,  -152,   -64,  -224,   -61,  -197,  -324,  -304,
  -143,  -320,    20,    20,   -59,   -59,    22,   -56,    23,  -141,
  -116,   422,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   226,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   119,    22,    25,    23,    24,    26,   nil,    27,   nil,
   nil,   176,   117,   118,   120,    28,   149,   122,    29,    30,
    31,   nil,   nil,   nil,   127,   124,   nil,   nil,   nil,   nil,
   nil,   130,    36,    37,    38,    39,    40,    41,    42,    43,
    53,    54,    55,    56,   nil,   nil,    58,    59,    60,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    64,   nil,   nil,   308,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 89, :_reduce_2,
  1, 89, :_reduce_3,
  1, 90, :_reduce_none,
  2, 90, :_reduce_5,
  2, 90, :_reduce_6,
  1, 92, :_reduce_7,
  3, 92, :_reduce_8,
  3, 92, :_reduce_9,
  4, 93, :_reduce_10,
  4, 93, :_reduce_11,
  4, 93, :_reduce_12,
  4, 93, :_reduce_13,
  4, 93, :_reduce_14,
  4, 93, :_reduce_15,
  3, 93, :_reduce_16,
  2, 93, :_reduce_17,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 96, :_reduce_none,
  4, 105, :_reduce_28,
  4, 105, :_reduce_29,
  1, 105, :_reduce_none,
  1, 106, :_reduce_31,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 108, :_reduce_none,
  4, 108, :_reduce_35,
  4, 108, :_reduce_36,
  4, 110, :_reduce_37,
  4, 110, :_reduce_38,
  1, 110, :_reduce_39,
  1, 110, :_reduce_40,
  1, 107, :_reduce_none,
  2, 107, :_reduce_42,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  0, 117, :_reduce_45,
  2, 117, :_reduce_46,
  1, 118, :_reduce_none,
  1, 118, :_reduce_48,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  3, 111, :_reduce_54,
  2, 116, :_reduce_55,
  1, 116, :_reduce_none,
  2, 126, :_reduce_57,
  5, 127, :_reduce_58,
  2, 128, :_reduce_59,
  1, 129, :_reduce_60,
  3, 129, :_reduce_61,
  0, 125, :_reduce_62,
  1, 125, :_reduce_none,
  0, 136, :_reduce_64,
  6, 133, :_reduce_65,
  0, 137, :_reduce_66,
  6, 133, :_reduce_67,
  0, 134, :_reduce_68,
  3, 134, :_reduce_69,
  0, 138, :_reduce_70,
  3, 138, :_reduce_71,
  1, 123, :_reduce_72,
  1, 123, :_reduce_73,
  1, 123, :_reduce_74,
  1, 123, :_reduce_75,
  0, 95, :_reduce_76,
  1, 95, :_reduce_none,
  1, 124, :_reduce_78,
  2, 124, :_reduce_79,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 140, :_reduce_93,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 150, :_reduce_104,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  4, 104, :_reduce_108,
  1, 154, :_reduce_none,
  1, 113, :_reduce_110,
  6, 155, :_reduce_111,
  1, 156, :_reduce_none,
  0, 158, :_reduce_113,
  5, 145, :_reduce_114,
  4, 157, :_reduce_115,
  0, 159, :_reduce_116,
  7, 159, :_reduce_117,
  0, 162, :_reduce_118,
  4, 162, :_reduce_119,
  0, 160, :_reduce_120,
  2, 160, :_reduce_121,
  0, 161, :_reduce_122,
  2, 161, :_reduce_123,
  0, 167, :_reduce_124,
  11, 143, :_reduce_125,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 168, :_reduce_129,
  11, 144, :_reduce_130,
  3, 141, :_reduce_131,
  6, 141, :_reduce_132,
  4, 141, :_reduce_133,
  0, 171, :_reduce_134,
  7, 169, :_reduce_135,
  6, 170, :_reduce_136,
  9, 170, :_reduce_137,
  7, 170, :_reduce_138,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  0, 173, :_reduce_141,
  9, 142, :_reduce_142,
  0, 176, :_reduce_143,
  13, 147, :_reduce_144,
  1, 174, :_reduce_145,
  3, 174, :_reduce_146,
  0, 178, :_reduce_147,
  7, 146, :_reduce_148,
  5, 177, :_reduce_149,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 97, :_reduce_152,
  2, 98, :_reduce_153,
  1, 99, :_reduce_154,
  1, 100, :_reduce_155,
  2, 101, :_reduce_156,
  2, 102, :_reduce_157,
  2, 103, :_reduce_158,
  0, 180, :_reduce_159,
  6, 120, :_reduce_160,
  0, 181, :_reduce_161,
  6, 121, :_reduce_162,
  4, 109, :_reduce_163,
  1, 182, :_reduce_164,
  1, 151, :_reduce_165,
  0, 184, :_reduce_166,
  5, 148, :_reduce_167,
  1, 183, :_reduce_168,
  3, 183, :_reduce_169,
  4, 183, :_reduce_170,
  0, 186, :_reduce_171,
  5, 149, :_reduce_172,
  1, 185, :_reduce_173,
  2, 185, :_reduce_174,
  7, 187, :_reduce_175,
  5, 187, :_reduce_176,
  1, 135, :_reduce_177,
  2, 135, :_reduce_178,
  5, 135, :_reduce_179,
  5, 135, :_reduce_180,
  5, 135, :_reduce_181,
  1, 188, :_reduce_182,
  5, 188, :_reduce_183,
  5, 188, :_reduce_184,
  5, 188, :_reduce_185,
  1, 115, :_reduce_186,
  2, 115, :_reduce_187,
  2, 139, :_reduce_188,
  2, 139, :_reduce_189,
  3, 139, :_reduce_190,
  3, 139, :_reduce_191,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_194,
  3, 139, :_reduce_195,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_none,
  3, 139, :_reduce_none,
  3, 139, :_reduce_none,
  2, 139, :_reduce_224,
  2, 139, :_reduce_225,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 190, :_reduce_none,
  2, 190, :_reduce_none,
  2, 172, :_reduce_none,
  2, 172, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_none,
  0, 164, :_reduce_236,
  0, 166, :_reduce_237,
  0, 152, :_reduce_238,
  0, 175, :_reduce_239,
  0, 131, :_reduce_240,
  0, 130, :_reduce_241 ]

racc_reduce_n = 242

racc_shift_n = 440

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :BEGIN => 42,
  :RESCUE => 43,
  :ASSOC => 44,
  :ELSE => 45,
  :ENSURE => 46,
  :WHILE => 47,
  :DO_COND => 48,
  :UNTIL => 49,
  :IF => 50,
  :ELSIF => 51,
  :THEN => 52,
  :UNLESS => 53,
  :FOR => 54,
  :IN => 55,
  :CASE => 56,
  :WHEN => 57,
  :BREAK => 58,
  :NEXT => 59,
  :REDO => 60,
  :Retry => 61,
  :RAISE => 62,
  :RETURN => 63,
  :YIELD => 64,
  "(" => 65,
  :XSTRING_BEG => 66,
  :XSTRING_END => 67,
  "$" => 68,
  :RUBYEXP => 69,
  :LBLACK_A => 70,
  "," => 71,
  :LBRACE_H => 72,
  ">" => 73,
  "<" => 74,
  :FID => 75,
  :REDIR_WORD => 76,
  :GREATER_GREATER => 77,
  :GREATER_BAR => 78,
  :LESS_GREATER => 79,
  :LESS_LESS => 80,
  :LESS_LESS_MINUS => 81,
  :LESS_LESS_LESS => 82,
  :LESS_AND => 83,
  :GREATER_AND => 84,
  "-" => 85,
  :AND_GREATER => 86,
  :AND_GREATER_GREATER => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@3",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@4",
  "@5",
  "if_head",
  "elsif_clause",
  "@6",
  "opt_terms",
  "@7",
  "for_arg",
  "lex_arg",
  "@8",
  "case_body",
  "@9",
  "cases",
  "@10",
  "@11",
  "trivial_command0",
  "array_element_list",
  "@12",
  "hash_element_list",
  "@13",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_28(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_31(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_35(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_36(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_39(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_40(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_42(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_45(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_46(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_48(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_54(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_55(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 246)
  def _reduce_57(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_58(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_59(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_60(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_61(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_62(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_64(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_65(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_66(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_67(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_68(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_69(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_70(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_71(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_72(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_73(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_76(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_78(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_79(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_93(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_104(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.y', 410)
  def _reduce_108(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_110(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 434)
  def _reduce_111(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 453)
  def _reduce_113(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 455)
  def _reduce_114(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 461)
  def _reduce_115(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 466)
  def _reduce_116(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_117(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 481)
  def _reduce_118(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 485)
  def _reduce_119(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 489)
  def _reduce_120(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 494)
  def _reduce_121(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 498)
  def _reduce_122(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 502)
  def _reduce_123(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 505)
  def _reduce_124(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 507)
  def _reduce_125(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_129(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 516)
  def _reduce_130(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_131(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_132(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 529)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 532)
  def _reduce_134(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 534)
  def _reduce_135(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 538)
  def _reduce_136(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 542)
  def _reduce_137(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 546)
  def _reduce_138(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.y', 552)
  def _reduce_141(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_142(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 557)
  def _reduce_143(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 559)
  def _reduce_144(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[10])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 564)
  def _reduce_145(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 569)
  def _reduce_146(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 573)
  def _reduce_147(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 575)
  def _reduce_148(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 580)
  def _reduce_149(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.y', 595)
  def _reduce_152(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 600)
  def _reduce_153(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 605)
  def _reduce_154(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 610)
  def _reduce_155(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_156(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 620)
  def _reduce_157(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 625)
  def _reduce_158(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 628)
  def _reduce_159(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 631)
  def _reduce_160(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 634)
  def _reduce_161(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 636)
  def _reduce_162(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 676)
  def _reduce_163(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 681)
  def _reduce_164(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 734)
  def _reduce_165(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 737)
  def _reduce_166(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 739)
  def _reduce_167(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 744)
  def _reduce_168(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 749)
  def _reduce_169(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 754)
  def _reduce_170(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 758)
  def _reduce_171(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 760)
  def _reduce_172(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 765)
  def _reduce_173(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 770)
  def _reduce_174(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 775)
  def _reduce_175(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 780)
  def _reduce_176(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 786)
  def _reduce_177(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 790)
  def _reduce_178(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 794)
  def _reduce_179(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 798)
  def _reduce_180(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 803)
  def _reduce_181(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 808)
  def _reduce_182(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 812)
  def _reduce_183(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 817)
  def _reduce_184(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 823)
  def _reduce_185(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_186(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 833)
  def _reduce_187(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 839)
  def _reduce_188(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 844)
  def _reduce_189(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 849)
  def _reduce_190(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 854)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

module_eval(<<'.,.,', 'parser.y', 861)
  def _reduce_194(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_195(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'parser.y', 905)
  def _reduce_224(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 910)
  def _reduce_225(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'parser.y', 929)
  def _reduce_236(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 930)
  def _reduce_237(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 932)
  def _reduce_238(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 933)
  def _reduce_239(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 934)
  def _reduce_240(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 936)
  def _reduce_241(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
