#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 959)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

      end
      super unless @cmpl_mode

      @cmpl_mode = value_stack
      Reish::Fail ParserComplSupp
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'126,127,135,381,329,238,238,330,237,237,338,87,88,220,143,340,130,117',
'222,124,145,135,221,126,127,126,127,48,49,50,51,52,53,58,135,300,331',
'337,354,130,117,303,303,393,124,342,135,343,344,145,48,49,50,51,52,53',
'58,350,238,77,78,237,79,80,81,139,82,103,104,105,106,107,108,109,110',
'111,112,113,114,313,115,116,77,78,135,79,80,81,135,82,103,104,105,106',
'107,108,109,110,111,112,113,114,-113,115,116,130,117,314,315,-113,85',
'86,126,127,99,100,48,49,50,51,52,53,58,97,98,138,190,191,130,117,192',
'193,194,195,196,197,198,199,137,48,49,50,51,52,53,58,135,135,77,78,161',
'79,80,81,135,82,103,104,105,106,107,108,109,110,111,112,113,114,135',
'115,116,77,78,135,79,80,81,135,82,103,104,105,106,107,108,109,110,111',
'112,113,114,135,115,116,130,117,327,290,288,135,288,135,340,341,135',
'48,49,50,51,52,53,58,135,135,135,180,181,130,117,182,183,184,185,186',
'187,188,189,348,48,49,50,51,52,53,58,135,351,77,78,135,79,80,81,135',
'82,103,104,105,106,107,108,109,110,111,112,113,114,357,115,116,77,78',
'360,79,80,81,135,82,103,104,105,106,107,108,109,110,111,112,113,114',
'135,115,116,130,117,135,135,135,373,374,375,376,135,135,48,49,50,51',
'52,53,58,91,92,93,94,-110,130,117,-113,95,89,90,381,99,100,135,384,48',
'49,50,51,52,53,58,135,135,77,78,135,79,80,81,135,82,103,104,105,106',
'107,108,109,110,111,112,113,114,135,115,116,77,78,135,79,80,81,135,82',
'103,104,105,106,107,108,109,110,111,112,113,114,135,115,116,130,117',
'135,228,135,235,135,135,135,407,135,48,49,50,51,52,53,58,91,92,93,94',
'135,130,117,135,95,89,90,135,83,135,135,418,48,49,50,51,52,53,58,419',
'135,77,78,422,79,80,81,,82,103,104,105,106,107,108,109,110,111,112,113',
'114,,115,116,77,78,,79,80,81,,82,103,104,105,106,107,108,109,110,111',
'112,113,114,,115,116,130,117,,,,,,,,,,48,49,50,51,52,53,58,91,92,93',
'94,,130,117,,95,89,90,,,,,,48,49,50,51,52,53,58,,,77,78,,79,80,81,,82',
'103,104,105,106,107,108,109,110,111,112,113,114,,115,116,77,78,,79,80',
'81,,82,103,104,105,106,107,108,109,110,111,112,113,114,,115,116,130',
'117,,,,,,,,,,48,49,50,51,52,53,58,-244,-244,-244,-244,,178,117,,95,89',
'90,,,,,,48,49,50,51,52,53,58,,,77,78,,79,80,81,,82,103,104,105,106,107',
'108,109,110,111,112,113,114,,115,116,77,78,,79,80,81,,82,,,178,117,',
',,,,,178,117,286,48,49,50,51,52,53,58,,48,49,50,51,52,53,58,103,104',
'105,106,107,108,109,110,111,112,113,114,,115,116,,,77,78,,79,80,81,',
'82,77,78,,79,80,81,,82,,,178,117,284,,,,,,178,117,209,48,49,50,51,52',
'53,58,,48,49,50,51,52,53,58,103,104,105,106,107,108,109,110,111,112',
'113,114,,115,116,,,77,78,,79,80,81,,82,77,78,,79,80,81,,82,,,178,117',
'207,,,,,,,,272,48,49,50,51,52,53,58,91,92,93,94,-244,-244,-244,-244',
'95,89,90,,95,89,90,238,,7,237,,,,,,,77,78,,79,80,81,,82,33,34,35,36',
'42,48,49,50,51,52,53,58,274,62,,,,,303,63,,64,66,,,67,68,,69,7,70,71',
'72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53',
'58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80',
'81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68',
',69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49',
'50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76',
'77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63',
',64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34',
'35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71',
'72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53',
'58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80',
'81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68',
',69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49',
'50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76',
'77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63',
',64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34',
'35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71',
'72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53',
'58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80',
'81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68',
',69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49',
'50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76',
'77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63',
',64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33,34',
'35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,7,70,71',
'72,73,74,75,76,77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53',
'58,,62,,,,,,63,,64,66,,,67,68,,69,,70,71,72,73,74,75,76,77,78,,79,80',
'81,7,82,,,3,4,,,,,,,,,,,33,34,35,36,42,48,49,50,51,52,53,58,,62,,,,',
',63,,64,66,,,67,68,,69,7,70,71,72,73,74,75,76,77,78,,79,80,81,,82,33',
'34,35,36,42,48,49,50,51,52,53,58,,62,,,,,,63,,64,66,,,67,68,,69,,70',
'71,72,73,74,75,76,77,78,389,79,80,81,,82,293,117,,,,,,,,,,48,49,50,51',
'52,53,58,91,92,93,94,91,92,93,94,95,89,90,,95,89,90,238,,,237,,,,293',
'117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,178,117,,,,,,,,,303,48',
'49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53',
'58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117,,77',
'78,,79,80,81,,82,48,49,50,51,52,53,58,,178,117,,77,78,,79,80,81,,82',
'48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52',
'53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,178,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,178,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,178,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,293,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,293,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,293,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,178,117,,77,78,,79,80,81,,82,48,49,50,51,52,53,58,,,,178,117',
',77,78,,79,80,81,,82,48,49,50,51,52,53,58,,293,117,,77,78,,79,80,81',
',82,48,49,50,51,52,53,58,,,,178,117,,77,78,,79,80,81,,82,48,49,50,51',
'52,53,58,,,,,77,78,,79,80,81,,82,-244,-244,-244,-244,,,,,95,89,90,,',
'77,78,,79,80,81,,82,91,92,93,94,91,92,93,94,95,89,90,,95,89,90,329,',
',330,329,,,330,,33,34,35,36,42,48,49,50,51,52,53,58,,,,,,,,63,,64,66',
'331,,67,68,331,69,,,,,,,,,77,78,,,80,81,,82,33,34,35,36,42,48,49,50',
'51,52,53,58,,,,,,,,63,,64,66,,,67,68,,69,,,,,,,,,77,78,,,80,81,,82,33',
'34,35,36,42,48,49,50,51,52,53,58,,,,,,,,63,,64,66,,,67,68,,69,,,,,,',
',,77,78,,79,80,81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,,,,,,,63',
',64,66,,,67,68,,69,,,,,,,,,77,78,,79,80,81,,82,33,34,35,36,42,48,49',
'50,51,52,53,58,,,,,,,,63,,64,66,,,67,68,,69,,,,,,,,,77,78,,,80,81,,82',
'33,34,35,36,42,48,49,50,51,52,53,58,,,,,,,,63,,64,66,,,67,68,,69,,,',
',,,,,77,78,,,80,81,,82,33,34,35,36,42,48,49,50,51,52,53,58,,,,,,,,63',
',64,66,,,67,68,,69,,,,,,,,,77,78,,,80,81,,82,-244,-244,-244,-244,91',
'92,93,94,95,89,90,,95,89,90,91,92,93,94,91,92,93,94,95,89,90,,95,89',
'90,91,92,93,94,,,,,95,89,90' ]
        racc_action_table = arr = ::Array.new(2739, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'29,29,318,398,383,302,366,383,302,366,306,5,5,136,65,398,29,29,136,29',
'65,362,136,122,122,244,244,29,29,29,29,29,29,29,323,230,383,306,323',
'122,122,302,366,379,244,312,234,312,312,379,122,122,122,122,122,122',
'122,318,149,29,29,149,29,29,29,62,29,29,29,29,29,29,29,29,29,29,29,29',
'29,241,29,29,122,122,229,122,122,122,67,122,122,122,122,122,122,122',
'122,122,122,122,122,122,242,122,122,75,75,242,242,257,2,2,31,31,257',
'257,75,75,75,75,75,75,75,18,18,61,106,106,71,71,106,106,106,106,106',
'106,106,106,59,71,71,71,71,71,71,71,68,225,75,75,83,75,75,75,89,75,75',
'75,75,75,75,75,75,75,75,75,75,75,217,75,75,71,71,287,71,71,71,289,71',
'71,71,71,71,71,71,71,71,71,71,71,71,295,71,71,95,95,296,216,215,32,214',
'90,307,310,91,95,95,95,95,95,95,95,92,314,315,105,105,74,74,105,105',
'105,105,105,105,105,105,317,74,74,74,74,74,74,74,93,319,95,95,321,95',
'95,95,94,95,95,95,95,95,95,95,95,95,95,95,95,95,326,95,95,74,74,333',
'74,74,74,336,74,74,74,74,74,74,74,74,74,74,74,74,74,97,74,74,70,70,98',
'99,350,352,353,355,356,361,66,70,70,70,70,70,70,70,162,162,162,162,23',
'364,364,23,162,162,162,363,23,23,100,365,364,364,364,364,364,364,364',
'137,368,70,70,369,70,70,70,370,70,70,70,70,70,70,70,70,70,70,70,70,70',
'138,70,70,364,364,140,364,364,364,381,364,364,364,364,364,364,364,364',
'364,364,364,364,364,141,364,364,340,340,385,142,145,148,390,391,392',
'396,156,340,340,340,340,340,340,340,232,232,232,232,157,150,150,159',
'232,232,232,160,1,406,412,413,150,150,150,150,150,150,150,414,416,340',
'340,421,340,340,340,,340,340,340,340,340,340,340,340,340,340,340,340',
'340,,340,340,150,150,,150,150,150,,150,150,150,150,150,150,150,150,150',
'150,150,150,150,,150,150,133,133,,,,,,,,,,133,133,133,133,133,133,133',
'163,163,163,163,,76,76,,163,163,163,,,,,,76,76,76,76,76,76,76,,,133',
'133,,133,133,133,,133,133,133,133,133,133,133,133,133,133,133,133,133',
',133,133,76,76,,76,76,76,,76,76,76,76,76,76,76,76,76,76,76,76,76,,76',
'76,69,69,,,,,,,,,,69,69,69,69,69,69,69,252,252,252,252,,199,199,,252',
'252,252,,,,,,199,199,199,199,199,199,199,,,69,69,,69,69,69,,69,69,69',
'69,69,69,69,69,69,69,69,69,69,,69,69,199,199,,199,199,199,,199,,,198',
'198,,,,,,,114,114,199,198,198,198,198,198,198,198,,114,114,114,114,114',
'114,114,101,101,101,101,101,101,101,101,101,101,101,101,,101,101,,,198',
'198,,198,198,198,,198,114,114,,114,114,114,,114,,,113,113,198,,,,,,188',
'188,114,113,113,113,113,113,113,113,,188,188,188,188,188,188,188,27',
'27,27,27,27,27,27,27,27,27,27,27,,27,27,,,113,113,,113,113,113,,113',
'188,188,,188,188,188,,188,,,189,189,113,,,,,,,,188,189,189,189,189,189',
'189,189,233,233,233,233,253,253,253,253,233,233,233,,253,253,253,233',
',227,233,,,,,,,189,189,,189,189,189,,189,227,227,227,227,227,227,227',
'227,227,227,227,227,189,227,,,,,233,227,,227,227,,,227,227,,227,231',
'227,227,227,227,227,227,227,227,227,,227,227,227,,227,231,231,231,231',
'231,231,231,231,231,231,231,231,,231,,,,,,231,,231,231,,,231,231,,231',
'147,231,231,231,231,231,231,231,231,231,,231,231,231,,231,147,147,147',
'147,147,147,147,147,147,147,147,147,,147,,,,,,147,,147,147,,,147,147',
',147,240,147,147,147,147,147,147,147,147,147,,147,147,147,,147,240,240',
'240,240,240,240,240,240,240,240,240,240,,240,,,,,,240,,240,240,,,240',
'240,,240,169,240,240,240,240,240,240,240,240,240,,240,240,240,,240,169',
'169,169,169,169,169,169,169,169,169,169,169,,169,,,,,,169,,169,169,',
',169,169,,169,168,169,169,169,169,169,169,169,169,169,,169,169,169,',
'169,168,168,168,168,168,168,168,168,168,168,168,168,,168,,,,,,168,,168',
'168,,,168,168,,168,146,168,168,168,168,168,168,168,168,168,,168,168',
'168,,168,146,146,146,146,146,146,146,146,146,146,146,146,,146,,,,,,146',
',146,146,,,146,146,,146,87,146,146,146,146,146,146,146,146,146,,146',
'146,146,,146,87,87,87,87,87,87,87,87,87,87,87,87,,87,,,,,,87,,87,87',
',,87,87,,87,88,87,87,87,87,87,87,87,87,87,,87,87,87,,87,88,88,88,88',
'88,88,88,88,88,88,88,88,,88,,,,,,88,,88,88,,,88,88,,88,167,88,88,88',
'88,88,88,88,88,88,,88,88,88,,88,167,167,167,167,167,167,167,167,167',
'167,167,167,,167,,,,,,167,,167,167,,,167,167,,167,166,167,167,167,167',
'167,167,167,167,167,,167,167,167,,167,166,166,166,166,166,166,166,166',
'166,166,166,166,,166,,,,,,166,,166,166,,,166,166,,166,7,166,166,166',
'166,166,166,166,166,166,,166,166,166,,166,7,7,7,7,7,7,7,7,7,7,7,7,,7',
',,,,,7,,7,7,,,7,7,,7,386,7,7,7,7,7,7,7,7,7,,7,7,7,,7,386,386,386,386',
'386,386,386,386,386,386,386,386,,386,,,,,,386,,386,386,,,386,386,,386',
'387,386,386,386,386,386,386,386,386,386,,386,386,386,,386,387,387,387',
'387,387,387,387,387,387,387,387,387,,387,,,,,,387,,387,387,,,387,387',
',387,388,387,387,387,387,387,387,387,387,387,,387,387,387,,387,388,388',
'388,388,388,388,388,388,388,388,388,388,,388,,,,,,388,,388,388,,,388',
'388,,388,165,388,388,388,388,388,388,388,388,388,,388,388,388,,388,165',
'165,165,165,165,165,165,165,165,165,165,165,,165,,,,,,165,,165,165,',
',165,165,,165,164,165,165,165,165,165,165,165,165,165,,165,165,165,',
'165,164,164,164,164,164,164,164,164,164,164,164,164,,164,,,,,,164,,164',
'164,,,164,164,,164,,164,164,164,164,164,164,164,164,164,,164,164,164',
'0,164,,,0,0,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,,,,,,0,,0,0,,,0,0,',
'0,226,0,0,0,0,0,0,0,0,0,,0,0,0,,0,226,226,226,226,226,226,226,226,226',
'226,226,226,,226,,,,,,226,,226,226,,,226,226,,226,,226,226,226,226,226',
'226,226,226,226,373,226,226,226,,226,373,373,,,,,,,,,,373,373,373,373',
'373,373,373,301,301,301,301,6,6,6,6,301,301,301,,6,6,6,301,,,301,,,',
'223,223,,373,373,,373,373,373,,373,223,223,223,223,223,223,223,,193',
'193,,,,,,,,,301,193,193,193,193,193,193,193,,,,107,107,,223,223,,223',
'223,223,,223,107,107,107,107,107,107,107,,108,108,,193,193,,193,193',
'193,,193,108,108,108,108,108,108,108,,,,109,109,,107,107,,107,107,107',
',107,109,109,109,109,109,109,109,,110,110,,108,108,,108,108,108,,108',
'110,110,110,110,110,110,110,,,,194,194,,109,109,,109,109,109,,109,194',
'194,194,194,194,194,194,,112,112,,110,110,,110,110,110,,110,112,112',
'112,112,112,112,112,,,,195,195,,194,194,,194,194,194,,194,195,195,195',
'195,195,195,195,,196,196,,112,112,,112,112,112,,112,196,196,196,196',
'196,196,196,,,,115,115,,195,195,,195,195,195,,195,115,115,115,115,115',
'115,115,,116,116,,196,196,,196,196,196,,196,116,116,116,116,116,116',
'116,,,,197,197,,115,115,,115,115,115,,115,197,197,197,197,197,197,197',
',192,192,,116,116,,116,116,116,,116,192,192,192,192,192,192,192,,,,187',
'187,,197,197,,197,197,197,,197,187,187,187,187,187,187,187,,186,186',
',192,192,,192,192,192,,192,186,186,186,186,186,186,186,,,,185,185,,187',
'187,,187,187,187,,187,185,185,185,185,185,185,185,,184,184,,186,186',
',186,186,186,,186,184,184,184,184,184,184,184,,,,183,183,,185,185,,185',
'185,185,,185,183,183,183,183,183,183,183,,182,182,,184,184,,184,184',
'184,,184,182,182,182,182,182,182,182,,,,181,181,,183,183,,183,183,183',
',183,181,181,181,181,181,181,181,,224,224,,182,182,,182,182,182,,182',
'224,224,224,224,224,224,224,,,,191,191,,181,181,,181,181,181,,181,191',
'191,191,191,191,191,191,,180,180,,224,224,,224,224,224,,224,180,180',
'180,180,180,180,180,,,,246,246,,191,191,,191,191,191,,191,246,246,246',
'246,246,246,246,,248,248,,180,180,,180,180,180,,180,248,248,248,248',
'248,248,248,,,,104,104,,246,246,,246,246,246,,246,104,104,104,104,104',
'104,104,,103,103,,248,248,,248,248,248,,248,103,103,103,103,103,103',
'103,,,,190,190,,104,104,,104,104,104,,104,190,190,190,190,190,190,190',
',402,402,,103,103,,103,103,103,,103,402,402,402,402,402,402,402,,,,111',
'111,,190,190,,190,190,190,,190,111,111,111,111,111,111,111,,,,,402,402',
',402,402,402,,402,254,254,254,254,,,,,254,254,254,,,111,111,,111,111',
'111,,111,297,297,297,297,298,298,298,298,297,297,297,,298,298,298,297',
',,297,298,,,298,,158,158,158,158,158,158,158,158,158,158,158,158,,,',
',,,,158,,158,158,297,,158,158,298,158,,,,,,,,,158,158,,,158,158,,158',
'347,347,347,347,347,347,347,347,347,347,347,347,,,,,,,,347,,347,347',
',,347,347,,347,,,,,,,,,347,347,,,347,347,,347,172,172,172,172,172,172',
'172,172,172,172,172,172,,,,,,,,172,,172,172,,,172,172,,172,,,,,,,,,172',
'172,,172,172,172,,172,171,171,171,171,171,171,171,171,171,171,171,171',
',,,,,,,171,,171,171,,,171,171,,171,,,,,,,,,171,171,,171,171,171,,171',
'346,346,346,346,346,346,346,346,346,346,346,346,,,,,,,,346,,346,346',
',,346,346,,346,,,,,,,,,346,346,,,346,346,,346,174,174,174,174,174,174',
'174,174,174,174,174,174,,,,,,,,174,,174,174,,,174,174,,174,,,,,,,,,174',
'174,,,174,174,,174,173,173,173,173,173,173,173,173,173,173,173,173,',
',,,,,,173,,173,173,,,173,173,,173,,,,,,,,,173,173,,,173,173,,173,255',
'255,255,255,401,401,401,401,255,255,255,,401,401,401,400,400,400,400',
'311,311,311,311,400,400,400,,311,311,311,399,399,399,399,,,,,399,399',
'399' ]
        racc_action_check = arr = ::Array.new(2739, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1548,   402,    92,   nil,   nil,    -9,  1687,  1264,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,   nil,
   nil,   nil,   nil,   298,   nil,   nil,   nil,   638,   nil,    -8,
   nil,   104,   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   nil,   115,    35,   nil,   nil,   -33,   275,    70,   128,   526,
   259,   104,   nil,   nil,   193,    81,   460,   nil,   nil,   nil,
   nil,   nil,   nil,   150,   nil,   nil,   nil,  1084,  1129,   136,
   183,   186,   194,   217,   225,   170,   nil,   262,   267,   268,
   297,   577,   nil,  2223,  2204,   140,    51,  1724,  1743,  1764,
  1783,  2284,  1823,   663,   610,  1884,  1903,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   437,   nil,   nil,   -17,   306,   328,   nil,
   333,   351,   347,   nil,   nil,   358,  1039,   859,   347,    40,
   371,   nil,   nil,   nil,   nil,   nil,   364,   376,  2353,   379,
   383,   nil,   298,   476,  1489,  1444,  1219,  1174,   994,   949,
   nil,  2488,  2443,  2623,  2578,   nil,   nil,   nil,   nil,   nil,
  2143,  2084,  2063,  2044,  2023,  2004,  1983,  1964,   671,   724,
  2244,  2124,  1943,  1703,  1804,  1844,  1863,  1924,   602,   549,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   178,   176,   171,   150,   nil,   nil,
   nil,   nil,   nil,  1684,  2103,   129,  1593,   769,   nil,    66,
     7,   814,   387,   763,    28,   nil,   nil,   nil,   nil,   nil,
   904,    10,    92,   nil,    17,   nil,  2164,   nil,  2183,   nil,
   nil,   nil,   565,   767,  2335,  2695,   nil,    99,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   155,   nil,   159,
   nil,   nil,   nil,   nil,   nil,   173,   166,  2356,  2360,   nil,
   nil,  1683,   -13,   nil,   nil,   nil,   -20,   143,   nil,   nil,
   177,  2714,    27,   nil,   195,   196,   nil,   185,   -16,   207,
   nil,   221,   nil,    16,   nil,   nil,   215,   nil,   nil,   nil,
   nil,   nil,   nil,   234,   nil,   nil,   248,   nil,   nil,   nil,
   348,   nil,   nil,   nil,   nil,   nil,  2533,  2398,   nil,   nil,
   269,   nil,   242,   261,   nil,   260,   262,   nil,   nil,   nil,
   nil,   274,     3,   265,   282,   288,   -12,   nil,   307,   310,
   314,   nil,   nil,  1644,   nil,   nil,   nil,   nil,   nil,    -4,
   nil,   337,   nil,   -14,   nil,   356,  1309,  1354,  1399,   nil,
   360,   361,   362,   nil,   nil,   nil,   353,   nil,   -44,  2725,
  2710,  2699,  2263,   nil,   nil,   nil,   385,   nil,   nil,   nil,
   nil,   nil,   386,   377,   385,   nil,   396,   nil,   nil,   nil,
   nil,   389,   nil ]

racc_action_default = [
  -244,  -244,  -244,    -2,    -3,    -4,    -7,  -244,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -31,
   -32,   -33,   -34,   -35,   -40,   -41,   -42,   -45,   -44,   -63,
   -57,   -63,  -236,   -73,   -74,   -75,   -76,   -84,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -240,  -244,
  -111,  -244,  -244,  -238,  -238,  -243,  -236,  -236,  -236,  -244,
   -77,   -77,  -156,  -157,   -77,   -77,   -77,  -161,  -163,  -240,
  -167,  -168,  -173,  -244,    -1,  -230,  -231,    -5,    -6,  -236,
  -236,  -236,  -236,  -236,  -236,   -77,   -17,  -236,  -236,  -236,
  -236,   -43,  -188,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,   -50,   -51,   -52,
   -53,   -54,   -63,   -56,   -60,   -64,   -65,   -67,   -79,   -81,
   -82,   -83,   -58,  -243,   -61,  -240,  -244,  -236,  -236,  -240,
  -236,  -236,  -244,  -240,  -243,  -236,  -244,  -244,  -244,  -244,
   -78,  -154,  -155,  -158,  -159,  -160,  -236,  -236,  -244,  -236,
  -236,   423,    -8,    -9,  -244,  -244,  -244,  -244,  -244,  -244,
   -16,  -244,  -244,  -244,  -244,  -189,  -190,  -228,  -229,  -191,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -196,  -199,  -202,  -205,  -208,  -211,  -214,  -223,  -217,  -220,
  -226,  -227,   -55,   -80,   -69,   -69,  -244,  -236,  -237,  -105,
  -106,  -107,  -108,  -244,  -244,  -236,  -244,  -244,  -133,  -236,
  -244,  -244,  -136,  -244,  -236,  -147,  -149,  -240,  -240,  -243,
  -179,  -244,  -166,   -45,   -63,  -241,  -243,  -170,  -243,  -175,
   -10,   -11,   -12,   -13,   -14,   -15,   -29,   -35,   -30,   -36,
   -38,   -37,   -39,  -192,  -193,  -197,  -200,  -203,  -206,  -209,
  -212,  -215,  -224,  -218,  -221,  -194,  -195,  -198,  -201,  -204,
  -207,  -210,  -213,  -216,  -225,  -219,  -222,  -236,   -71,  -236,
  -242,   -62,   -48,   -49,  -109,  -236,  -244,  -244,  -244,  -243,
  -135,  -244,  -244,  -141,  -142,  -143,  -244,  -244,  -234,  -235,
  -244,  -184,  -180,  -243,  -236,  -236,  -165,  -244,  -236,  -244,
  -176,  -236,  -243,  -236,  -243,   -59,  -244,  -114,  -126,  -128,
  -129,  -130,  -131,  -244,  -240,  -240,  -236,  -241,  -148,  -243,
   -77,  -241,  -240,  -240,  -240,  -241,  -244,  -244,  -169,  -171,
  -236,  -174,  -244,  -244,   -70,  -244,  -244,  -112,  -239,  -239,
  -134,  -236,  -236,  -122,  -244,  -244,  -244,  -162,  -236,  -236,
  -236,  -164,  -172,  -244,   -66,   -72,   -68,  -240,  -240,  -138,
  -137,  -236,  -243,  -244,  -150,  -236,  -181,  -182,  -183,  -241,
  -236,  -236,  -236,  -240,  -140,  -123,  -244,  -145,  -122,  -185,
  -186,  -187,  -244,  -178,  -243,  -243,  -236,  -144,  -240,  -151,
  -152,  -153,  -236,  -244,  -244,  -139,  -236,  -177,  -127,  -132,
  -243,  -244,  -146 ]

racc_goto_table = [
    47,   144,   149,   243,   305,   151,   152,    47,   316,   153,
   154,   155,   260,   262,   339,   132,   328,   332,   243,   243,
   244,   242,   382,   102,   256,   258,   287,   289,   234,    46,
   170,   294,   295,   215,   257,   257,    46,   377,   378,   140,
   141,   259,   261,   219,   214,   325,   133,   122,   101,   129,
   358,   359,     5,   302,   318,   213,   321,   410,   236,   336,
   323,    84,   408,     2,   307,   409,   217,   156,     6,   157,
   245,   246,   334,   335,   159,    96,   248,   160,   320,   312,
     1,   nil,   nil,   213,   nil,   nil,   nil,    47,    47,   129,
   129,   129,   nil,   nil,   129,   129,   129,   175,   nil,   nil,
   364,   nil,   397,   nil,   367,   411,   212,   nil,   371,   nil,
   nil,   nil,   nil,   nil,   nil,   129,    46,    46,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   385,   nil,   nil,
   nil,   nil,   129,   nil,   nil,   nil,    47,    47,   nil,   nil,
   nil,   nil,   402,   129,    22,   162,   163,   nil,    47,   nil,
   nil,    22,   nil,   nil,    47,    47,    47,    47,    47,    47,
   129,    47,    47,    47,    47,    46,    46,   nil,   142,   nil,
   nil,   390,   nil,   nil,   nil,   260,   262,    46,   nil,   nil,
   nil,   243,   243,    46,    46,    46,    46,    46,    46,   nil,
    46,    46,    46,    46,   nil,    45,    45,   nil,   244,   244,
   412,   nil,   nil,   nil,   232,   233,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,   nil,   nil,
   nil,    47,   250,   251,   252,   253,   254,   255,   nil,   nil,
    47,    22,    22,   292,   292,   nil,   216,   nil,   nil,   nil,
   136,   nil,   nil,   nil,   nil,    46,    46,   230,   nil,   nil,
    46,   nil,   nil,   nil,    45,    45,   292,   nil,   292,    46,
   nil,   158,   nil,   nil,   nil,   366,    45,   nil,   nil,   nil,
   nil,   nil,    45,    45,    45,    45,    45,    45,   nil,    45,
    45,    45,    45,   nil,   297,   298,   nil,   383,   nil,   301,
    22,    22,   nil,   nil,   nil,   134,   nil,   nil,   311,   nil,
   nil,   nil,   nil,   nil,   nil,   394,   nil,   nil,    22,    22,
    22,    22,    22,    22,   nil,    22,    22,   218,   nil,   nil,
   nil,   225,   nil,   nil,   nil,   229,   nil,   nil,   nil,   146,
   147,   148,   nil,   nil,    45,    45,    47,    47,   nil,    45,
   nil,   nil,   310,   nil,   nil,   nil,   nil,   nil,    45,   317,
   129,   319,   164,   165,   166,   167,   168,   169,   239,   241,
   171,   172,   173,   174,   nil,    46,    46,   nil,   nil,   nil,
    22,    22,   nil,   nil,   129,    22,    47,    47,    47,   nil,
   nil,   176,   179,   292,    22,   200,   201,   202,   203,   204,
   205,   206,   208,   210,   211,   nil,   nil,   nil,   nil,   nil,
   223,   224,   333,   226,   227,    46,    46,    46,   231,   nil,
   nil,   nil,   292,   nil,   nil,   nil,   345,   nil,   nil,   308,
   309,   nil,   247,   249,   nil,   353,   nil,   356,   nil,   nil,
   nil,   299,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   365,   nil,   399,   400,   401,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    45,   nil,   nil,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   273,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   285,   nil,   nil,
   291,   nil,   nil,   nil,   nil,   396,   nil,   nil,   296,   322,
   nil,   324,   nil,   nil,    45,    45,    45,   306,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   413,   414,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   361,   362,   nil,   nil,
   nil,   nil,   nil,   421,   368,   369,   370,   nil,   nil,   nil,
    22,    22,    22,   nil,   nil,   nil,   nil,   nil,   363,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   326,   391,
   392,   nil,   nil,   379,   380,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   406,   nil,   346,   347,   nil,
   nil,   349,   nil,   395,   352,   nil,   355,   398,   nil,   nil,
   416,   nil,   nil,   404,   405,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   415,   nil,
   nil,   nil,   nil,   372,   nil,   nil,   nil,   nil,   420,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   386,   387,   388,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   403,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   417 ]

racc_goto_check = [
    35,    83,    45,    27,    76,     7,     7,    35,    88,     7,
     7,     7,    25,    25,    90,    38,    78,    78,    27,    27,
    36,    23,    73,    52,    19,    19,    47,    47,    87,    34,
     7,    31,    31,    50,    23,    23,    34,    79,    79,    77,
    77,    24,    24,    65,    49,    44,    42,    37,    28,    32,
    80,    81,     4,    84,    31,    45,    31,    73,    85,    86,
    51,     3,    89,     2,    91,    92,    45,    93,     5,    94,
    95,    96,    76,    76,    97,     5,    98,    99,   100,   101,
     1,   nil,   nil,    45,   nil,   nil,   nil,    35,    35,    32,
    32,    32,   nil,   nil,    32,    32,    32,    52,   nil,   nil,
    88,   nil,    78,   nil,    88,    90,    38,   nil,    88,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    34,    34,    33,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    35,    35,   nil,   nil,
   nil,   nil,    88,    32,    22,     5,     5,   nil,    35,   nil,
   nil,    22,   nil,   nil,    35,    35,    35,    35,    35,    35,
    32,    35,    35,    35,    35,    34,    34,   nil,    43,   nil,
   nil,    31,   nil,   nil,   nil,    25,    25,    34,   nil,   nil,
   nil,    27,    27,    34,    34,    34,    34,    34,    34,   nil,
    34,    34,    34,    34,   nil,    33,    33,   nil,    36,    36,
    31,   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    35,   nil,   nil,
   nil,    35,     5,     5,     5,     5,     5,     5,   nil,   nil,
    35,    22,    22,    32,    32,   nil,    43,   nil,   nil,   nil,
    64,   nil,   nil,   nil,   nil,    34,    34,    43,   nil,   nil,
    34,   nil,   nil,   nil,    33,    33,    32,   nil,    32,    34,
   nil,    64,   nil,   nil,   nil,     7,    33,   nil,   nil,   nil,
   nil,   nil,    33,    33,    33,    33,    33,    33,   nil,    33,
    33,    33,    33,   nil,     5,     5,   nil,    45,   nil,     5,
    22,    22,   nil,   nil,   nil,     6,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    83,   nil,   nil,    22,    22,
    22,    22,    22,    22,   nil,    22,    22,    64,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    64,   nil,   nil,   nil,     6,
     6,     6,   nil,   nil,    33,    33,    35,    35,   nil,    33,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,    33,    43,
    32,    43,     6,     6,     6,     6,     6,     6,    48,    48,
     6,     6,     6,     6,   nil,    34,    34,   nil,   nil,   nil,
    22,    22,   nil,   nil,    32,    22,    35,    35,    35,   nil,
   nil,   102,   102,    32,    22,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   nil,   nil,   nil,   nil,   nil,
     6,     6,    43,     6,     6,    34,    34,    34,     6,   nil,
   nil,   nil,    32,   nil,   nil,   nil,    43,   nil,   nil,    64,
    64,   nil,     6,     6,   nil,    43,   nil,    43,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,   nil,     5,     5,     5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,    33,   nil,   nil,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   nil,   nil,
     6,   nil,   nil,   nil,   nil,    43,   nil,   nil,     6,    48,
   nil,    48,   nil,   nil,    33,    33,    33,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    43,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    64,    64,   nil,   nil,
   nil,   nil,   nil,    43,    64,    64,    64,   nil,   nil,   nil,
    22,    22,    22,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,    64,
    64,   nil,   nil,    48,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    64,   nil,     6,     6,   nil,
   nil,     6,   nil,    48,     6,   nil,     6,    48,   nil,   nil,
    64,   nil,   nil,    48,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,     6,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,    80,    63,    59,    52,    68,   273,   -65,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -147,
   nil,   nil,   154,  -137,  -132,  -161,   nil,  -155,    21,   nil,
   nil,  -192,    20,   118,    29,     0,  -138,    18,   -16,   nil,
   nil,   nil,    14,   113,  -245,   -67,   nil,  -188,   212,   -82,
   -94,  -228,    -4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   192,   -93,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  -341,   nil,   nil,  -229,   -24,  -281,  -321,
  -278,  -281,   nil,   -64,  -179,   -91,  -246,  -120,  -237,  -335,
  -293,  -172,  -333,   -10,    -9,   -88,   -88,    -7,   -84,    -5,
  -170,  -161,   288,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   240,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,   120,    23,    26,    24,    25,    27,   nil,    28,
   nil,   nil,   177,   118,   119,   121,    29,   150,   123,    30,
    31,    32,   nil,   nil,   nil,   128,   125,   nil,   nil,   nil,
   nil,   nil,   131,    37,    38,    39,    40,    41,    43,    44,
    54,    55,    56,    57,   nil,   nil,    59,    60,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    65,   nil,   nil,   304,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_3,
  1, 92, :_reduce_none,
  2, 92, :_reduce_5,
  2, 92, :_reduce_6,
  1, 94, :_reduce_7,
  3, 94, :_reduce_8,
  3, 94, :_reduce_9,
  4, 95, :_reduce_10,
  4, 95, :_reduce_11,
  4, 95, :_reduce_12,
  4, 95, :_reduce_13,
  4, 95, :_reduce_14,
  4, 95, :_reduce_15,
  3, 95, :_reduce_16,
  2, 95, :_reduce_17,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 98, :_reduce_none,
  4, 108, :_reduce_29,
  4, 108, :_reduce_30,
  1, 108, :_reduce_none,
  1, 109, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_36,
  4, 111, :_reduce_37,
  4, 113, :_reduce_38,
  4, 113, :_reduce_39,
  1, 113, :_reduce_40,
  1, 113, :_reduce_41,
  1, 110, :_reduce_none,
  2, 110, :_reduce_43,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  0, 120, :_reduce_46,
  2, 120, :_reduce_47,
  1, 121, :_reduce_none,
  1, 121, :_reduce_49,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 114, :_reduce_55,
  2, 119, :_reduce_56,
  1, 119, :_reduce_none,
  2, 129, :_reduce_58,
  5, 130, :_reduce_59,
  2, 131, :_reduce_60,
  1, 132, :_reduce_61,
  3, 132, :_reduce_62,
  0, 128, :_reduce_63,
  1, 128, :_reduce_none,
  0, 139, :_reduce_65,
  6, 136, :_reduce_66,
  0, 140, :_reduce_67,
  6, 136, :_reduce_68,
  0, 137, :_reduce_69,
  3, 137, :_reduce_70,
  0, 141, :_reduce_71,
  3, 141, :_reduce_72,
  1, 126, :_reduce_73,
  1, 126, :_reduce_74,
  1, 126, :_reduce_75,
  1, 126, :_reduce_76,
  0, 97, :_reduce_77,
  1, 97, :_reduce_none,
  1, 127, :_reduce_79,
  2, 127, :_reduce_80,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 143, :_reduce_94,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 152, :_reduce_105,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  4, 106, :_reduce_109,
  1, 156, :_reduce_none,
  1, 116, :_reduce_111,
  6, 157, :_reduce_112,
  1, 158, :_reduce_none,
  5, 107, :_reduce_114,
  0, 161, :_reduce_115,
  5, 159, :_reduce_116,
  4, 160, :_reduce_117,
  0, 162, :_reduce_118,
  7, 162, :_reduce_119,
  0, 165, :_reduce_120,
  4, 165, :_reduce_121,
  0, 163, :_reduce_122,
  2, 163, :_reduce_123,
  0, 164, :_reduce_124,
  2, 164, :_reduce_125,
  0, 170, :_reduce_126,
  11, 146, :_reduce_127,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  0, 171, :_reduce_131,
  11, 147, :_reduce_132,
  3, 144, :_reduce_133,
  6, 144, :_reduce_134,
  4, 144, :_reduce_135,
  0, 174, :_reduce_136,
  7, 172, :_reduce_137,
  6, 173, :_reduce_138,
  9, 173, :_reduce_139,
  7, 173, :_reduce_140,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  0, 176, :_reduce_143,
  9, 145, :_reduce_144,
  0, 179, :_reduce_145,
  13, 149, :_reduce_146,
  1, 177, :_reduce_147,
  3, 177, :_reduce_148,
  0, 181, :_reduce_149,
  7, 148, :_reduce_150,
  5, 180, :_reduce_151,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 99, :_reduce_154,
  2, 100, :_reduce_155,
  1, 101, :_reduce_156,
  1, 102, :_reduce_157,
  2, 103, :_reduce_158,
  2, 104, :_reduce_159,
  2, 105, :_reduce_160,
  0, 183, :_reduce_161,
  6, 123, :_reduce_162,
  0, 184, :_reduce_163,
  6, 124, :_reduce_164,
  4, 112, :_reduce_165,
  1, 185, :_reduce_166,
  1, 153, :_reduce_167,
  0, 187, :_reduce_168,
  5, 150, :_reduce_169,
  1, 186, :_reduce_170,
  3, 186, :_reduce_171,
  4, 186, :_reduce_172,
  0, 189, :_reduce_173,
  5, 151, :_reduce_174,
  1, 188, :_reduce_175,
  2, 188, :_reduce_176,
  7, 190, :_reduce_177,
  5, 190, :_reduce_178,
  1, 138, :_reduce_179,
  2, 138, :_reduce_180,
  5, 138, :_reduce_181,
  5, 138, :_reduce_182,
  5, 138, :_reduce_183,
  1, 191, :_reduce_184,
  5, 191, :_reduce_185,
  5, 191, :_reduce_186,
  5, 191, :_reduce_187,
  1, 118, :_reduce_188,
  2, 118, :_reduce_189,
  2, 142, :_reduce_190,
  2, 142, :_reduce_191,
  3, 142, :_reduce_192,
  3, 142, :_reduce_193,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_196,
  3, 142, :_reduce_197,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  2, 142, :_reduce_226,
  2, 142, :_reduce_227,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 193, :_reduce_none,
  2, 193, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  0, 96, :_reduce_none,
  2, 96, :_reduce_none,
  0, 167, :_reduce_238,
  0, 169, :_reduce_239,
  0, 154, :_reduce_240,
  0, 178, :_reduce_241,
  0, 134, :_reduce_242,
  0, 133, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 423

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :begin_command => 34,
  :STRING => 35,
  :REGEXP => 36,
  :NUMBER => 37,
  :INTEGER => 38,
  :VARIABLE => 39,
  :PSEUDOVARIABLE => 40,
  :SYMBEG => 41,
  "]" => 42,
  :ALIAS => 43,
  :BEGIN => 44,
  :RESCUE => 45,
  :ASSOC => 46,
  :ELSE => 47,
  :ENSURE => 48,
  :WHILE => 49,
  :DO_COND => 50,
  :UNTIL => 51,
  :IF => 52,
  :ELSIF => 53,
  :THEN => 54,
  :UNLESS => 55,
  :FOR => 56,
  :IN => 57,
  :CASE => 58,
  :WHEN => 59,
  :BREAK => 60,
  :NEXT => 61,
  :REDO => 62,
  :Retry => 63,
  :RAISE => 64,
  :RETURN => 65,
  :YIELD => 66,
  "(" => 67,
  :XSTRING_BEG => 68,
  :XSTRING_END => 69,
  "$" => 70,
  :RUBYEXP => 71,
  :LBLACK_A => 72,
  "," => 73,
  :LBRACE_H => 74,
  ">" => 75,
  "<" => 76,
  :FID => 77,
  :REDIR_WORD => 78,
  :GREATER_GREATER => 79,
  :GREATER_BAR => 80,
  :LESS_GREATER => 81,
  :LESS_LESS => 82,
  :LESS_LESS_MINUS => 83,
  :LESS_LESS_LESS => 84,
  :LESS_AND => 85,
  :GREATER_AND => 86,
  "-" => 87,
  :AND_GREATER => 88,
  :AND_GREATER_GREATER => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "begin_command",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "BEGIN_command",
  "body_list",
  "@3",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@4",
  "@5",
  "if_head",
  "elsif_clause",
  "@6",
  "opt_terms",
  "@7",
  "for_arg",
  "lex_arg",
  "@8",
  "case_body",
  "@9",
  "cases",
  "@10",
  "@11",
  "trivial_command0",
  "array_element_list",
  "@12",
  "hash_element_list",
  "@13",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_30(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_32(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_36(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_40(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_41(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_43(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_46(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_47(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_49(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_55(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_56(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_58(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_59(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_60(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_61(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_62(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_63(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_65(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_66(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_67(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_68(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_69(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_70(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_71(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_72(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_73(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 349)
  def _reduce_77(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_79(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_80(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_94(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_105(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_109(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_111(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_112(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_114(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_115(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 467)
  def _reduce_116(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_117(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 478)
  def _reduce_118(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 482)
  def _reduce_119(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 493)
  def _reduce_120(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 497)
  def _reduce_121(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_122(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_123(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_124(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_125(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 517)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 519)
  def _reduce_127(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.y', 526)
  def _reduce_131(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 528)
  def _reduce_132(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 533)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 537)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 541)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 544)
  def _reduce_136(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 546)
  def _reduce_137(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 550)
  def _reduce_138(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 558)
  def _reduce_140(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.y', 564)
  def _reduce_143(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_144(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 569)
  def _reduce_145(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 571)
  def _reduce_146(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[10])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_147(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 581)
  def _reduce_148(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 585)
  def _reduce_149(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_150(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_151(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.y', 607)
  def _reduce_154(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 612)
  def _reduce_155(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 617)
  def _reduce_156(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_157(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 627)
  def _reduce_158(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 632)
  def _reduce_159(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 637)
  def _reduce_160(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 640)
  def _reduce_161(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_162(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 646)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 648)
  def _reduce_164(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 688)
  def _reduce_165(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 693)
  def _reduce_166(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_167(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 749)
  def _reduce_168(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 751)
  def _reduce_169(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 756)
  def _reduce_170(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 761)
  def _reduce_171(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 766)
  def _reduce_172(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 770)
  def _reduce_173(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 772)
  def _reduce_174(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 777)
  def _reduce_175(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 782)
  def _reduce_176(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 787)
  def _reduce_177(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 792)
  def _reduce_178(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 798)
  def _reduce_179(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 802)
  def _reduce_180(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 806)
  def _reduce_181(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_182(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 815)
  def _reduce_183(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 820)
  def _reduce_184(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 824)
  def _reduce_185(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_186(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 835)
  def _reduce_187(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 841)
  def _reduce_188(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 845)
  def _reduce_189(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 851)
  def _reduce_190(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 856)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 861)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_193(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'parser.y', 873)
  def _reduce_196(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 878)
  def _reduce_197(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

module_eval(<<'.,.,', 'parser.y', 917)
  def _reduce_226(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 922)
  def _reduce_227(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.y', 941)
  def _reduce_238(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 942)
  def _reduce_239(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 944)
  def _reduce_240(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 945)
  def _reduce_241(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_242(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 948)
  def _reduce_243(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
