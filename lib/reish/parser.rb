#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 990)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok

      end
      super unless @cmpl_mode

      @cmpl_mode = value_stack
      Reish::Fail ParserComplSupp
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'129,130,138,357,387,234,358,234,233,234,233,403,233,351,129,130,133',
'120,138,129,130,138,379,129,130,368,49,50,51,52,53,54,59,127,234,359',
'138,233,402,133,120,323,127,323,346,323,90,91,327,49,50,51,52,53,54',
'59,330,375,314,80,81,138,82,83,84,138,85,106,107,108,109,110,111,112',
'113,114,115,116,117,299,118,119,80,81,297,82,83,84,297,85,106,107,108',
'109,110,111,112,113,114,115,116,117,438,118,119,133,120,-114,150,88',
'89,138,102,103,138,49,50,51,52,53,54,59,353,138,354,355,195,196,133',
'120,197,198,199,200,201,202,203,204,49,50,51,52,53,54,59,138,225,138',
'80,81,227,82,83,84,226,85,106,107,108,109,110,111,112,113,114,115,116',
'117,138,118,119,80,81,138,82,83,84,138,85,106,107,108,109,110,111,112',
'113,114,115,116,117,-114,118,119,133,120,331,332,100,101,138,348,349',
'351,49,50,51,52,53,54,59,138,138,241,138,185,186,133,120,187,188,189',
'190,191,192,193,194,49,50,51,52,53,54,59,138,138,364,80,81,138,82,83',
'84,368,85,106,107,108,109,110,111,112,113,114,115,116,117,369,118,119',
'80,81,138,82,83,84,138,85,106,107,108,109,110,111,112,113,114,115,116',
'117,148,118,119,133,120,373,150,138,376,138,138,382,385,49,50,51,52',
'53,54,59,94,95,96,97,320,138,133,120,98,92,93,138,396,398,138,138,49',
'50,51,52,53,54,59,138,138,138,80,81,138,82,83,84,409,85,106,107,108',
'109,110,111,112,113,114,115,116,117,410,118,119,80,81,411,82,83,84,412',
'85,106,107,108,109,110,111,112,113,114,115,116,117,413,118,119,133,120',
'414,138,138,138,138,138,138,138,49,50,51,52,53,54,59,94,95,96,97,351',
'427,133,120,98,92,93,138,138,138,138,138,49,50,51,52,53,54,59,166,138',
'138,80,81,138,82,83,84,138,85,106,107,108,109,110,111,112,113,114,115',
'116,117,138,118,119,80,81,446,82,83,84,143,85,106,107,108,109,110,111',
'112,113,114,115,116,117,142,118,119,133,120,141,138,138,450,140,138',
'314,138,49,50,51,52,53,54,59,94,95,96,97,86,138,133,120,98,92,93,462',
'463,138,469,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,106,107,108',
'109,110,111,112,113,114,115,116,117,,118,119,80,81,,82,83,84,,85,106',
'107,108,109,110,111,112,113,114,115,116,117,,118,119,133,120,,,,,,,',
',49,50,51,52,53,54,59,94,95,96,97,,,183,120,98,92,93,,,,,,49,50,51,52',
'53,54,59,,,,80,81,,82,83,84,,85,106,107,108,109,110,111,112,113,114',
'115,116,117,,118,119,80,81,,82,83,84,-111,85,,-114,234,183,120,233,102',
'103,,,,232,212,49,50,51,52,53,54,59,,183,120,,,,,,,183,120,49,50,51',
'52,53,54,59,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,,,,,,,,,,,80,81',
'214,82,83,84,,85,80,81,,82,83,84,,85,94,95,96,97,295,183,120,,98,92',
'93,,293,183,120,49,50,51,52,53,54,59,,49,50,51,52,53,54,59,106,107,108',
'109,110,111,112,113,114,115,116,117,,118,119,,,,80,81,,82,83,84,,85',
'80,81,,82,83,84,7,85,94,95,96,97,283,,,,98,92,93,,281,,34,35,36,37,49',
'50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76',
'77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64',
'65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84',
',85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71',
',72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51',
'52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78',
'79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,',
',,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34',
'35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7',
'73,74,75,76,77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53',
'54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80',
'81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,',
'67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34,35,36',
'37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74',
'75,76,77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59',
',63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82',
'83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,',
',70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34,35,36,37,49',
'50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76',
'77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64',
'65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84',
',85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71',
',72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51',
'52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78',
'79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64,65,,',
',,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,34',
'35,36,37,49,50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,,73',
'74,75,76,77,78,79,80,81,,82,83,84,7,85,,,3,4,,,,,,,,,,,34,35,36,37,49',
'50,51,52,53,54,59,,63,64,65,,,,,66,,67,69,,,70,71,,72,7,73,74,75,76',
'77,78,79,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,63,64',
'65,,,,,66,,67,69,,,70,71,,72,,73,74,75,76,77,78,79,80,81,429,82,83,84',
',85,302,120,,,,,,,,,49,50,51,52,53,54,59,94,95,96,97,94,95,96,97,98',
'92,93,,98,92,93,234,,,233,234,,,233,,183,120,80,81,,82,83,84,,85,49',
'50,51,52,53,54,59,,,,,,302,120,,,,323,,,,323,49,50,51,52,53,54,59,,',
'183,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59,,,,,,183,120,80,81',
',82,83,84,,85,49,50,51,52,53,54,59,,,183,120,80,81,,82,83,84,,85,49',
'50,51,52,53,54,59,,,,,,183,120,80,81,,82,83,84,,85,49,50,51,52,53,54',
'59,,,183,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59,,,,,,183,120,80',
'81,,82,83,84,,85,49,50,51,52,53,54,59,,,302,120,80,81,,82,83,84,,85',
'49,50,51,52,53,54,59,,,,,,302,120,80,81,,82,83,84,,85,49,50,51,52,53',
'54,59,,,183,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59,,,,,,183,120',
'80,81,,82,83,84,,85,49,50,51,52,53,54,59,,,302,120,80,81,,82,83,84,',
'85,49,50,51,52,53,54,59,,,,,,183,120,80,81,,82,83,84,,85,49,50,51,52',
'53,54,59,,,302,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59,,,,,,391',
',80,81,,82,83,84,,85,,,,,,,,,,183,120,80,81,,82,83,84,,85,49,50,51,52',
'53,54,59,183,120,,,,,,,183,120,49,50,51,52,53,54,59,,49,50,51,52,53',
'54,59,,80,81,,82,83,84,,85,,,,,,,,,,80,81,,82,83,84,,85,80,81,,82,83',
'84,,85,183,120,,,,,,,183,120,49,50,51,52,53,54,59,,49,50,51,52,53,54',
'59,302,120,,,,,,,,,49,50,51,52,53,54,59,,80,81,,82,83,84,,85,80,81,',
'82,83,84,,85,,,,,,,,183,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59',
'183,120,,,,,,,183,120,49,50,51,52,53,54,59,,49,50,51,52,53,54,59,,80',
'81,,82,83,84,,85,,,,,,,,,,80,81,,82,83,84,,85,80,81,,82,83,84,,85,183',
'120,,,,,,,183,120,49,50,51,52,53,54,59,,49,50,51,52,53,54,59,183,120',
',,,,,,,,49,50,51,52,53,54,59,,80,81,,82,83,84,,85,80,81,,82,83,84,,85',
',,,,,,,183,120,80,81,,82,83,84,,85,49,50,51,52,53,54,59,183,120,,,,',
',,183,120,49,50,51,52,53,54,59,,49,50,51,52,53,54,59,,80,81,,82,83,84',
',85,,,,,,,,,,80,81,,82,83,84,,85,80,81,,82,83,84,,85,183,120,,,,,,,183',
'120,49,50,51,52,53,54,59,,49,50,51,52,53,54,59,,,94,95,96,97,94,95,96',
'97,98,92,93,,98,92,93,357,80,81,358,82,83,84,,85,80,81,,82,83,84,,85',
',94,95,96,97,,,,,98,92,93,,,,359,357,,,358,,34,35,36,37,49,50,51,52',
'53,54,59,,,,65,,,,,66,,67,69,,,70,71,359,72,,,,,,,,,80,81,,,83,84,,85',
'34,35,36,37,49,50,51,52,53,54,59,,,,65,,,,,66,,67,69,,,70,71,,72,,,',
',,,,,80,81,,,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,,,65,,,,,66',
',67,69,,,70,71,,72,,,,,,,,,80,81,,82,83,84,,85,34,35,36,37,49,50,51',
'52,53,54,59,,,,65,,,,,66,,67,69,,,70,71,,72,,,,,,,,,80,81,,,83,84,,85',
'34,35,36,37,49,50,51,52,53,54,59,,,,65,,,,,66,,67,69,,,70,71,,72,,,',
',,,,,80,81,,82,83,84,,85,34,35,36,37,49,50,51,52,53,54,59,,,,65,,,,',
'66,,67,69,,,70,71,,72,,,,,,,,,80,81,,,83,84,,85,34,35,36,37,49,50,51',
'52,53,54,59,,,,65,,,,,66,,67,69,,,70,71,,72,,,,,,,,,80,81,,,83,84,,85',
'106,107,108,109,110,111,112,113,114,115,116,117,,118,119,94,95,96,97',
'-254,-254,-254,-254,98,92,93,,98,92,93,-254,-254,-254,-254,-254,-254',
'-254,-254,98,92,93,,98,92,93,-254,-254,-254,-254,,,,,98,92,93' ]
        racc_action_table = arr = ::Array.new(2831, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'125,125,335,451,350,405,451,322,405,390,322,366,390,442,253,253,125',
'125,340,32,32,242,340,30,30,442,125,125,125,125,125,125,125,253,154',
'451,307,154,366,30,30,405,30,322,307,390,5,5,247,30,30,30,30,30,30,30',
'250,335,237,125,125,235,125,125,125,222,125,125,125,125,125,125,125',
'125,125,125,125,125,125,221,125,125,30,30,220,30,30,30,219,30,30,30',
'30,30,30,30,30,30,30,30,30,30,423,30,30,77,77,266,423,2,2,165,266,266',
'164,77,77,77,77,77,77,77,316,162,316,316,109,109,136,136,109,109,109',
'109,109,109,109,109,136,136,136,136,136,136,136,296,139,298,77,77,139',
'77,77,77,139,77,77,77,77,77,77,77,77,77,77,77,77,77,304,77,77,136,136',
'305,136,136,136,306,136,136,136,136,136,136,136,136,136,136,136,136',
'136,251,136,136,79,79,251,251,19,19,161,311,312,313,79,79,79,79,79,79',
'79,153,150,147,146,108,108,78,78,108,108,108,108,108,108,108,108,78',
'78,78,78,78,78,78,145,144,324,79,79,326,79,79,79,328,79,79,79,79,79',
'79,79,79,79,79,79,79,79,329,79,79,78,78,331,78,78,78,332,78,78,78,78',
'78,78,78,78,78,78,78,78,78,68,78,78,368,368,334,68,141,336,338,140,343',
'347,368,368,368,368,368,368,368,434,434,434,434,243,351,74,74,434,434',
'434,103,358,361,365,102,74,74,74,74,74,74,74,101,100,97,368,368,375',
'368,368,368,377,368,368,368,368,368,368,368,368,368,368,368,368,368',
'378,368,368,74,74,380,74,74,74,381,74,74,74,74,74,74,74,74,74,74,74',
'74,74,383,74,74,73,73,384,387,96,392,393,394,399,400,73,73,73,73,73',
'73,73,315,315,315,315,401,404,98,98,315,315,315,95,94,417,93,92,98,98',
'98,98,98,98,98,86,70,69,73,73,428,73,73,73,430,73,73,73,73,73,73,73',
'73,73,73,73,73,73,431,73,73,98,98,432,98,98,98,64,98,98,98,98,98,98',
'98,98,98,98,98,98,98,63,98,98,72,72,62,436,437,440,60,33,445,449,72',
'72,72,72,72,72,72,435,435,435,435,1,455,426,426,435,435,435,457,458',
'466,468,,426,426,426,426,426,426,426,,,,72,72,,72,72,72,,72,72,72,72',
'72,72,72,72,72,72,72,72,72,,72,72,426,426,,426,426,426,,426,426,426',
'426,426,426,426,426,426,426,426,426,426,,426,426,155,155,,,,,,,,,155',
'155,155,155,155,155,155,6,6,6,6,,,116,116,6,6,6,,,,,,116,116,116,116',
'116,116,116,,,,155,155,,155,155,155,,155,155,155,155,155,155,155,155',
'155,155,155,155,155,,155,155,116,116,,116,116,116,24,116,,24,142,117',
'117,142,24,24,,,,142,116,117,117,117,117,117,117,117,,204,204,,,,,,',
'203,203,204,204,204,204,204,204,204,,203,203,203,203,203,203,203,117',
'117,,117,117,117,,117,,,,,,,,,,,204,204,117,204,204,204,,204,203,203',
',203,203,203,,203,433,433,433,433,204,194,194,,433,433,433,,203,193',
'193,194,194,194,194,194,194,194,,193,193,193,193,193,193,193,104,104',
'104,104,104,104,104,104,104,104,104,104,,104,104,,,,194,194,,194,194',
'194,,194,193,193,,193,193,193,420,193,245,245,245,245,194,,,,245,245',
'245,,193,,420,420,420,420,420,420,420,420,420,420,420,,420,420,420,',
',,,420,,420,420,,,420,420,,420,174,420,420,420,420,420,420,420,420,420',
',420,420,420,,420,174,174,174,174,174,174,174,174,174,174,174,,174,174',
'174,,,,,174,,174,174,,,174,174,,174,173,174,174,174,174,174,174,174',
'174,174,,174,174,174,,174,173,173,173,173,173,173,173,173,173,173,173',
',173,173,173,,,,,173,,173,173,,,173,173,,173,169,173,173,173,173,173',
'173,173,173,173,,173,173,173,,173,169,169,169,169,169,169,169,169,169',
'169,169,,169,169,169,,,,,169,,169,169,,,169,169,,169,7,169,169,169,169',
'169,169,169,169,169,,169,169,169,,169,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,',
',,,7,,7,7,,,7,7,,7,170,7,7,7,7,7,7,7,7,7,,7,7,7,,7,170,170,170,170,170',
'170,170,170,170,170,170,,170,170,170,,,,,170,,170,170,,,170,170,,170',
'172,170,170,170,170,170,170,170,170,170,,170,170,170,,170,172,172,172',
'172,172,172,172,172,172,172,172,,172,172,172,,,,,172,,172,172,,,172',
'172,,172,90,172,172,172,172,172,172,172,172,172,,172,172,172,,172,90',
'90,90,90,90,90,90,90,90,90,90,,90,90,90,,,,,90,,90,90,,,90,90,,90,91',
'90,90,90,90,90,90,90,90,90,,90,90,90,,90,91,91,91,91,91,91,91,91,91',
'91,91,,91,91,91,,,,,91,,91,91,,,91,91,,91,419,91,91,91,91,91,91,91,91',
'91,,91,91,91,,91,419,419,419,419,419,419,419,419,419,419,419,,419,419',
'419,,,,,419,,419,419,,,419,419,,419,418,419,419,419,419,419,419,419',
'419,419,,419,419,419,,419,418,418,418,418,418,418,418,418,418,418,418',
',418,418,418,,,,,418,,418,418,,,418,418,,418,152,418,418,418,418,418',
'418,418,418,418,,418,418,418,,418,152,152,152,152,152,152,152,152,152',
'152,152,,152,152,152,,,,,152,,152,152,,,152,152,,152,151,152,152,152',
'152,152,152,152,152,152,,152,152,152,,152,151,151,151,151,151,151,151',
'151,151,151,151,,151,151,151,,,,,151,,151,151,,,151,151,,151,238,151',
'151,151,151,151,151,151,151,151,,151,151,151,,151,238,238,238,238,238',
'238,238,238,238,238,238,,238,238,238,,,,,238,,238,238,,,238,238,,238',
'239,238,238,238,238,238,238,238,238,238,,238,238,238,,238,239,239,239',
'239,239,239,239,239,239,239,239,,239,239,239,,,,,239,,239,239,,,239',
'239,,239,240,239,239,239,239,239,239,239,239,239,,239,239,239,,239,240',
'240,240,240,240,240,240,240,240,240,240,,240,240,240,,,,,240,,240,240',
',,240,240,,240,171,240,240,240,240,240,240,240,240,240,,240,240,240',
',240,171,171,171,171,171,171,171,171,171,171,171,,171,171,171,,,,,171',
',171,171,,,171,171,,171,,171,171,171,171,171,171,171,171,171,,171,171',
'171,0,171,,,0,0,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,,,,0,,0,0,,',
'0,0,,0,244,0,0,0,0,0,0,0,0,0,,0,0,0,,0,244,244,244,244,244,244,244,244',
'244,244,244,,244,244,244,,,,,244,,244,244,,,244,244,,244,,244,244,244',
'244,244,244,244,244,244,409,244,244,244,,244,409,409,,,,,,,,,409,409',
'409,409,409,409,409,321,321,321,321,246,246,246,246,321,321,321,,246',
'246,246,321,,,321,246,,,246,,202,202,409,409,,409,409,409,,409,202,202',
'202,202,202,202,202,,,,,,229,229,,,,321,,,,246,229,229,229,229,229,229',
'229,,,110,110,202,202,,202,202,202,,202,110,110,110,110,110,110,110',
',,,,,111,111,229,229,,229,229,229,,229,111,111,111,111,111,111,111,',
',112,112,110,110,,110,110,110,,110,112,112,112,112,112,112,112,,,,,',
'113,113,111,111,,111,111,111,,111,113,113,113,113,113,113,113,,,114',
'114,112,112,,112,112,112,,112,114,114,114,114,114,114,114,,,,,,115,115',
'113,113,,113,113,113,,113,115,115,115,115,115,115,115,,,228,228,114',
'114,,114,114,114,,114,228,228,228,228,228,228,228,,,,,,255,255,115,115',
',115,115,115,,115,255,255,255,255,255,255,255,,,118,118,228,228,,228',
'228,228,,228,118,118,118,118,118,118,118,,,,,,119,119,255,255,,255,255',
'255,,255,119,119,119,119,119,119,119,,,257,257,118,118,,118,118,118',
',118,257,257,257,257,257,257,257,,,,,,201,201,119,119,,119,119,119,',
'119,201,201,201,201,201,201,201,,,352,352,257,257,,257,257,257,,257',
'352,352,352,352,352,352,352,,,,,,352,,201,201,,201,201,201,,201,,,,',
',,,,,200,200,352,352,,352,352,352,,352,200,200,200,200,200,200,200,107',
'107,,,,,,,199,199,107,107,107,107,107,107,107,,199,199,199,199,199,199',
'199,,200,200,,200,200,200,,200,,,,,,,,,,107,107,,107,107,107,,107,199',
'199,,199,199,199,,199,198,198,,,,,,,106,106,198,198,198,198,198,198',
'198,,106,106,106,106,106,106,106,443,443,,,,,,,,,443,443,443,443,443',
'443,443,,198,198,,198,198,198,,198,106,106,,106,106,106,,106,,,,,,,',
'196,196,443,443,,443,443,443,,443,196,196,196,196,196,196,196,195,195',
',,,,,,192,192,195,195,195,195,195,195,195,,192,192,192,192,192,192,192',
',196,196,,196,196,196,,196,,,,,,,,,,195,195,,195,195,195,,195,192,192',
',192,192,192,,192,188,188,,,,,,,191,191,188,188,188,188,188,188,188',
',191,191,191,191,191,191,191,190,190,,,,,,,,,190,190,190,190,190,190',
'190,,188,188,,188,188,188,,188,191,191,,191,191,191,,191,,,,,,,,189',
'189,190,190,,190,190,190,,190,189,189,189,189,189,189,189,187,187,,',
',,,,186,186,187,187,187,187,187,187,187,,186,186,186,186,186,186,186',
',189,189,,189,189,189,,189,,,,,,,,,,187,187,,187,187,187,,187,186,186',
',186,186,186,,186,185,185,,,,,,,197,197,185,185,185,185,185,185,185',
',197,197,197,197,197,197,197,,,317,317,317,317,168,168,168,168,317,317',
'317,,168,168,168,317,185,185,317,185,185,185,,185,197,197,,197,197,197',
',197,,318,318,318,318,,,,,318,318,318,,,,317,318,,,318,,178,178,178',
'178,178,178,178,178,178,178,178,,,,178,,,,,178,,178,178,,,178,178,318',
'178,,,,,,,,,178,178,,,178,178,,178,372,372,372,372,372,372,372,372,372',
'372,372,,,,372,,,,,372,,372,372,,,372,372,,372,,,,,,,,,372,372,,,372',
'372,,372,177,177,177,177,177,177,177,177,177,177,177,,,,177,,,,,177',
',177,177,,,177,177,,177,,,,,,,,,177,177,,177,177,177,,177,371,371,371',
'371,371,371,371,371,371,371,371,,,,371,,,,,371,,371,371,,,371,371,,371',
',,,,,,,,371,371,,,371,371,,371,176,176,176,176,176,176,176,176,176,176',
'176,,,,176,,,,,176,,176,176,,,176,176,,176,,,,,,,,,176,176,,176,176',
'176,,176,179,179,179,179,179,179,179,179,179,179,179,,,,179,,,,,179',
',179,179,,,179,179,,179,,,,,,,,,179,179,,,179,179,,179,163,163,163,163',
'163,163,163,163,163,163,163,,,,163,,,,,163,,163,163,,,163,163,,163,',
',,,,,,,163,163,,,163,163,,163,28,28,28,28,28,28,28,28,28,28,28,28,,28',
'28,167,167,167,167,261,261,261,261,167,167,167,,261,261,261,262,262',
'262,262,264,264,264,264,262,262,262,,264,264,264,263,263,263,263,,,',
',263,263,263' ]
        racc_action_check = arr = ::Array.new(2831, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1531,   482,    91,   nil,   nil,    26,   564,   932,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   176,
   nil,   nil,   nil,   nil,   615,   nil,   nil,   nil,  2700,   nil,
    15,   nil,    11,   450,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   460,   nil,   453,   428,   414,   nil,   nil,   nil,   233,   396,
   395,   nil,   437,   348,   282,   nil,   nil,    81,   193,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   412,   nil,   nil,   nil,
  1067,  1112,   386,   385,   383,   382,   358,   307,   371,   nil,
   306,   305,   297,   293,   659,   nil,  2080,  2013,   140,    51,
  1709,  1731,  1750,  1772,  1791,  1813,   549,   603,  1873,  1895,
   nil,   nil,   nil,   nil,   nil,    -8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,   116,
   272,   269,   608,   nil,   217,   216,   196,   185,   nil,   nil,
   194,  1292,  1247,   193,    16,   526,   nil,   nil,   nil,   nil,
   nil,   182,   105,  2700,    96,    93,   nil,  2787,  2408,   887,
   977,  1472,  1022,   842,   797,   nil,  2610,  2520,  2430,  2655,
   nil,   nil,   nil,   nil,   nil,  2356,  2305,  2297,  2214,  2280,
  2239,  2222,  2163,   693,   685,  2155,  2138,  2364,  2072,  2021,
  1996,  1936,  1668,   629,   621,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,
    62,    53,    47,   nil,   nil,   nil,   nil,   nil,  1832,  1690,
   nil,   nil,   nil,   nil,   nil,    43,   nil,    13,  1337,  1382,
  1427,   nil,     3,   276,  1576,   765,  1669,    18,   nil,   nil,
   -13,   181,   nil,     6,   nil,  1854,   nil,  1914,   nil,   nil,
   nil,  2791,  2802,  2817,  2806,   nil,    97,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   129,   nil,
   nil,   nil,   nil,   nil,   150,   155,   159,    18,   nil,   nil,
   nil,   171,   174,   156,   nil,   386,   104,  2404,  2437,   nil,
   nil,  1665,   -11,   nil,   182,   nil,   221,   nil,   184,   231,
   nil,   244,   248,   nil,   244,   -16,   259,   nil,   271,   nil,
     0,   nil,   nil,   250,   nil,   nil,   nil,   262,   nil,   nil,
   -44,   287,  1955,   nil,   nil,   nil,   nil,   nil,   262,   nil,
   nil,   285,   nil,   nil,   nil,   296,   -19,   nil,   259,   nil,
   nil,  2565,  2475,   nil,   nil,   310,   nil,   286,   318,   nil,
   321,   326,   nil,   341,   346,   nil,   nil,   357,   nil,   nil,
    -9,   nil,   359,   360,   361,   nil,   nil,   nil,   nil,   362,
   363,   346,   nil,   nil,   366,   -13,   nil,   nil,   nil,  1627,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,  1202,  1157,
   752,   nil,   nil,    55,   nil,   nil,   460,   nil,   399,   nil,
   403,   417,   410,   701,   297,   475,   446,   447,   nil,   nil,
   438,   nil,   -34,  2097,   nil,   424,   nil,   nil,   nil,   452,
   nil,   -15,   nil,   nil,   nil,   465,   nil,   461,   462,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   473,   nil,   464,   nil ]

racc_action_default = [
  -254,  -254,  -254,    -2,    -3,    -4,    -7,  -254,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,
   -32,   -33,   -34,   -35,   -36,   -41,   -42,   -43,   -46,   -45,
   -64,   -58,   -64,  -246,   -74,   -75,   -76,   -77,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -250,
  -254,  -112,  -254,  -254,  -254,  -123,  -248,  -248,  -253,  -246,
  -246,  -248,  -254,   -78,   -78,  -166,  -167,   -78,   -78,   -78,
  -171,  -173,  -250,  -177,  -178,  -183,  -254,    -1,  -240,  -241,
    -5,    -6,  -246,  -246,  -246,  -246,  -246,  -246,   -78,   -17,
  -246,  -246,  -246,  -246,   -44,  -198,  -254,  -254,  -254,  -254,
  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,
   -51,   -52,   -53,   -54,   -55,   -64,   -57,   -61,   -65,   -66,
   -68,   -80,   -82,   -83,   -84,   -59,  -253,   -62,  -250,  -254,
  -246,  -246,  -254,  -250,  -246,  -246,  -246,  -254,  -250,  -253,
  -246,  -254,  -254,  -246,  -254,   -79,  -164,  -165,  -168,  -169,
  -170,  -246,  -246,  -254,  -246,  -246,   470,    -8,    -9,  -254,
  -254,  -254,  -254,  -254,  -254,   -16,  -254,  -254,  -254,  -254,
  -199,  -200,  -238,  -239,  -201,  -254,  -254,  -254,  -254,  -254,
  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,  -254,
  -254,  -254,  -254,  -254,  -254,  -206,  -209,  -212,  -215,  -218,
  -221,  -224,  -233,  -227,  -230,  -236,  -237,   -56,   -81,   -70,
   -70,  -254,  -246,  -247,  -106,  -107,  -108,  -109,  -254,  -254,
  -115,  -117,  -250,  -250,  -250,  -246,  -253,  -126,  -189,  -254,
  -254,  -142,  -246,  -254,  -254,  -145,  -254,  -254,  -159,  -253,
  -254,  -176,   -46,   -64,  -251,  -253,  -180,  -253,  -185,   -10,
   -11,   -12,   -13,   -14,   -15,   -30,   -36,   -31,   -37,   -39,
   -38,   -40,  -202,  -203,  -207,  -210,  -213,  -216,  -219,  -222,
  -225,  -234,  -228,  -231,  -204,  -205,  -208,  -211,  -214,  -217,
  -220,  -223,  -226,  -235,  -229,  -232,  -246,   -72,  -246,  -252,
   -63,   -49,   -50,  -110,  -246,  -246,  -246,  -246,  -120,  -244,
  -245,  -254,  -254,  -130,   -47,  -194,  -190,  -254,  -254,  -253,
  -144,  -254,  -254,  -150,  -151,  -153,  -246,  -157,  -254,  -254,
  -253,  -246,  -246,  -175,  -254,  -246,  -254,  -186,  -246,  -253,
  -246,  -253,   -60,  -254,  -253,  -253,  -119,  -254,  -122,  -124,
  -132,  -246,  -128,  -250,  -250,  -250,  -134,  -136,  -137,  -139,
  -140,  -254,  -250,  -250,  -152,  -246,  -254,  -253,   -78,  -251,
  -251,  -254,  -254,  -179,  -181,  -246,  -184,  -254,  -254,   -71,
  -254,  -254,  -113,  -254,  -254,  -121,  -125,  -246,  -131,   -48,
  -254,  -250,  -246,  -246,  -246,  -249,  -138,  -249,  -143,  -246,
  -246,  -130,  -251,  -158,  -254,  -254,  -172,  -174,  -182,  -254,
   -67,   -73,   -69,  -116,  -118,  -133,  -250,  -246,  -191,  -192,
  -193,  -250,  -250,  -147,  -146,  -253,  -254,  -160,  -246,  -251,
  -246,  -246,  -254,  -195,  -196,  -197,  -246,  -246,  -250,  -149,
  -254,  -250,  -130,  -254,  -188,  -126,  -129,  -253,  -253,  -246,
  -154,  -254,  -161,  -162,  -163,  -246,  -127,  -254,  -254,  -148,
  -155,  -187,  -135,  -141,  -249,  -250,  -246,  -253,  -254,  -156 ]

racc_goto_table = [
   137,    46,   253,   149,   325,   156,   157,   333,    46,   158,
   159,   160,   154,   367,    23,   303,   304,   252,   350,   313,
   105,    23,   356,   360,   421,   135,   422,   251,   268,   270,
   175,   236,   252,   252,   230,   342,   151,   152,   269,   271,
   266,   266,   335,    48,   338,   125,   248,   145,   146,   352,
    48,   231,   153,   296,   298,   265,   267,   305,   306,   169,
   170,   171,   172,   173,   174,   218,   307,   176,   177,   178,
   179,   144,   104,   340,   386,   390,   222,     6,   220,   362,
   363,   219,   224,   136,    99,   395,   397,     5,   322,   365,
   326,    46,    46,   465,    87,   218,   180,   464,     2,   328,
   249,   250,   452,   161,    23,    23,   425,   228,   229,   162,
   254,   255,   239,   240,   164,   257,   165,   244,   217,   337,
   247,   316,   406,   407,     1,   nil,   nil,   454,   nil,   nil,
   nil,   256,   258,    48,    48,   nil,   nil,   nil,   nil,   389,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   453,   416,   nil,
   nil,   nil,    46,    46,   nil,   426,   460,   nil,   nil,   nil,
   nil,   nil,   nil,   428,    46,    23,    23,   167,   168,   nil,
    46,    46,    46,    46,    46,    46,   139,    46,    46,    46,
    46,   319,   443,    23,    23,    23,    23,    23,    23,   300,
    23,    23,   344,   345,    48,    48,   430,   nil,   nil,   163,
   nil,   nil,   311,   nil,   nil,   nil,    48,   nil,   nil,   nil,
   253,   253,    48,    48,    48,    48,    48,    48,   nil,    48,
    48,    48,    48,   nil,   nil,   252,   252,   456,   245,   246,
   455,   269,   271,   nil,   nil,   339,   nil,   341,   nil,    46,
    46,    46,   nil,   nil,   nil,    46,   259,   260,   261,   262,
   263,   264,    23,    23,    23,   223,   nil,   nil,    23,   nil,
   235,   nil,   nil,   nil,   nil,   242,    47,   nil,   nil,   nil,
   nil,   343,   nil,    47,   347,   nil,   132,   nil,   nil,   nil,
   nil,    48,    48,    48,   nil,   nil,   nil,    48,   nil,   nil,
   388,   nil,   nil,   366,   nil,   nil,   nil,   147,   371,   372,
   405,   nil,   374,   nil,   401,   377,   nil,   380,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   315,   317,   318,   132,   132,
   132,   321,   nil,   132,   132,   132,   415,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   423,   424,
   nil,   nil,   408,   nil,   132,   nil,   nil,   nil,   nil,   308,
   309,   310,   nil,   nil,   nil,   nil,    47,    47,   439,   418,
   419,   420,   nil,   nil,   nil,   221,   441,   442,   nil,   nil,
   445,   132,    46,    46,   nil,   447,   448,   nil,   243,   nil,
   nil,   nil,   132,   nil,   432,   nil,   nil,   nil,   459,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   444,   nil,   nil,
   nil,   132,   nil,   nil,   nil,   467,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    48,   nil,    47,    47,    46,
    46,    46,   461,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,    23,    23,    23,    47,    47,    47,    47,    47,
    47,   nil,    47,    47,    47,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,    48,    48,   nil,   312,   nil,   nil,   nil,   nil,
   392,   393,   394,   nil,   301,   301,   nil,   nil,   329,   399,
   400,   nil,   nil,   nil,   334,   nil,   336,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   433,   434,   435,   nil,   nil,
   nil,   301,   nil,   301,    47,    47,    47,   nil,   417,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   431,   nil,   nil,   nil,   nil,   436,   437,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,   nil,
   nil,   nil,   nil,   nil,   nil,   449,   nil,   nil,   451,   370,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   378,   nil,
   381,   nil,   nil,   383,   384,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   466,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   404,   nil,   301,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   132,   nil,   nil,   nil,   181,   184,
   nil,   nil,   205,   206,   207,   208,   209,   210,   211,   213,
   215,   216,   nil,   nil,   nil,   nil,   nil,    47,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   440,   301,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   132,   nil,   nil,   nil,   457,   458,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    47,    47,   nil,   nil,   301,
   nil,   nil,   nil,   nil,   nil,   nil,   468,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   282,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   294 ]

racc_goto_check = [
     6,    34,    37,    89,    82,     7,     7,    93,    34,     7,
     7,     7,    46,    95,    23,    32,    32,    28,    79,    78,
    53,    23,    84,    84,    85,    39,    85,    24,    25,    25,
     7,    72,    28,    28,    71,    45,     6,     6,    26,    26,
    24,    24,    32,    36,    32,    38,    71,    83,    83,    31,
    36,    73,    83,    48,    48,    20,    20,    74,    75,     6,
     6,     6,     6,     6,     6,    46,    76,     6,     6,     6,
     6,    77,    29,    52,    80,    81,    46,     5,    51,    82,
    82,    50,    67,    43,     5,    86,    87,     4,    90,    91,
    92,    34,    34,    85,     3,    46,    53,    94,     2,    96,
    49,    49,    97,    98,    23,    23,    79,     6,     6,    99,
   100,   101,     6,     6,   102,   103,   104,     6,    39,   105,
     6,   106,    93,    93,     1,   nil,   nil,    95,   nil,   nil,
   nil,     6,     6,    36,    36,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    79,    82,   nil,
   nil,   nil,    34,    34,   nil,    93,    84,   nil,   nil,   nil,
   nil,   nil,   nil,    82,    34,    23,    23,     5,     5,   nil,
    34,    34,    34,    34,    34,    34,    66,    34,    34,    34,
    34,    49,    93,    23,    23,    23,    23,    23,    23,     6,
    23,    23,    72,    72,    36,    36,    32,   nil,   nil,    66,
   nil,   nil,     6,   nil,   nil,   nil,    36,   nil,   nil,   nil,
    37,    37,    36,    36,    36,    36,    36,    36,   nil,    36,
    36,    36,    36,   nil,   nil,    28,    28,    78,     5,     5,
    32,    26,    26,   nil,   nil,    49,   nil,    49,   nil,    34,
    34,    34,   nil,   nil,   nil,    34,     5,     5,     5,     5,
     5,     5,    23,    23,    23,    66,   nil,   nil,    23,   nil,
    66,   nil,   nil,   nil,   nil,    66,    35,   nil,   nil,   nil,
   nil,     6,   nil,    35,     6,   nil,    33,   nil,   nil,   nil,
   nil,    36,    36,    36,   nil,   nil,   nil,    36,   nil,   nil,
    49,   nil,   nil,     6,   nil,   nil,   nil,    44,     6,     6,
     7,   nil,     6,   nil,    49,     6,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,     5,     5,    33,    33,
    33,     5,   nil,    33,    33,    33,    49,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,
   nil,   nil,     6,   nil,    33,   nil,   nil,   nil,   nil,    66,
    66,    66,   nil,   nil,   nil,   nil,    35,    35,    89,     6,
     6,     6,   nil,   nil,   nil,    44,    46,    49,   nil,   nil,
    49,    33,    34,    34,   nil,    49,    49,   nil,    44,   nil,
   nil,   nil,    33,   nil,     6,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,    33,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    36,   nil,    35,    35,    34,
    34,    34,     6,   nil,   nil,   nil,   nil,   nil,   nil,    35,
   nil,   nil,    23,    23,    23,    35,    35,    35,    35,    35,
    35,   nil,    35,    35,    35,    35,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,    36,    36,   nil,    44,   nil,   nil,   nil,   nil,
    66,    66,    66,   nil,    33,    33,   nil,   nil,    44,    66,
    66,   nil,   nil,   nil,    44,   nil,    44,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,     5,     5,   nil,   nil,
   nil,    33,   nil,    33,    35,    35,    35,   nil,    66,   nil,
    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,    66,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,
   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,    66,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,
    44,   nil,   nil,    44,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   107,   107,
   nil,   nil,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   nil,   nil,   nil,   nil,   nil,    35,    35,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,    44,    44,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35,    35,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107 ]

racc_goto_pointer = [
   nil,   124,    98,    92,    87,    77,   -33,   -68,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -121,   nil,   nil,    14,  -136,  -150,  -140,   nil,  -146,    44,
   nil,  -265,  -213,   246,     1,   266,    43,  -161,    15,    -7,
   nil,   nil,   nil,    50,   229,  -264,   -60,   nil,  -166,   -61,
   -48,   -52,  -224,    -8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   117,   -57,   nil,   nil,
   nil,  -108,  -113,   -91,  -173,  -173,  -166,     6,  -218,  -295,
  -276,  -277,  -242,   -19,  -295,  -371,  -271,  -274,   nil,   -65,
  -157,  -236,  -157,  -247,  -363,  -315,  -149,  -340,    23,    28,
   -53,   -53,    30,   -50,    31,  -138,  -117,   512,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,   123,    24,    27,    25,    26,    28,   nil,
    29,   nil,   nil,   182,   121,   122,   124,    30,   155,   126,
    31,    32,    33,   nil,   nil,   nil,   131,   128,   nil,   237,
   nil,   nil,   nil,   134,    38,    39,    40,    41,    42,    43,
    44,    45,    55,    56,    57,    58,   nil,   nil,    60,    61,
    62,   324,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_3,
  1, 92, :_reduce_none,
  2, 92, :_reduce_5,
  2, 92, :_reduce_6,
  1, 94, :_reduce_7,
  3, 94, :_reduce_8,
  3, 94, :_reduce_9,
  4, 95, :_reduce_10,
  4, 95, :_reduce_11,
  4, 95, :_reduce_12,
  4, 95, :_reduce_13,
  4, 95, :_reduce_14,
  4, 95, :_reduce_15,
  3, 95, :_reduce_16,
  2, 95, :_reduce_17,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 98, :_reduce_none,
  4, 109, :_reduce_30,
  4, 109, :_reduce_31,
  1, 109, :_reduce_none,
  1, 110, :_reduce_33,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 112, :_reduce_none,
  4, 112, :_reduce_37,
  4, 112, :_reduce_38,
  4, 114, :_reduce_39,
  4, 114, :_reduce_40,
  1, 114, :_reduce_41,
  1, 114, :_reduce_42,
  1, 111, :_reduce_none,
  2, 111, :_reduce_44,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  0, 121, :_reduce_47,
  2, 121, :_reduce_48,
  1, 122, :_reduce_none,
  1, 122, :_reduce_50,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 115, :_reduce_56,
  2, 120, :_reduce_57,
  1, 120, :_reduce_none,
  2, 130, :_reduce_59,
  5, 131, :_reduce_60,
  2, 132, :_reduce_61,
  1, 133, :_reduce_62,
  3, 133, :_reduce_63,
  0, 129, :_reduce_64,
  1, 129, :_reduce_none,
  0, 140, :_reduce_66,
  6, 137, :_reduce_67,
  0, 141, :_reduce_68,
  6, 137, :_reduce_69,
  0, 138, :_reduce_70,
  3, 138, :_reduce_71,
  0, 142, :_reduce_72,
  3, 142, :_reduce_73,
  1, 127, :_reduce_74,
  1, 127, :_reduce_75,
  1, 127, :_reduce_76,
  1, 127, :_reduce_77,
  0, 97, :_reduce_78,
  1, 97, :_reduce_none,
  1, 128, :_reduce_80,
  2, 128, :_reduce_81,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 144, :_reduce_95,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 154, :_reduce_106,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  4, 106, :_reduce_110,
  1, 158, :_reduce_none,
  1, 117, :_reduce_112,
  6, 159, :_reduce_113,
  1, 160, :_reduce_none,
  0, 164, :_reduce_115,
  7, 107, :_reduce_116,
  0, 165, :_reduce_117,
  7, 107, :_reduce_118,
  3, 163, :_reduce_119,
  1, 166, :_reduce_120,
  3, 166, :_reduce_121,
  5, 108, :_reduce_122,
  0, 167, :_reduce_123,
  5, 149, :_reduce_124,
  4, 162, :_reduce_125,
  0, 168, :_reduce_126,
  7, 168, :_reduce_127,
  0, 171, :_reduce_128,
  4, 171, :_reduce_129,
  0, 169, :_reduce_130,
  2, 169, :_reduce_131,
  0, 170, :_reduce_132,
  2, 170, :_reduce_133,
  0, 176, :_reduce_134,
  11, 147, :_reduce_135,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  2, 174, :_reduce_none,
  1, 174, :_reduce_none,
  0, 177, :_reduce_140,
  11, 148, :_reduce_141,
  3, 145, :_reduce_142,
  6, 145, :_reduce_143,
  4, 145, :_reduce_144,
  0, 180, :_reduce_145,
  7, 178, :_reduce_146,
  6, 179, :_reduce_147,
  9, 179, :_reduce_148,
  7, 179, :_reduce_149,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_none,
  0, 181, :_reduce_153,
  9, 146, :_reduce_154,
  0, 184, :_reduce_155,
  16, 151, :_reduce_156,
  1, 182, :_reduce_157,
  3, 182, :_reduce_158,
  0, 186, :_reduce_159,
  7, 150, :_reduce_160,
  5, 185, :_reduce_161,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 99, :_reduce_164,
  2, 100, :_reduce_165,
  1, 101, :_reduce_166,
  1, 102, :_reduce_167,
  2, 103, :_reduce_168,
  2, 104, :_reduce_169,
  2, 105, :_reduce_170,
  0, 188, :_reduce_171,
  6, 124, :_reduce_172,
  0, 189, :_reduce_173,
  6, 125, :_reduce_174,
  4, 113, :_reduce_175,
  1, 190, :_reduce_176,
  1, 155, :_reduce_177,
  0, 192, :_reduce_178,
  5, 152, :_reduce_179,
  1, 191, :_reduce_180,
  3, 191, :_reduce_181,
  4, 191, :_reduce_182,
  0, 194, :_reduce_183,
  5, 153, :_reduce_184,
  1, 193, :_reduce_185,
  2, 193, :_reduce_186,
  7, 195, :_reduce_187,
  5, 195, :_reduce_188,
  1, 139, :_reduce_189,
  2, 139, :_reduce_190,
  5, 139, :_reduce_191,
  5, 139, :_reduce_192,
  5, 139, :_reduce_193,
  1, 196, :_reduce_194,
  5, 196, :_reduce_195,
  5, 196, :_reduce_196,
  5, 196, :_reduce_197,
  1, 119, :_reduce_198,
  2, 119, :_reduce_199,
  2, 143, :_reduce_200,
  2, 143, :_reduce_201,
  3, 143, :_reduce_202,
  3, 143, :_reduce_203,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_206,
  3, 143, :_reduce_207,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  3, 143, :_reduce_none,
  2, 143, :_reduce_236,
  2, 143, :_reduce_237,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  0, 96, :_reduce_none,
  2, 96, :_reduce_none,
  0, 173, :_reduce_248,
  0, 175, :_reduce_249,
  0, 156, :_reduce_250,
  0, 183, :_reduce_251,
  0, 135, :_reduce_252,
  0, 134, :_reduce_253 ]

racc_reduce_n = 254

racc_shift_n = 470

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :DEF => 42,
  :ALIAS => 43,
  :BEGIN => 44,
  :RESCUE => 45,
  :ASSOC => 46,
  :ELSE => 47,
  :ENSURE => 48,
  :WHILE => 49,
  :DO_COND => 50,
  :UNTIL => 51,
  :IF => 52,
  :ELSIF => 53,
  :THEN => 54,
  :UNLESS => 55,
  :FOR => 56,
  :IN => 57,
  :CASE => 58,
  :WHEN => 59,
  :BREAK => 60,
  :NEXT => 61,
  :REDO => 62,
  :Retry => 63,
  :RAISE => 64,
  :RETURN => 65,
  :YIELD => 66,
  "(" => 67,
  :XSTRING_BEG => 68,
  :XSTRING_END => 69,
  "$" => 70,
  :RUBYEXP => 71,
  :LBLACK_A => 72,
  "," => 73,
  :LBRACE_H => 74,
  ">" => 75,
  "<" => 76,
  :FID => 77,
  :REDIR_WORD => 78,
  :GREATER_GREATER => 79,
  :GREATER_BAR => 80,
  :LESS_GREATER => 81,
  :LESS_LESS => 82,
  :LESS_LESS_MINUS => 83,
  :LESS_LESS_LESS => 84,
  :LESS_AND => 85,
  :GREATER_AND => 86,
  "-" => 87,
  :AND_GREATER => 88,
  :AND_GREATER_GREATER => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "DEF",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "def_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "opt_terms",
  "body_list",
  "func_arg_list",
  "@3",
  "@4",
  "func_arg_list0",
  "@5",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@6",
  "@7",
  "if_head",
  "elsif_clause",
  "@8",
  "@9",
  "for_arg",
  "lex_arg",
  "@10",
  "case_body",
  "@11",
  "cases",
  "@12",
  "@13",
  "trivial_command0",
  "array_element_list",
  "@14",
  "hash_element_list",
  "@15",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
#		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    #		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_30(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_31(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_33(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_40(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_41(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_42(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_44(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_47(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_48(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_50(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_56(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_57(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_59(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_60(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_61(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 273)
  def _reduce_62(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_63(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_64(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_66(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 296)
  def _reduce_67(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_68(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_69(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_70(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_71(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_72(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_73(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_77(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_78(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.y', 356)
  def _reduce_80(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_81(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_95(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_106(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_110(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_112(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_113(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.y', 461)
  def _reduce_115(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 463)
  def _reduce_116(val, _values, result)
    		body = Node::BeginCommand(*val[4])
		result = Node::DefCommand(val[1], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 466)
  def _reduce_117(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 468)
  def _reduce_118(val, _values, result)
    		arg = val[2]
		body = Node::BeginCommand(*val[4])
		result = Node::DefCommand(val[1], arg, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 475)
  def _reduce_119(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 480)
  def _reduce_120(val, _values, result)
    	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_121(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 490)
  def _reduce_122(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 493)
  def _reduce_123(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 495)
  def _reduce_124(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_125(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_126(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_127(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_128(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_129(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 529)
  def _reduce_130(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 534)
  def _reduce_131(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 538)
  def _reduce_132(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 542)
  def _reduce_133(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 545)
  def _reduce_134(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 547)
  def _reduce_135(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.y', 555)
  def _reduce_140(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 557)
  def _reduce_141(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 562)
  def _reduce_142(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_143(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 570)
  def _reduce_144(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 573)
  def _reduce_145(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 575)
  def _reduce_146(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 579)
  def _reduce_147(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 583)
  def _reduce_148(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_149(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.y', 594)
  def _reduce_153(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 596)
  def _reduce_154(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 600)
  def _reduce_155(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 602)
  def _reduce_156(val, _values, result)
    		result = Node::ForCommand(val[3], val[7], val[13])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 607)
  def _reduce_157(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 612)
  def _reduce_158(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 616)
  def _reduce_159(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 618)
  def _reduce_160(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 623)
  def _reduce_161(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.y', 638)
  def _reduce_164(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_165(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 648)
  def _reduce_166(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 653)
  def _reduce_167(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 658)
  def _reduce_168(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 663)
  def _reduce_169(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 668)
  def _reduce_170(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 671)
  def _reduce_171(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 674)
  def _reduce_172(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 677)
  def _reduce_173(val, _values, result)
    @lex.indent_push(:BACK_QUOTE); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 679)
  def _reduce_174(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 719)
  def _reduce_175(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 724)
  def _reduce_176(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 777)
  def _reduce_177(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 780)
  def _reduce_178(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 782)
  def _reduce_179(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 787)
  def _reduce_180(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 792)
  def _reduce_181(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 797)
  def _reduce_182(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 801)
  def _reduce_183(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 803)
  def _reduce_184(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 808)
  def _reduce_185(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 813)
  def _reduce_186(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 818)
  def _reduce_187(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 823)
  def _reduce_188(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_189(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 833)
  def _reduce_190(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 837)
  def _reduce_191(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 841)
  def _reduce_192(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 846)
  def _reduce_193(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 851)
  def _reduce_194(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 855)
  def _reduce_195(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 860)
  def _reduce_196(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_197(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 872)
  def _reduce_198(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 876)
  def _reduce_199(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 882)
  def _reduce_200(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 887)
  def _reduce_201(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 892)
  def _reduce_202(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 897)
  def _reduce_203(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'parser.y', 904)
  def _reduce_206(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 909)
  def _reduce_207(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'parser.y', 948)
  def _reduce_236(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 953)
  def _reduce_237(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'parser.y', 972)
  def _reduce_248(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 973)
  def _reduce_249(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 975)
  def _reduce_250(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 976)
  def _reduce_251(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 977)
  def _reduce_252(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 979)
  def _reduce_253(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
