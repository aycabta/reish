#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 894)

  def initialize(lex)
    @yydebug = true

    @lex = lex
  end

  attr_accessor :yydebug

  def next_token
    @lex.racc_token
  end

#   def on_error(token_id, token, value_stack)
    
#     puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
#     p value_stack
#     raise

#   end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'123,124,141,123,124,233,233,233,232,232,232,233,233,156,232,232,127',
'114,121,337,321,121,306,123,124,296,45,46,47,48,49,50,55,141,339,327',
'230,350,328,127,114,300,300,300,123,124,336,300,141,45,46,47,48,49,50',
'55,141,344,141,74,75,131,76,77,78,329,79,100,101,102,103,104,105,106',
'107,108,109,110,111,132,112,113,74,75,290,76,77,78,141,79,100,101,102',
'103,104,105,106,107,108,109,110,111,137,112,113,127,114,-109,139,94',
'95,141,96,97,141,45,46,47,48,49,50,55,323,141,324,325,185,186,127,114',
'187,188,189,190,191,192,193,194,45,46,47,48,49,50,55,141,213,319,74',
'75,215,76,77,78,214,79,100,101,102,103,104,105,106,107,108,109,110,111',
'321,112,113,74,75,282,76,77,78,282,79,100,101,102,103,104,105,106,107',
'108,109,110,111,-109,112,113,127,114,96,97,84,85,82,83,141,223,45,46',
'47,48,49,50,55,141,141,141,141,175,176,127,114,177,178,179,180,181,182',
'183,184,45,46,47,48,49,50,55,339,340,342,74,75,141,76,77,78,345,79,100',
'101,102,103,104,105,106,107,108,109,110,111,141,112,113,74,75,347,76',
'77,78,141,79,100,101,102,103,104,105,106,107,108,109,110,111,141,112',
'113,127,114,353,355,141,141,141,141,141,365,45,46,47,48,49,50,55,88',
'89,90,91,141,141,127,114,92,86,87,141,141,141,141,376,45,46,47,48,49',
'50,55,378,379,380,74,75,141,76,77,78,141,79,100,101,102,103,104,105',
'106,107,108,109,110,111,141,112,113,74,75,141,76,77,78,141,79,100,101',
'102,103,104,105,106,107,108,109,110,111,389,112,113,127,114,390,321',
'80,393,141,141,141,141,45,46,47,48,49,50,55,88,89,90,91,141,141,127',
'114,92,86,87,141,141,141,141,141,45,46,47,48,49,50,55,141,290,408,74',
'75,141,76,77,78,412,79,100,101,102,103,104,105,106,107,108,109,110,111',
'141,112,113,74,75,141,76,77,78,418,79,100,101,102,103,104,105,106,107',
'108,109,110,111,419,112,113,127,114,141,141,423,,,,,,45,46,47,48,49',
'50,55,88,89,90,91,,,127,114,92,86,87,,,,,,45,46,47,48,49,50,55,,,,74',
'75,,76,77,78,,79,100,101,102,103,104,105,106,107,108,109,110,111,,112',
'113,74,75,,76,77,78,,79,100,101,102,103,104,105,106,107,108,109,110',
'111,,112,113,127,114,,,,,,,,,45,46,47,48,49,50,55,88,89,90,91,,,173',
'114,92,86,87,,,,,,45,46,47,48,49,50,55,,,,74,75,,76,77,78,,79,100,101',
'102,103,104,105,106,107,108,109,110,111,,112,113,74,75,,76,77,78,-106',
'79,,-109,,173,114,,96,97,,,,,278,45,46,47,48,49,50,55,,173,114,,,,,',
',173,114,45,46,47,48,49,50,55,,45,46,47,48,49,50,55,74,75,,76,77,78',
',79,,,,,,,,,,,74,75,276,76,77,78,,79,74,75,,76,77,78,,79,-240,-240,-240',
'-240,266,173,114,,92,86,87,,264,173,114,45,46,47,48,49,50,55,,45,46',
'47,48,49,50,55,,,88,89,90,91,88,89,90,91,92,86,87,,92,86,87,327,74,75',
'328,76,77,78,,79,74,75,,76,77,78,7,79,88,89,90,91,202,,,,92,86,87,,204',
'329,30,31,32,33,45,46,47,48,49,50,55,,59,-240,-240,-240,-240,60,,61',
'63,92,86,87,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30',
'31,32,33,45,46,47,48,49,50,55,,59,88,89,90,91,60,,61,63,92,86,87,,64',
'65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46',
'47,48,49,50,55,,59,-240,-240,-240,-240,60,,61,63,92,86,87,,64,65,,66',
'7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49',
'50,55,,59,,,,,60,,61,63,,298,,,64,65,,66,7,67,68,69,70,71,72,73,74,75',
',76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,-240,-240,-240,-240',
'60,,61,63,92,86,87,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78',
',79,30,31,32,33,45,46,47,48,49,50,55,,59,88,89,90,91,60,,61,63,92,86',
'87,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33',
'45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,7,67,68,69,70,71',
'72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60',
',61,63,,,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31',
'32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,7,67,68,69',
'70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59',
',,,,60,,61,63,,,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,',
'79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66',
'7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49',
'50,55,,59,,,,,60,,61,63,,,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,',
'76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,',
'64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45',
'46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,7,67,68,69,70,71,72',
'73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,',
'61,63,,,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31',
'32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,7,67,68,69',
'70,71,72,73,74,75,,76,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59',
',,,,60,,61,63,,,,,64,65,,66,,67,68,69,70,71,72,73,74,75,,76,77,78,7',
'79,,,3,4,,,,,,,,,,,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63',
',,,,64,65,,66,7,67,68,69,70,71,72,73,74,75,,76,77,78,,79,30,31,32,33',
'45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,,67,68,69,70,71',
'72,73,74,75,395,76,77,78,,79,285,114,,,,,,,,,45,46,47,48,49,50,55,88',
'89,90,91,88,89,90,91,92,86,87,,92,86,87,233,,,232,233,,,232,,173,114',
'74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,,,,173,114,,,,300,,,,300',
'45,46,47,48,49,50,55,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50',
'55,,,,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,173,114,74',
'75,,76,77,78,,79,45,46,47,48,49,50,55,,,,,,173,114,74,75,,76,77,78,',
'79,45,46,47,48,49,50,55,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49',
'50,55,,,,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,173,114',
'74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,,,,173,114,74,75,,76,77,78',
',79,45,46,47,48,49,50,55,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49',
'50,55,,,,,,285,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,,,,359,74',
'75,,76,77,78,,79,,,,,,,,,,,,,173,114,74,75,,76,77,78,,79,45,46,47,48',
'49,50,55,173,114,,,,,,,173,114,45,46,47,48,49,50,55,,45,46,47,48,49',
'50,55,,74,75,,76,77,78,,79,,,,,,,,,,74,75,,76,77,78,,79,74,75,,76,77',
'78,,79,173,114,,,,,,,285,114,45,46,47,48,49,50,55,,45,46,47,48,49,50',
'55,173,114,,,,,,,,,45,46,47,48,49,50,55,,74,75,,76,77,78,,79,74,75,',
'76,77,78,,79,,,,,,,,173,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55',
'285,114,,,,,,,173,114,45,46,47,48,49,50,55,,45,46,47,48,49,50,55,,74',
'75,,76,77,78,,79,,,,,,,,,,74,75,,76,77,78,,79,74,75,,76,77,78,,79,173',
'114,,,,,,,173,114,45,46,47,48,49,50,55,,45,46,47,48,49,50,55,285,114',
',,,,,,,,45,46,47,48,49,50,55,,74,75,,76,77,78,,79,74,75,,76,77,78,,79',
',,,,,,,285,114,74,75,,76,77,78,,79,45,46,47,48,49,50,55,173,114,,,,',
',,173,114,45,46,47,48,49,50,55,,45,46,47,48,49,50,55,,74,75,,76,77,78',
',79,,,,,,,,,,74,75,,76,77,78,,79,74,75,,76,77,78,,79,173,114,,,,,,,173',
'114,45,46,47,48,49,50,55,,45,46,47,48,49,50,55,173,114,,,,,,,,,45,46',
'47,48,49,50,55,,74,75,,76,77,78,,79,74,75,,76,77,78,,79,,,,,,,,173,114',
'74,75,,76,77,78,,79,45,46,47,48,49,50,55,285,114,,,,,,,,,45,46,47,48',
'49,50,55,,,,,,,,,,74,75,,76,77,78,,79,,,,,,,,,,74,75,,76,77,78,,79,88',
'89,90,91,,,,,92,86,87,,,,,327,,,328,,,30,31,32,33,45,46,47,48,49,50',
'55,,59,,,,,60,,61,63,,,,329,64,65,,66,,,,,,,,,74,75,,,77,78,,79,30,31',
'32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,,,,,,,,,74',
'75,,,77,78,,79,30,31,32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,',
',,64,65,,66,,,,,,,,,74,75,,,77,78,,79,30,31,32,33,45,46,47,48,49,50',
'55,,59,,,,,60,,61,63,,,,,64,65,,66,,,,,,,,,74,75,,76,77,78,,79,30,31',
'32,33,45,46,47,48,49,50,55,,59,,,,,60,,61,63,,,,,64,65,,66,,,,,,,,,74',
'75,,76,77,78,,79,100,101,102,103,104,105,106,107,108,109,110,111,,112',
'113,100,101,102,103,104,105,106,107,108,109,110,111,,112,113' ]
        racc_action_table = arr = ::Array.new(2730, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'27,27,309,238,238,299,298,372,299,298,372,358,144,80,358,144,27,27,27',
'303,404,238,235,119,119,225,27,27,27,27,27,27,27,316,404,392,143,316',
'392,119,119,299,298,372,29,29,303,358,94,119,119,119,119,119,119,119',
'95,309,224,27,27,56,27,27,27,392,27,27,27,27,27,27,27,27,27,27,27,27',
'27,58,27,27,119,119,219,119,119,119,91,119,119,119,119,119,119,119,119',
'119,119,119,119,119,62,119,119,67,67,236,62,17,17,151,236,236,281,67',
'67,67,67,67,67,67,292,283,292,292,103,103,92,92,103,103,103,103,103',
'103,103,103,92,92,92,92,92,92,92,287,130,288,67,67,130,67,67,67,130',
'67,67,67,67,67,67,67,67,67,67,67,67,67,289,67,67,92,92,211,92,92,92',
'210,92,92,92,92,92,92,92,92,92,92,92,92,92,251,92,92,145,145,251,251',
'5,5,2,2,139,136,145,145,145,145,145,145,145,135,134,133,132,102,102',
'66,66,102,102,102,102,102,102,102,102,66,66,66,66,66,66,66,304,305,308',
'145,145,131,145,145,145,310,145,145,145,145,145,145,145,145,145,145',
'145,145,145,312,145,145,66,66,313,66,66,66,314,66,66,66,66,66,66,66',
'66,66,66,66,66,66,209,66,66,339,339,318,320,321,63,323,324,325,331,339',
'339,339,339,339,339,339,158,158,158,158,332,333,279,279,158,158,158',
'334,335,152,344,346,279,279,279,279,279,279,279,349,351,352,339,339',
'355,339,339,339,96,339,339,339,339,339,339,339,339,339,339,339,339,339',
'154,339,339,279,279,155,279,279,279,229,279,279,279,279,279,279,279',
'279,279,279,279,279,279,366,279,279,73,73,367,369,1,371,97,90,382,383',
'73,73,73,73,73,73,73,384,384,384,384,89,88,370,370,384,384,384,64,387',
'388,65,394,370,370,370,370,370,370,370,396,397,398,73,73,401,73,73,73',
'402,73,73,73,73,73,73,73,73,73,73,73,73,73,87,73,73,370,370,86,370,370',
'370,409,370,370,370,370,370,370,370,370,370,370,370,370,370,410,370',
'370,68,68,413,417,422,,,,,,68,68,68,68,68,68,68,386,386,386,386,,,71',
'71,386,386,386,,,,,,71,71,71,71,71,71,71,,,,68,68,,68,68,68,,68,68,68',
'68,68,68,68,68,68,68,68,68,68,,68,68,71,71,,71,71,71,,71,71,71,71,71',
'71,71,71,71,71,71,71,71,,71,71,72,72,,,,,,,,,72,72,72,72,72,72,72,385',
'385,385,385,,,194,194,385,385,385,,,,,,194,194,194,194,194,194,194,',
',,72,72,,72,72,72,,72,72,72,72,72,72,72,72,72,72,72,72,72,,72,72,194',
'194,,194,194,194,20,194,,20,,193,193,,20,20,,,,,194,193,193,193,193',
'193,193,193,,184,184,,,,,,,183,183,184,184,184,184,184,184,184,,183',
'183,183,183,183,183,183,193,193,,193,193,193,,193,,,,,,,,,,,184,184',
'193,184,184,184,,184,183,183,,183,183,183,,183,249,249,249,249,184,110',
'110,,249,249,249,,183,111,111,110,110,110,110,110,110,110,,111,111,111',
'111,111,111,111,,,293,293,293,293,227,227,227,227,293,293,293,,227,227',
'227,293,110,110,293,110,110,110,,110,111,111,,111,111,111,220,111,6',
'6,6,6,110,,,,6,6,6,,111,293,220,220,220,220,220,220,220,220,220,220',
'220,,220,247,247,247,247,220,,220,220,247,247,247,,220,220,,220,221',
'220,220,220,220,220,220,220,220,220,,220,220,220,,220,221,221,221,221',
'221,221,221,221,221,221,221,,221,291,291,291,291,221,,221,221,291,291',
'291,,221,221,,221,222,221,221,221,221,221,221,221,221,221,,221,221,221',
',221,222,222,222,222,222,222,222,222,222,222,222,,222,246,246,246,246',
'222,,222,222,246,246,246,,222,222,,222,226,222,222,222,222,222,222,222',
'222,222,,222,222,222,,222,226,226,226,226,226,226,226,226,226,226,226',
',226,,,,,226,,226,226,,226,,,226,226,,226,164,226,226,226,226,226,226',
'226,226,226,,226,226,226,,226,164,164,164,164,164,164,164,164,164,164',
'164,,164,248,248,248,248,164,,164,164,248,248,248,,164,164,,164,84,164',
'164,164,164,164,164,164,164,164,,164,164,164,,164,84,84,84,84,84,84',
'84,84,84,84,84,,84,157,157,157,157,84,,84,84,157,157,157,,84,84,,84',
'7,84,84,84,84,84,84,84,84,84,,84,84,84,,84,7,7,7,7,7,7,7,7,7,7,7,,7',
',,,,7,,7,7,,,,,7,7,,7,163,7,7,7,7,7,7,7,7,7,,7,7,7,,7,163,163,163,163',
'163,163,163,163,163,163,163,,163,,,,,163,,163,163,,,,,163,163,,163,162',
'163,163,163,163,163,163,163,163,163,,163,163,163,,163,162,162,162,162',
'162,162,162,162,162,162,162,,162,,,,,162,,162,162,,,,,162,162,,162,161',
'162,162,162,162,162,162,162,162,162,,162,162,162,,162,161,161,161,161',
'161,161,161,161,161,161,161,,161,,,,,161,,161,161,,,,,161,161,,161,160',
'161,161,161,161,161,161,161,161,161,,161,161,161,,161,160,160,160,160',
'160,160,160,160,160,160,160,,160,,,,,160,,160,160,,,,,160,160,,160,159',
'160,160,160,160,160,160,160,160,160,,160,160,160,,160,159,159,159,159',
'159,159,159,159,159,159,159,,159,,,,,159,,159,159,,,,,159,159,,159,360',
'159,159,159,159,159,159,159,159,159,,159,159,159,,159,360,360,360,360',
'360,360,360,360,360,360,360,,360,,,,,360,,360,360,,,,,360,360,,360,361',
'360,360,360,360,360,360,360,360,360,,360,360,360,,360,361,361,361,361',
'361,361,361,361,361,361,361,,361,,,,,361,,361,361,,,,,361,361,,361,142',
'361,361,361,361,361,361,361,361,361,,361,361,361,,361,142,142,142,142',
'142,142,142,142,142,142,142,,142,,,,,142,,142,142,,,,,142,142,,142,140',
'142,142,142,142,142,142,142,142,142,,142,142,142,,142,140,140,140,140',
'140,140,140,140,140,140,140,,140,,,,,140,,140,140,,,,,140,140,,140,362',
'140,140,140,140,140,140,140,140,140,,140,140,140,,140,362,362,362,362',
'362,362,362,362,362,362,362,,362,,,,,362,,362,362,,,,,362,362,,362,',
'362,362,362,362,362,362,362,362,362,,362,362,362,0,362,,,0,0,,,,,,,',
',,,0,0,0,0,0,0,0,0,0,0,0,,0,,,,,0,,0,0,,,,,0,0,,0,85,0,0,0,0,0,0,0,0',
'0,,0,0,0,,0,85,85,85,85,85,85,85,85,85,85,85,,85,,,,,85,,85,85,,,,,85',
'85,,85,,85,85,85,85,85,85,85,85,85,376,85,85,85,,85,376,376,,,,,,,,',
'376,376,376,376,376,376,376,228,228,228,228,297,297,297,297,228,228',
'228,,297,297,297,228,,,228,297,,,297,,175,175,376,376,,376,376,376,',
'376,175,175,175,175,175,175,175,,,,,,105,105,,,,228,,,,297,105,105,105',
'105,105,105,105,,,106,106,175,175,,175,175,175,,175,106,106,106,106',
'106,106,106,,,,,,107,107,105,105,,105,105,105,,105,107,107,107,107,107',
'107,107,,,108,108,106,106,,106,106,106,,106,108,108,108,108,108,108',
'108,,,,,,109,109,107,107,,107,107,107,,107,109,109,109,109,109,109,109',
',,100,100,108,108,,108,108,108,,108,100,100,100,100,100,100,100,,,,',
',177,177,109,109,,109,109,109,,109,177,177,177,177,177,177,177,,,112',
'112,100,100,,100,100,100,,100,112,112,112,112,112,112,112,,,,,,113,113',
'177,177,,177,177,177,,177,113,113,113,113,113,113,113,,,176,176,112',
'112,,112,112,112,,112,176,176,176,176,176,176,176,,,,,,322,322,113,113',
',113,113,113,,113,322,322,322,322,322,322,322,,,,322,176,176,,176,176',
'176,,176,,,,,,,,,,,,,178,178,322,322,,322,322,322,,322,178,178,178,178',
'178,178,178,104,104,,,,,,,180,180,104,104,104,104,104,104,104,,180,180',
'180,180,180,180,180,,178,178,,178,178,178,,178,,,,,,,,,,104,104,,104',
'104,104,,104,180,180,,180,180,180,,180,181,181,,,,,,,405,405,181,181',
'181,181,181,181,181,,405,405,405,405,405,405,405,182,182,,,,,,,,,182',
'182,182,182,182,182,182,,181,181,,181,181,181,,181,405,405,,405,405',
'405,,405,,,,,,,,185,185,182,182,,182,182,182,,182,185,185,185,185,185',
'185,185,242,242,,,,,,,187,187,242,242,242,242,242,242,242,,187,187,187',
'187,187,187,187,,185,185,,185,185,185,,185,,,,,,,,,,242,242,,242,242',
'242,,242,187,187,,187,187,187,,187,179,179,,,,,,,101,101,179,179,179',
'179,179,179,179,,101,101,101,101,101,101,101,217,217,,,,,,,,,217,217',
'217,217,217,217,217,,179,179,,179,179,179,,179,101,101,,101,101,101',
',101,,,,,,,,216,216,217,217,,217,217,217,,217,216,216,216,216,216,216',
'216,192,192,,,,,,,186,186,192,192,192,192,192,192,192,,186,186,186,186',
'186,186,186,,216,216,,216,216,216,,216,,,,,,,,,,192,192,,192,192,192',
',192,186,186,,186,186,186,,186,191,191,,,,,,,190,190,191,191,191,191',
'191,191,191,,190,190,190,190,190,190,190,189,189,,,,,,,,,189,189,189',
'189,189,189,189,,191,191,,191,191,191,,191,190,190,,190,190,190,,190',
',,,,,,,188,188,189,189,,189,189,189,,189,188,188,188,188,188,188,188',
'240,240,,,,,,,,,240,240,240,240,240,240,240,,,,,,,,,,188,188,,188,188',
'188,,188,,,,,,,,,,240,240,,240,240,240,,240,294,294,294,294,,,,,294',
'294,294,,,,,294,,,294,,,169,169,169,169,169,169,169,169,169,169,169',
',169,,,,,169,,169,169,,,,294,169,169,,169,,,,,,,,,169,169,,,169,169',
',169,153,153,153,153,153,153,153,153,153,153,153,,153,,,,,153,,153,153',
',,,,153,153,,153,,,,,,,,,153,153,,,153,153,,153,168,168,168,168,168',
'168,168,168,168,168,168,,168,,,,,168,,168,168,,,,,168,168,,168,,,,,',
',,,168,168,,,168,168,,168,166,166,166,166,166,166,166,166,166,166,166',
',166,,,,,166,,166,166,,,,,166,166,,166,,,,,,,,,166,166,,166,166,166',
',166,167,167,167,167,167,167,167,167,167,167,167,,167,,,,,167,,167,167',
',,,,167,167,,167,,,,,,,,,167,167,,167,167,167,,167,25,25,25,25,25,25',
'25,25,25,25,25,25,,25,25,98,98,98,98,98,98,98,98,98,98,98,98,,98,98' ]
        racc_action_check = arr = ::Array.new(2730, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1531,   376,   182,   nil,   nil,   178,   765,  1022,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,
   615,   nil,   nil,   nil,   nil,  2625,   nil,    -8,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,    69,   nil,
   nil,   nil,    57,   270,   382,   385,   193,    81,   437,   nil,
   nil,   460,   526,   348,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,   nil,   nil,   977,  1576,   422,   417,   376,   375,
   361,    70,   104,   nil,    30,    38,   314,   360,  2640,   nil,
  1791,  2162,   140,    51,  1953,  1690,  1709,  1731,  1750,  1772,
   685,   693,  1832,  1854,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   116,   221,   196,   195,   194,   193,   175,   nil,   nil,   184,
  1427,   nil,  1382,     6,    -6,   170,   nil,   nil,   nil,   nil,
   nil,    93,   295,  2490,   328,   333,   nil,  1017,   297,  1247,
  1202,  1157,  1112,  1067,   932,   nil,  2580,  2625,  2535,  2445,
   nil,   nil,   nil,   nil,   nil,  1668,  1873,  1813,  1936,  2154,
  1961,  2012,  2037,   629,   621,  2078,  2245,  2103,  2362,  2321,
  2304,  2296,  2237,   603,   549,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   262,
   155,   151,   nil,   nil,   nil,   nil,  2220,  2179,   nil,    41,
   752,   797,   842,   nil,    40,    -3,   887,   737,  1665,   337,
   nil,   nil,   nil,   nil,   nil,   -47,    97,   nil,    -5,   nil,
  2379,   nil,  2095,   nil,   nil,   nil,   882,   792,   972,   701,
   nil,   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,
   nil,    96,   nil,   105,   nil,   nil,   nil,   127,   119,   123,
   nil,   837,   104,   733,  2451,   nil,   nil,  1669,   -12,   -13,
   nil,   nil,   nil,   -11,   175,   208,   nil,   nil,   195,   -16,
   214,   nil,   239,   235,   248,   nil,    15,   nil,   244,   nil,
   240,   269,  1895,   271,   272,   273,   nil,   nil,   nil,   nil,
   nil,   264,   286,   287,   293,   294,   nil,   nil,   nil,   259,
   nil,   nil,   nil,   nil,   296,   nil,   271,   nil,   nil,   295,
   nil,   294,   296,   nil,   nil,   310,   nil,   nil,    -7,   nil,
  1292,  1337,  1472,   nil,   nil,   nil,   316,   329,   nil,   330,
   371,   349,   -11,   nil,   nil,   nil,  1627,   nil,   nil,   nil,
   nil,   nil,   362,   363,   386,   564,   475,   383,   384,   nil,
   nil,   nil,    17,   nil,   386,   nil,   394,   370,   384,   nil,
   nil,   399,   393,   nil,   -25,  2020,   nil,   nil,   nil,   416,
   430,   nil,   nil,   445,   nil,   nil,   nil,   446,   nil,   nil,
   nil,   nil,   437,   nil ]

racc_action_default = [
  -240,  -240,  -240,    -2,    -3,    -4,    -7,  -240,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,
   -32,   -33,   -36,   -37,   -38,   -41,   -40,   -59,   -53,   -59,
   -69,   -70,   -71,   -72,   -80,   -81,   -82,   -83,   -84,   -85,
   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,
   -96,   -97,   -98,   -99,  -100,  -236,  -240,  -107,  -240,  -110,
  -234,  -234,  -239,  -231,  -231,  -231,  -240,   -73,   -73,  -151,
  -152,   -73,   -73,   -73,  -156,  -158,  -236,  -162,  -163,  -168,
  -240,    -1,  -225,  -226,    -5,    -6,  -231,  -231,  -231,  -231,
  -231,  -231,   -73,   -17,  -231,  -231,  -231,  -231,   -39,  -183,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,   -46,   -47,   -48,   -49,   -50,   -59,
   -52,   -55,   -60,   -61,   -63,   -75,   -77,   -78,   -79,   -54,
  -240,  -231,  -231,  -231,  -231,  -231,  -240,  -236,  -239,  -231,
  -240,  -232,  -240,  -240,  -240,   -74,  -149,  -150,  -153,  -154,
  -155,  -231,  -231,  -240,  -231,  -231,   424,    -8,    -9,  -240,
  -240,  -240,  -240,  -240,  -240,   -16,  -240,  -240,  -240,  -240,
  -184,  -185,  -223,  -224,  -186,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -191,  -194,  -197,  -200,  -203,
  -206,  -209,  -218,  -212,  -215,  -221,  -222,   -51,   -76,  -231,
   -65,   -65,  -101,  -102,  -103,  -104,  -240,  -240,  -239,  -113,
  -174,  -240,  -240,  -128,  -231,  -240,  -240,  -131,  -240,  -231,
  -142,  -144,  -229,  -230,  -239,  -240,  -161,   -41,   -59,  -237,
  -239,  -165,  -239,  -170,   -10,   -11,   -12,   -13,   -14,   -15,
   -28,   -32,   -29,   -34,   -35,  -187,  -188,  -192,  -195,  -198,
  -201,  -204,  -207,  -210,  -219,  -213,  -216,  -189,  -190,  -193,
  -196,  -199,  -202,  -205,  -208,  -211,  -220,  -214,  -217,  -239,
   -57,  -231,   -67,  -231,   -44,   -45,  -105,  -231,  -240,  -117,
   -42,  -179,  -175,  -240,  -240,  -239,  -130,  -240,  -240,  -240,
  -136,  -137,  -138,  -240,  -240,  -240,  -239,  -160,  -240,  -231,
  -240,  -171,  -231,  -240,  -231,  -239,  -231,  -239,  -240,  -111,
  -119,  -231,  -115,  -231,  -231,  -231,  -121,  -123,  -124,  -125,
  -126,  -240,  -231,  -231,  -231,  -231,  -237,  -143,  -239,   -73,
  -237,  -237,  -164,  -166,  -231,  -169,  -240,  -238,   -58,  -240,
   -66,  -240,  -240,  -108,  -112,  -231,  -118,   -43,  -240,  -236,
  -176,  -177,  -178,  -235,  -235,  -129,  -133,  -240,  -132,  -117,
  -240,  -240,  -240,  -157,  -159,  -167,  -240,   -56,   -62,   -68,
   -64,  -120,  -231,  -231,  -180,  -181,  -182,  -231,  -231,  -135,
  -236,  -239,  -240,  -145,  -231,  -237,  -231,  -113,  -240,  -239,
  -239,  -231,  -240,  -140,  -117,  -240,  -173,  -114,  -116,  -240,
  -240,  -134,  -139,  -231,  -146,  -147,  -148,  -231,  -122,  -127,
  -239,  -172,  -240,  -141 ]

racc_goto_table = [
   126,    42,   307,   302,   320,   130,   289,   338,    42,   326,
   330,   144,   129,    43,     5,    99,   237,   146,   147,   238,
    43,   148,   149,   150,   236,   316,   153,   210,   286,   287,
    98,   237,   237,   212,   238,   238,   218,   251,   251,   126,
   126,   126,   165,    44,   126,   126,   126,   253,   254,   133,
    44,   322,   309,   209,   312,   387,   388,   281,   283,   250,
   252,   134,   135,   354,   208,   126,   358,   377,   279,   211,
   119,   363,   332,   333,   334,   364,   138,   299,   231,   335,
   229,    81,   413,     2,   391,    42,    42,   224,   170,   304,
   208,   414,   126,   151,   152,   239,   240,    43,    43,   370,
   154,   242,   207,   373,   374,   155,   311,   416,   403,   292,
     1,   nil,   nil,     6,   nil,   nil,   nil,   nil,   126,   415,
    93,   nil,   nil,   nil,   nil,   nil,   nil,    44,    44,   nil,
   nil,   nil,   nil,   382,   357,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,    42,    21,   nil,   nil,   394,   nil,   nil,
   nil,    21,   nil,    43,    42,    43,   nil,   nil,   405,   nil,
    42,    42,    42,    42,    42,    42,    43,    42,    42,    42,
    42,   nil,    43,    43,    43,    43,    43,    43,   nil,    43,
    43,    43,    43,    44,   407,    44,   nil,   nil,   396,   284,
   284,   nil,   nil,   nil,   nil,   nil,    44,   157,   158,   nil,
   nil,   nil,    44,    44,    44,    44,    44,    44,   nil,    44,
    44,    44,    44,   284,   nil,   284,   136,   417,   nil,   nil,
   nil,    42,    42,    42,   314,   nil,   nil,    42,    21,    21,
   nil,   nil,   nil,    43,    43,    43,   nil,   nil,   nil,    43,
   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   126,   227,   nil,   228,   nil,   nil,   nil,   234,
   235,   nil,   nil,    44,    44,    44,   nil,   nil,   nil,    44,
   nil,   nil,   244,   245,   246,   247,   248,   249,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,    21,   nil,   nil,   372,
   nil,   nil,   225,   nil,   nil,   284,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,    21,    21,    21,    21,    21,   383,
    21,    21,   126,   nil,   nil,   392,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   295,   291,   293,   294,   nil,   nil,   nil,   297,
   401,   nil,   nil,   126,   nil,   nil,   nil,   nil,   nil,   284,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,    42,    42,    21,    21,    21,   nil,   nil,   nil,
    21,   nil,   288,    43,    43,    43,   nil,   nil,   284,   nil,
   nil,   nil,   nil,   nil,   nil,   140,   142,   143,   305,   315,
   nil,   317,   nil,   nil,   308,   nil,   310,   nil,   nil,   nil,
   nil,   nil,   nil,    44,    44,    44,   nil,   nil,   159,   160,
   161,   162,   163,   164,   nil,   nil,   166,   167,   168,   169,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   356,
   nil,   nil,   nil,   313,   nil,   nil,   nil,   nil,   nil,   nil,
   366,   367,   368,   369,   nil,   nil,   nil,   nil,   nil,   331,
   nil,   nil,   nil,   216,   217,   nil,   221,   222,   nil,   nil,
   341,   226,   nil,   381,   nil,   nil,   nil,   nil,   nil,   349,
   nil,   352,   nil,   384,   385,   386,   241,   243,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   397,   nil,   371,   nil,   nil,   399,   400,   nil,   nil,   nil,
   nil,   nil,   404,   nil,    21,    21,    21,   171,   174,   411,
   nil,   195,   196,   197,   198,   199,   200,   201,   203,   205,
   206,   420,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   280,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   402,   nil,   nil,   nil,   nil,
   nil,   303,   nil,   409,   410,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   422,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   255,   256,   257,   258,   259,   260,   261,   262,
   263,   265,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   277,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   318,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   343,   nil,   nil,   346,   nil,   348,   nil,   351,   nil,
   nil,   nil,   nil,   nil,   nil,   360,   361,   362,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   398,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   406,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421 ]

racc_goto_check = [
    30,    31,    86,    74,    71,    63,    70,    88,    31,    76,
    76,    43,    36,    32,     4,    50,    25,     7,     7,    34,
    32,     7,     7,     7,    20,    49,    63,    47,    29,    29,
    26,    25,    25,    64,    34,    34,    68,    20,    20,    30,
    30,    30,     7,    33,    30,    30,    30,    22,    22,    69,
    33,    28,    29,    42,    29,    77,    77,    45,    45,    18,
    18,    75,    75,    72,    43,    30,    73,    41,    39,    48,
    35,    78,    74,    74,    74,    79,    81,    82,    83,    84,
    85,     3,    87,     2,    71,    31,    31,    63,    50,    89,
    43,    90,    30,    91,    92,    93,    94,    32,    32,    86,
    95,    96,    36,    86,    86,    97,    98,    88,    76,    99,
     1,   nil,   nil,     5,   nil,   nil,   nil,   nil,    30,    71,
     5,   nil,   nil,   nil,   nil,   nil,   nil,    33,    33,   nil,
   nil,   nil,   nil,    74,    29,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,    31,    21,   nil,   nil,    74,   nil,   nil,
   nil,    21,   nil,    32,    31,    32,   nil,   nil,    86,   nil,
    31,    31,    31,    31,    31,    31,    32,    31,    31,    31,
    31,   nil,    32,    32,    32,    32,    32,    32,   nil,    32,
    32,    32,    32,    33,    70,    33,   nil,   nil,    29,    30,
    30,   nil,   nil,   nil,   nil,   nil,    33,     5,     5,   nil,
   nil,   nil,    33,    33,    33,    33,    33,    33,   nil,    33,
    33,    33,    33,    30,   nil,    30,    40,    29,   nil,   nil,
   nil,    31,    31,    31,    43,   nil,   nil,    31,    21,    21,
   nil,   nil,   nil,    32,    32,    32,   nil,   nil,   nil,    32,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    30,     5,   nil,     5,   nil,   nil,   nil,    46,
    46,   nil,   nil,    33,    33,    33,   nil,   nil,   nil,    33,
   nil,   nil,     5,     5,     5,     5,     5,     5,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,    21,   nil,   nil,     7,
   nil,   nil,    40,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,    21,    21,    21,    21,    21,    63,
    21,    21,    30,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,     5,     5,     5,   nil,   nil,   nil,     5,
    63,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    31,    31,    31,    21,    21,    21,   nil,   nil,   nil,
    21,   nil,    40,    32,    32,    32,   nil,   nil,    30,   nil,
   nil,   nil,   nil,   nil,   nil,     6,     6,     6,    40,    46,
   nil,    46,   nil,   nil,    40,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,    33,    33,    33,   nil,   nil,     6,     6,
     6,     6,     6,     6,   nil,   nil,     6,     6,     6,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
    46,    46,    46,    46,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,     6,     6,   nil,     6,     6,   nil,   nil,
    40,     6,   nil,    46,   nil,   nil,   nil,   nil,   nil,    40,
   nil,    40,   nil,     5,     5,     5,     6,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,    40,   nil,   nil,    46,    46,   nil,   nil,   nil,
   nil,   nil,    46,   nil,    21,    21,    21,   100,   100,    46,
   nil,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,     6,   nil,    40,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,     6,   nil,     6,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,     6,     6,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,   110,    83,    79,    14,   113,   322,   -50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -107,   nil,
  -129,   144,  -121,   nil,   nil,  -137,     5,   nil,  -239,  -188,
   -27,     1,    13,    43,  -134,    43,   -17,   nil,   nil,  -141,
   154,  -280,   -68,   -55,   nil,  -153,   108,   -96,   -55,  -257,
   -10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -50,   -97,   nil,   nil,   nil,   -97,   -10,
  -213,  -285,  -257,  -256,  -225,     1,  -284,  -308,  -255,  -255,
   nil,    14,  -150,   -66,  -223,   -63,  -237,  -321,  -297,  -142,
  -313,    19,    19,   -58,   -58,    22,   -54,    26,  -136,  -111,
   407,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   220,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   117,    22,    23,    24,    25,   nil,    26,   nil,   nil,
   172,   115,   116,   118,    27,   145,   120,    28,    29,   nil,
   nil,   nil,   nil,   125,   122,   nil,   nil,   nil,   nil,   nil,
   128,    34,    35,    36,    37,    38,    39,    40,    41,    51,
    52,    53,    54,   nil,   nil,    56,    57,    58,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    62,   nil,   nil,   301,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_3,
  1, 92, :_reduce_none,
  2, 92, :_reduce_5,
  2, 92, :_reduce_6,
  1, 94, :_reduce_7,
  3, 94, :_reduce_8,
  3, 94, :_reduce_9,
  4, 95, :_reduce_10,
  4, 95, :_reduce_11,
  4, 95, :_reduce_12,
  4, 95, :_reduce_13,
  4, 95, :_reduce_14,
  4, 95, :_reduce_15,
  3, 95, :_reduce_16,
  2, 95, :_reduce_17,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 98, :_reduce_none,
  4, 107, :_reduce_28,
  4, 107, :_reduce_29,
  1, 107, :_reduce_none,
  1, 108, :_reduce_31,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  4, 110, :_reduce_34,
  4, 110, :_reduce_35,
  1, 110, :_reduce_36,
  1, 110, :_reduce_37,
  1, 109, :_reduce_none,
  2, 109, :_reduce_39,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  0, 118, :_reduce_42,
  2, 118, :_reduce_43,
  1, 119, :_reduce_none,
  1, 119, :_reduce_45,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 114, :_reduce_51,
  2, 117, :_reduce_52,
  1, 117, :_reduce_none,
  2, 127, :_reduce_54,
  0, 132, :_reduce_55,
  7, 128, :_reduce_56,
  1, 129, :_reduce_57,
  3, 129, :_reduce_58,
  0, 126, :_reduce_59,
  1, 126, :_reduce_none,
  0, 137, :_reduce_61,
  6, 134, :_reduce_62,
  0, 138, :_reduce_63,
  6, 134, :_reduce_64,
  0, 135, :_reduce_65,
  3, 135, :_reduce_66,
  0, 139, :_reduce_67,
  3, 139, :_reduce_68,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  0, 97, :_reduce_73,
  1, 97, :_reduce_none,
  1, 125, :_reduce_75,
  2, 125, :_reduce_76,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 141, :_reduce_90,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 151, :_reduce_101,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  4, 106, :_reduce_105,
  1, 155, :_reduce_none,
  1, 113, :_reduce_107,
  6, 156, :_reduce_108,
  1, 157, :_reduce_none,
  0, 159, :_reduce_110,
  5, 146, :_reduce_111,
  4, 158, :_reduce_112,
  0, 160, :_reduce_113,
  6, 160, :_reduce_114,
  0, 163, :_reduce_115,
  4, 163, :_reduce_116,
  0, 161, :_reduce_117,
  2, 161, :_reduce_118,
  0, 162, :_reduce_119,
  2, 162, :_reduce_120,
  0, 168, :_reduce_121,
  10, 144, :_reduce_122,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  0, 169, :_reduce_126,
  10, 145, :_reduce_127,
  3, 142, :_reduce_128,
  6, 142, :_reduce_129,
  4, 142, :_reduce_130,
  0, 172, :_reduce_131,
  6, 170, :_reduce_132,
  5, 171, :_reduce_133,
  8, 171, :_reduce_134,
  6, 171, :_reduce_135,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 174, :_reduce_138,
  9, 143, :_reduce_139,
  0, 177, :_reduce_140,
  12, 148, :_reduce_141,
  1, 175, :_reduce_142,
  3, 175, :_reduce_143,
  0, 179, :_reduce_144,
  7, 147, :_reduce_145,
  5, 178, :_reduce_146,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 99, :_reduce_149,
  2, 100, :_reduce_150,
  1, 101, :_reduce_151,
  1, 102, :_reduce_152,
  2, 103, :_reduce_153,
  2, 104, :_reduce_154,
  2, 105, :_reduce_155,
  0, 181, :_reduce_156,
  6, 121, :_reduce_157,
  0, 182, :_reduce_158,
  6, 122, :_reduce_159,
  4, 111, :_reduce_160,
  1, 183, :_reduce_161,
  1, 152, :_reduce_162,
  0, 185, :_reduce_163,
  5, 149, :_reduce_164,
  1, 184, :_reduce_165,
  3, 184, :_reduce_166,
  4, 184, :_reduce_167,
  0, 187, :_reduce_168,
  5, 150, :_reduce_169,
  1, 186, :_reduce_170,
  2, 186, :_reduce_171,
  7, 188, :_reduce_172,
  5, 188, :_reduce_173,
  1, 136, :_reduce_174,
  2, 136, :_reduce_175,
  4, 136, :_reduce_176,
  4, 136, :_reduce_177,
  4, 136, :_reduce_178,
  1, 189, :_reduce_179,
  4, 189, :_reduce_180,
  4, 189, :_reduce_181,
  4, 189, :_reduce_182,
  1, 116, :_reduce_183,
  2, 116, :_reduce_184,
  2, 140, :_reduce_185,
  2, 140, :_reduce_186,
  3, 140, :_reduce_187,
  3, 140, :_reduce_188,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_191,
  3, 140, :_reduce_192,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  3, 140, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_221,
  2, 140, :_reduce_222,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 191, :_reduce_none,
  2, 191, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 192, :_reduce_none,
  0, 165, :_reduce_234,
  0, 167, :_reduce_235,
  0, 153, :_reduce_236,
  0, 176, :_reduce_237,
  0, 131, :_reduce_238,
  0, 130, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 424

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  :LPARLEN_ARG => 26,
  ")" => 27,
  :END => 28,
  "}" => 29,
  :ID => 30,
  :PATH => 31,
  :TEST => 32,
  :SPECIAL => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :BEGIN => 42,
  :RESCUE => 43,
  :ASSOC => 44,
  :ELSE => 45,
  :ENSURE => 46,
  :WHILE => 47,
  :DO_COND => 48,
  :UNTIL => 49,
  :IF => 50,
  :ELSIF => 51,
  :logical_coomand => 52,
  :elif_clause => 53,
  :THEN => 54,
  :UNLESS => 55,
  :FOR => 56,
  :IN => 57,
  :CASE => 58,
  :WHEN => 59,
  :BREAK => 60,
  :NEXT => 61,
  :REDO => 62,
  :Retry => 63,
  :RAISE => 64,
  :RETURN => 65,
  :YIELD => 66,
  "(" => 67,
  :XSTRING_BEG => 68,
  :XSTRING_END => 69,
  "$" => 70,
  :RUBYEXP => 71,
  :LBLACK_A => 72,
  "," => 73,
  :LBRACE_H => 74,
  ">" => 75,
  "<" => 76,
  :FID => 77,
  :REDIR_WORD => 78,
  :GREATER_GREATER => 79,
  :GREATER_BAR => 80,
  :LESS_GREATER => 81,
  :LESS_LESS => 82,
  :LESS_LESS_MINUS => 83,
  :LESS_LESS_LESS => 84,
  :LESS_AND => 85,
  :GREATER_AND => 86,
  "-" => 87,
  :AND_GREATER => 88,
  :AND_GREATER_GREATER => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "LPARLEN_ARG",
  "\")\"",
  "END",
  "\"}\"",
  "ID",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "logical_coomand",
  "elif_clause",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_command",
  "index_ref_command",
  "simple_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "@1",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@2",
  "@3",
  "block_arg",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "body_list",
  "@4",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@5",
  "@6",
  "if_head",
  "elsif_clause",
  "@7",
  "opt_terms",
  "@8",
  "for_arg",
  "lex_arg",
  "@9",
  "case_body",
  "@10",
  "cases",
  "@11",
  "@12",
  "trivial_command0",
  "array_element_list",
  "@13",
  "hash_element_list",
  "@14",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg",
  "nl_beg" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_6(val, _values, result)
    		result.pipeout = :STATUS
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_28(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_29(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_31(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_34(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_35(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_36(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_37(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_39(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_42(val, _values, result)
    		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_43(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_45(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_51(val, _values, result)
    	       result = Node::SimpleCommand(val[0], val[1], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_52(val, _values, result)
      	       result = Node::SimpleCommand(val[0], [], val[1])
	    
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_54(val, _values, result)
    	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_55(val, _values, result)
    @lex.indent_push(:LPAREN_ARG)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_56(val, _values, result)
    	      result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_57(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_58(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 254)
  def _reduce_59(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_61(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_62(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_63(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 268)
  def _reduce_64(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_65(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_66(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_67(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_68(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_73(val, _values, result)
    	       result = []
	    
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_75(val, _values, result)
    	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_76(val, _values, result)
    	       result.push val[1]
	    
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_90(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_101(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 363)
  def _reduce_105(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_107(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_108(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_110(val, _values, result)
    @lex.indent_push(:BEGIN)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 408)
  def _reduce_111(val, _values, result)
    		result = Node::BeginCommand(*val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_112(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_113(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_114(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[4])
		if val[5]
		   result, t = val[5], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[4])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 433)
  def _reduce_115(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_116(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 441)
  def _reduce_117(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 446)
  def _reduce_118(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 450)
  def _reduce_119(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 454)
  def _reduce_120(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 457)
  def _reduce_121(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 459)
  def _reduce_122(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[7])
	    
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.y', 466)
  def _reduce_126(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 468)
  def _reduce_127(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[7])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_128(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_129(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 481)
  def _reduce_130(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_131(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 486)
  def _reduce_132(val, _values, result)
    		result = [val[2], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 490)
  def _reduce_133(val, _values, result)
    		result = Node::IfCommand(val[2], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 494)
  def _reduce_134(val, _values, result)
    		result = Node::IfCommand(val[2], val[4], val[6])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 498)
  def _reduce_135(val, _values, result)
    		result = Node::IfCommand(val[2], val[4], val[6])
	    
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.y', 504)
  def _reduce_138(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_139(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 509)
  def _reduce_140(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 511)
  def _reduce_141(val, _values, result)
    		result = Node::ForCommand(val[2], val[6], val[9])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 516)
  def _reduce_142(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_143(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_144(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 527)
  def _reduce_145(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 532)
  def _reduce_146(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.y', 547)
  def _reduce_149(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 552)
  def _reduce_150(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 557)
  def _reduce_151(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 562)
  def _reduce_152(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 567)
  def _reduce_153(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 572)
  def _reduce_154(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 577)
  def _reduce_155(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 580)
  def _reduce_156(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 583)
  def _reduce_157(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 586)
  def _reduce_158(val, _values, result)
    @lex.indent_push(:BACK_QUOTE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 588)
  def _reduce_159(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 628)
  def _reduce_160(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 633)
  def _reduce_161(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 686)
  def _reduce_162(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 689)
  def _reduce_163(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 691)
  def _reduce_164(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 696)
  def _reduce_165(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 701)
  def _reduce_166(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 706)
  def _reduce_167(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 710)
  def _reduce_168(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 712)
  def _reduce_169(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 717)
  def _reduce_170(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 722)
  def _reduce_171(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 727)
  def _reduce_172(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 732)
  def _reduce_173(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 738)
  def _reduce_174(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 742)
  def _reduce_175(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_176(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 750)
  def _reduce_177(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 755)
  def _reduce_178(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 760)
  def _reduce_179(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 764)
  def _reduce_180(val, _values, result)
    		val[0].add_command(val[3])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 769)
  def _reduce_181(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[3])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 775)
  def _reduce_182(val, _values, result)
    		val[0].add_command(val[3])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 781)
  def _reduce_183(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_184(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 791)
  def _reduce_185(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 795)
  def _reduce_186(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 799)
  def _reduce_187(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 803)
  def _reduce_188(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	  
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.y', 809)
  def _reduce_191(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 813)
  def _reduce_192(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'parser.y', 851)
  def _reduce_221(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 855)
  def _reduce_222(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	  
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

module_eval(<<'.,.,', 'parser.y', 876)
  def _reduce_234(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 877)
  def _reduce_235(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 879)
  def _reduce_236(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 880)
  def _reduce_237(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 881)
  def _reduce_238(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 883)
  def _reduce_239(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
